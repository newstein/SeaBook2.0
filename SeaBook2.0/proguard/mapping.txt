a -> g:
    java.util.Map a -> a
    java.util.Map b -> b
    void a(d,java.util.Map,android.net.Uri,android.webkit.WebView) -> a
    boolean a(android.net.Uri) -> a
    boolean b(android.net.Uri) -> b
    boolean c(android.net.Uri) -> c
    void a(android.webkit.WebView,java.lang.String,java.lang.String) -> a
    void a(android.webkit.WebView,java.lang.String) -> a
    void a(android.webkit.WebView,java.util.Map) -> a
    void a(android.webkit.WebView) -> a
    void b(android.webkit.WebView) -> b
b -> e:
    c a -> a
    d b -> b
    android.content.Context c -> c
    void a(java.net.HttpURLConnection) -> a
    void b(java.net.HttpURLConnection) -> b
    java.lang.Void a(java.lang.String[]) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
c -> f:
    java.lang.String d -> a
    java.lang.String a -> b
    b e -> c
    d f -> d
    android.webkit.WebView g -> e
    java.lang.String b -> f
    com.google.ads.AdRequest$ErrorCode c -> g
    boolean h -> h
    boolean i -> i
    com.google.ads.AdRequest$ErrorCode a(com.google.ads.AdRequest[]) -> a
    java.lang.String a(com.google.ads.AdRequest,android.app.Activity) -> a
    void onCancelled() -> onCancelled
    void a(java.lang.String,java.lang.String) -> a
    void a(java.lang.String) -> a
    void a(com.google.ads.AdRequest$ErrorCode) -> a
    void a() -> a
    void onProgressUpdate(java.lang.Object[]) -> onProgressUpdate
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
c$a -> y:
    c a -> a
c$b -> z:
    c a -> a
com.google.ads.Ad -> com.google.ads.b:
com.google.ads.AdActivity -> com.google.ads.AdActivity:
    java.lang.Object a -> a
    com.google.ads.AdActivity b -> b
    d c -> c
    com.google.ads.AdActivity d -> d
    com.google.ads.AdActivity e -> e
    g f -> f
    long g -> g
    android.widget.RelativeLayout h -> h
    com.google.ads.AdActivity i -> i
    boolean j -> j
    android.widget.VideoView k -> k
    void a(java.lang.String) -> a
    android.widget.VideoView getVideoView() -> a
    g getOpeningAdWebView() -> b
    void launchAdActivity(d,e) -> a
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    void a(g,boolean,int) -> a
    void showVideo(android.widget.VideoView) -> a
    void onCompletion(android.media.MediaPlayer) -> onCompletion
    void onDestroy() -> onDestroy
    void onPrepared(android.media.MediaPlayer) -> onPrepared
    boolean onError(android.media.MediaPlayer,int,int) -> onError
    void onWindowFocusChanged(boolean) -> onWindowFocusChanged
com.google.ads.AdListener -> com.google.ads.e:
com.google.ads.AdRequest -> com.google.ads.d:
    com.google.ads.AdRequest$Gender a -> a
    java.lang.String b -> b
    java.util.Set c -> c
    java.util.Map d -> d
    android.location.Location e -> e
    boolean f -> f
    boolean g -> g
    java.lang.String TEST_EMULATOR -> h
    java.util.Set h -> i
    java.util.Map getRequestMap(android.content.Context) -> a
com.google.ads.AdRequest$ErrorCode -> com.google.ads.c:
    com.google.ads.AdRequest$ErrorCode INVALID_REQUEST -> a
    com.google.ads.AdRequest$ErrorCode NO_FILL -> b
    com.google.ads.AdRequest$ErrorCode NETWORK_ERROR -> c
    com.google.ads.AdRequest$ErrorCode INTERNAL_ERROR -> d
    java.lang.String a -> e
    com.google.ads.AdRequest$ErrorCode[] b -> f
    com.google.ads.AdRequest$ErrorCode[] values() -> values
    com.google.ads.AdRequest$ErrorCode valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
com.google.ads.AdRequest$Gender -> com.google.ads.a:
    com.google.ads.AdRequest$Gender MALE -> a
    com.google.ads.AdRequest$Gender FEMALE -> b
    java.lang.String a -> c
    com.google.ads.AdRequest$Gender[] b -> d
    com.google.ads.AdRequest$Gender[] values() -> values
    com.google.ads.AdRequest$Gender valueOf(java.lang.String) -> valueOf
    java.lang.String toString() -> toString
com.google.ads.AdSize -> com.google.ads.g:
    com.google.ads.AdSize BANNER -> a
    com.google.ads.AdSize IAB_MRECT -> b
    com.google.ads.AdSize IAB_BANNER -> c
    com.google.ads.AdSize IAB_LEADERBOARD -> d
    int a -> e
    int b -> f
    java.lang.String c -> g
    int getWidth() -> a
    int getHeight() -> b
    java.lang.String toString() -> toString
com.google.ads.AdView -> com.google.ads.AdView:
    d a -> a
    void a(android.content.Context,java.lang.String,int,com.google.ads.AdSize) -> a
    boolean a(android.content.Context,com.google.ads.AdSize) -> a
    void a(android.content.Context,java.lang.String,com.google.ads.AdSize) -> a
    void a(android.app.Activity,com.google.ads.AdSize,java.lang.String) -> a
    void loadAd(com.google.ads.AdRequest) -> a
com.google.ads.InstallReceiver -> com.google.ads.InstallReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
    java.lang.String a(java.lang.String,java.lang.String,java.lang.String) -> a
    void forwardIntent(android.content.Context,android.content.Intent) -> a
com.google.ads.InterstitialAd -> com.google.ads.f:
com.google.ads.util.AdUtil -> com.google.ads.util.AdUtil:
    java.lang.Boolean a -> a
    java.lang.String b -> b
    java.lang.String c -> c
    android.media.AudioManager d -> d
    android.util.DisplayMetrics e -> e
    boolean f -> f
    boolean g -> g
    java.lang.String h -> h
    java.lang.String a(android.content.Context) -> a
    boolean b(android.content.Context) -> b
    boolean c(android.content.Context) -> c
    boolean a() -> a
    boolean a(android.net.Uri) -> a
    java.lang.String a(java.lang.String) -> a
    java.lang.String d(android.content.Context) -> d
    java.lang.String e(android.content.Context) -> e
    com.google.ads.util.AdUtil$a f(android.content.Context) -> f
    java.lang.String g(android.content.Context) -> g
    android.util.DisplayMetrics a(android.app.Activity) -> a
    java.lang.String a(android.location.Location) -> a
    java.lang.String b(java.lang.String) -> b
    java.util.HashMap b(android.net.Uri) -> b
    boolean b() -> b
    void a(boolean) -> a
    void h(android.content.Context) -> h
    java.lang.String i(android.content.Context) -> i
    void a(android.webkit.WebView) -> a
    void a(java.net.HttpURLConnection,android.content.Context) -> a
    java.lang.String a(java.util.Map) -> a
    org.json.JSONObject b(java.util.Map) -> b
    org.json.JSONArray a(java.util.Set) -> a
com.google.ads.util.AdUtil$UserActivityReceiver -> com.google.ads.util.AdUtil$UserActivityReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.google.ads.util.AdUtil$a -> com.google.ads.util.a:
    com.google.ads.util.AdUtil$a a -> d
    com.google.ads.util.AdUtil$a b -> a
    com.google.ads.util.AdUtil$a c -> e
    com.google.ads.util.AdUtil$a d -> b
    com.google.ads.util.AdUtil$a e -> c
    com.google.ads.util.AdUtil$a f -> f
    com.google.ads.util.AdUtil$a[] g -> g
    com.google.ads.util.AdUtil$a[] values() -> values
    com.google.ads.util.AdUtil$a valueOf(java.lang.String) -> valueOf
com.google.ads.util.a -> com.google.ads.util.d:
    void a(java.lang.String) -> a
    void b(java.lang.String) -> b
    void a(java.lang.String,java.lang.Throwable) -> a
    void c(java.lang.String) -> c
    void b(java.lang.String,java.lang.Throwable) -> b
    void d(java.lang.String) -> d
    void e(java.lang.String) -> e
    void c(java.lang.String,java.lang.Throwable) -> c
    boolean a(java.lang.String,int) -> a
com.google.ads.util.b -> com.google.ads.util.e:
    boolean a -> a
    java.lang.String a(byte[]) -> a
com.google.ads.util.b$a -> com.google.ads.util.c:
    byte[] a -> d
    int b -> e
com.google.ads.util.b$b -> com.google.ads.util.b:
    byte[] h -> f
    byte[] i -> g
    byte[] j -> h
    int c -> i
    int k -> j
    boolean d -> a
    boolean e -> b
    boolean f -> c
    byte[] l -> k
    boolean g -> l
    boolean a(byte[],int) -> a
com.sean.bookcase.BookCaseAllBook -> com.sean.bookcase.BookCaseAllBook:
    android.webkit.WebView browser -> a
    void onCreate(android.os.Bundle) -> onCreate
com.sean.bookcase.BookCaseIntro -> com.sean.bookcase.BookCaseIntro:
    void onCreate(android.os.Bundle) -> onCreate
com.sean.bookcase.BookCaseIntro$1 -> com.sean.bookcase.a:
    com.sean.bookcase.BookCaseIntro this$0 -> a
    void run() -> run
com.sean.bookcase.BookCaseList -> com.sean.bookcase.BookCaseList:
    android.content.Intent myListIntent -> a
    java.util.List myBookApps -> b
    android.widget.GridView myGridView -> c
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    java.util.List access$0(com.sean.bookcase.BookCaseList) -> a
com.sean.bookcase.BookCaseList$1 -> com.sean.bookcase.e:
    com.sean.bookcase.BookCaseList this$0 -> a
    void onClick(android.view.View) -> onClick
com.sean.bookcase.BookCaseList$2 -> com.sean.bookcase.d:
    java.text.Collator myCollator -> a
    com.sean.bookcase.BookCaseList this$0 -> b
    int compare(java.lang.Object,java.lang.Object) -> compare
com.sean.bookcase.BookCaseList$AppsAdapter -> com.sean.bookcase.f:
    com.sean.bookcase.BookCaseList this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    int getCountX() -> a
    int getCountY() -> b
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
com.sean.bookcase.BookCaseList$AppsAdapter$1 -> com.sean.bookcase.c:
    com.sean.bookcase.BookCaseList$AppsAdapter this$1 -> a
    android.content.pm.ResolveInfo val$info -> b
    void onClick(android.view.View) -> onClick
com.sean.bookcase.BookCaseList$AppsAdapter$2 -> com.sean.bookcase.b:
    com.sean.bookcase.BookCaseList$AppsAdapter this$1 -> a
    android.content.pm.ResolveInfo val$info -> b
    boolean onLongClick(android.view.View) -> onLongClick
d -> c:
    java.lang.Object a -> a
    java.lang.ref.WeakReference b -> b
    com.google.ads.Ad c -> c
    com.google.ads.AdListener d -> d
    c e -> e
    com.google.ads.AdRequest f -> f
    com.google.ads.AdSize g -> g
    f h -> h
    java.lang.String i -> i
    g j -> j
    h k -> k
    android.os.Handler l -> l
    long m -> m
    boolean n -> n
    boolean o -> o
    android.content.SharedPreferences p -> p
    long q -> q
    x r -> r
    java.util.LinkedList s -> s
    java.util.LinkedList t -> t
    int u -> u
    void a(java.lang.String) -> a
    void b(java.lang.String) -> b
    void a() -> a
    void c() -> b
    void d() -> c
    android.app.Activity e() -> d
    com.google.ads.Ad f() -> e
    c g() -> f
    java.lang.String h() -> g
    g i() -> h
    h j() -> i
    com.google.ads.AdSize k() -> j
    f l() -> k
    void a(int) -> a
    int m() -> l
    long n() -> m
    boolean z() -> u
    boolean p() -> n
    void a(com.google.ads.AdRequest) -> a
    void a(com.google.ads.AdRequest$ErrorCode) -> a
    void q() -> o
    void r() -> p
    void s() -> q
    void t() -> r
    void u() -> v
    boolean v() -> s
    void w() -> t
    void a(long) -> a
    void a(float) -> a
e -> d:
    java.lang.String a -> a
    java.util.HashMap b -> b
    android.os.Bundle a() -> a
    java.lang.String b() -> b
    java.util.HashMap c() -> c
f -> a:
    java.util.LinkedList b -> a
    long c -> b
    long d -> c
    java.util.LinkedList e -> d
    long f -> e
    java.lang.String g -> f
    boolean h -> g
    boolean i -> h
    java.lang.String a -> i
    void a() -> a
    void b() -> b
    void c() -> c
    void d() -> d
    long e() -> e
    java.lang.String f() -> f
    java.lang.String g() -> g
    long h() -> h
    long i() -> i
    java.lang.String j() -> j
    void a(java.lang.String) -> a
    boolean k() -> k
    void l() -> l
    boolean m() -> m
    void n() -> n
    void o() -> o
    java.lang.String p() -> p
    void b(java.lang.String) -> b
g -> b:
    com.google.ads.AdActivity a -> a
    com.google.ads.AdSize b -> b
    void a() -> a
    com.google.ads.AdActivity b() -> b
    void a(com.google.ads.AdActivity) -> a
    void onMeasure(int,int) -> onMeasure
h -> n:
    d a -> a
    java.util.Map b -> b
    boolean c -> c
    boolean d -> d
    boolean e -> e
    boolean f -> f
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
    void a() -> a
    void b() -> b
i -> o:
    void a(d,java.util.HashMap,android.webkit.WebView) -> a
j -> l:
    void a(d,java.util.HashMap,android.webkit.WebView) -> a
k -> m:
    void a(d,java.util.HashMap,android.webkit.WebView) -> a
l -> j:
    void a(d,java.util.HashMap,android.webkit.WebView) -> a
m -> k:
    void a(d,java.util.HashMap,android.webkit.WebView) -> a
n -> h:
    void a(d,java.util.HashMap,android.webkit.WebView) -> a
o -> i:
    void a(d,java.util.HashMap,android.webkit.WebView) -> a
org.amse.ys.zip.Decompressor -> org.amse.ys.zip.b:
    java.util.Queue ourDeflators -> a
    int read(byte[],int,int) -> a
    int read() -> a
    void storeDecompressor(org.amse.ys.zip.Decompressor) -> a
    org.amse.ys.zip.Decompressor init(org.amse.ys.zip.MyBufferedInputStream,org.amse.ys.zip.LocalFileHeader) -> a
    int available() -> b
org.amse.ys.zip.DeflatingDecompressor -> org.amse.ys.zip.DeflatingDecompressor:
    org.amse.ys.zip.MyBufferedInputStream myStream -> a
    int myCompressedAvailable -> b
    int myAvailable -> c
    byte[] myInBuffer -> d
    int myInBufferOffset -> e
    int myInBufferLength -> f
    byte[] myOutBuffer -> g
    int myOutBufferOffset -> h
    int myOutBufferLength -> i
    boolean myInflatingInProgress -> j
    void reset(org.amse.ys.zip.MyBufferedInputStream,org.amse.ys.zip.LocalFileHeader) -> b
    int available() -> b
    int read(byte[],int,int) -> a
    int read() -> a
    void fillOutBuffer() -> c
    boolean startInflating() -> startInflating
    void endInflating() -> endInflating
    long inflate(byte[],int,int,byte[]) -> inflate
org.amse.ys.zip.LocalFileHeader -> org.amse.ys.zip.d:
    int Signature -> a
    int Version -> b
    int Flags -> c
    int CompressionMethod -> d
    int ModificationTime -> e
    int ModificationDate -> f
    int CRC32 -> g
    int CompressedSize -> h
    int UncompressedSize -> i
    int NameLength -> j
    int ExtraLength -> k
    java.lang.String FileName -> l
    int DataOffset -> m
org.amse.ys.zip.MyBufferedInputStream -> org.amse.ys.zip.c:
    org.amse.ys.zip.ZipFile$InputStreamHolder myStreamHolder -> a
    java.io.InputStream myFileInputStream -> b
    byte[] myBuffer -> c
    int myBytesReady -> d
    int myPositionInBuffer -> e
    int myCurrentPosition -> f
    int available() -> available
    int offset() -> a
    int read(byte[],int,int) -> read
    int read() -> read
    int read2Bytes() -> b
    int read4Bytes() -> c
    java.lang.String readString(int) -> a
    void skip(int) -> b
    void backSkip(int) -> c
    void setPosition(int) -> d
    void close() -> close
org.amse.ys.zip.NoCompressionDecompressor -> org.amse.ys.zip.i:
    org.amse.ys.zip.LocalFileHeader myHeader -> a
    org.amse.ys.zip.MyBufferedInputStream myStream -> b
    int myCurrentPosition -> c
    int read(byte[],int,int) -> a
    int read() -> a
    int available() -> b
org.amse.ys.zip.ZipException -> org.amse.ys.zip.g:
org.amse.ys.zip.ZipFile -> org.amse.ys.zip.e:
    org.amse.ys.zip.ZipFile$InputStreamHolder myStreamHolder -> a
    java.util.LinkedHashMap myFileHeaders -> b
    boolean myAllFilesAreRead -> c
    java.util.Queue myStoredStreams -> d
    java.util.Collection headers() -> a
    boolean readFileHeader(org.amse.ys.zip.MyBufferedInputStream,java.lang.String) -> a
    void storeBaseStream(org.amse.ys.zip.MyBufferedInputStream) -> a
    org.amse.ys.zip.MyBufferedInputStream getBaseStream() -> b
    int getEntrySize(java.lang.String) -> a
    java.io.InputStream getInputStream(java.lang.String) -> b
    org.amse.ys.zip.LocalFileHeader getHeader(java.lang.String) -> c
org.amse.ys.zip.ZipFile$1 -> org.amse.ys.zip.a:
    org.amse.ys.zip.ZipFile this$0 -> a
    java.lang.Object get(java.lang.Object) -> get
    java.lang.Object put(java.lang.Object,java.lang.Object) -> put
org.amse.ys.zip.ZipFile$InputStreamHolder -> org.amse.ys.zip.h:
    java.io.InputStream getInputStream() -> a
org.amse.ys.zip.ZipInputStream -> org.amse.ys.zip.f:
    org.amse.ys.zip.ZipFile myParent -> a
    org.amse.ys.zip.MyBufferedInputStream myBaseStream -> b
    org.amse.ys.zip.Decompressor myDecompressor -> c
    boolean myIsClosed -> d
    int available() -> available
    int read(byte[],int,int) -> read
    int read() -> read
    void close() -> close
    void finalize() -> finalize
org.geometerplus.android.fbreader.ActionButton -> org.geometerplus.android.fbreader.av:
    java.lang.String ActionId -> a
    boolean IsCloseButton -> b
org.geometerplus.android.fbreader.BookInfoActivity -> org.geometerplus.android.fbreader.BookInfoActivity:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> b
    org.geometerplus.zlibrary.core.image.ZLImage myImage -> c
    boolean myHideOpenButton -> d
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    android.widget.Button findButton(int) -> a
    void setupButton(int,java.lang.String,android.view.View$OnClickListener) -> a
    void setupInfoPair(int,java.lang.String,java.lang.CharSequence) -> a
    void setupBookInfo(org.geometerplus.fbreader.library.Book) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile access$0(org.geometerplus.android.fbreader.BookInfoActivity) -> a
    void access$1(org.geometerplus.android.fbreader.BookInfoActivity,org.geometerplus.fbreader.library.Book) -> a
org.geometerplus.android.fbreader.BookInfoActivity$1 -> org.geometerplus.android.fbreader.e:
    org.geometerplus.android.fbreader.BookInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.BookInfoActivity$2 -> org.geometerplus.android.fbreader.d:
    org.geometerplus.android.fbreader.BookInfoActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.BookInfoActivity$3 -> org.geometerplus.android.fbreader.c:
    org.geometerplus.android.fbreader.BookInfoActivity this$0 -> a
    org.geometerplus.fbreader.library.Book val$book -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.BookmarkEditActivity -> org.geometerplus.android.fbreader.BookmarkEditActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.BookmarksActivity -> org.geometerplus.android.fbreader.BookmarksActivity:
    java.util.List AllBooksBookmarks -> a
    java.util.List myThisBookBookmarks -> b
    java.util.List mySearchResults -> c
    android.widget.ListView myThisBookView -> d
    android.widget.ListView myAllBooksView -> e
    android.widget.ListView mySearchResultsView -> f
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> g
    org.geometerplus.zlibrary.core.options.ZLStringOption myBookmarkSearchPatternOption -> h
    android.widget.ListView createTab(java.lang.String,int) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onPause() -> onPause
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onSearchRequested() -> onSearchRequested
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    void invalidateAllViews() -> a
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void gotoBookmark(org.geometerplus.fbreader.library.Bookmark) -> a
    void access$0(org.geometerplus.android.fbreader.BookmarksActivity,org.geometerplus.fbreader.library.Bookmark) -> a
    void access$1(org.geometerplus.android.fbreader.BookmarksActivity) -> a
org.geometerplus.android.fbreader.BookmarksActivity$BookmarksAdapter -> org.geometerplus.android.fbreader.o:
    java.util.List myBookmarks -> a
    boolean myCurrentBook -> b
    org.geometerplus.android.fbreader.BookmarksActivity this$0 -> c
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    boolean areAllItemsEnabled() -> areAllItemsEnabled
    boolean isEnabled(int) -> isEnabled
    long getItemId(int) -> getItemId
    org.geometerplus.fbreader.library.Bookmark getItem(int) -> a
    int getCount() -> getCount
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.CancelActivity -> org.geometerplus.android.fbreader.CancelActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.CancelActivity$ActionListAdapter -> org.geometerplus.android.fbreader.r:
    android.content.Intent myIntent -> a
    org.geometerplus.android.fbreader.CancelActivity this$0 -> b
    int getCount() -> getCount
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.ControlButtonPanel -> org.geometerplus.android.fbreader.aa:
    org.geometerplus.fbreader.fbreader.FBReaderApp Reader -> a
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor StartPosition -> b
    org.geometerplus.android.fbreader.FBReader myActivity -> c
    boolean myVisible -> e
    org.geometerplus.android.fbreader.ControlPanel myControlPanel -> d
    void hide() -> a
    void updateStates() -> b
    boolean hasControlPanel() -> c
    void removeControlPanels(org.geometerplus.zlibrary.core.application.ZLApplication) -> a
    void restoreVisibilities(org.geometerplus.zlibrary.core.application.ZLApplication) -> b
    void saveVisibilities(org.geometerplus.zlibrary.core.application.ZLApplication) -> c
    void hideAllPendingNotify(org.geometerplus.zlibrary.core.application.ZLApplication) -> d
    boolean getVisibility() -> d
    void show(boolean) -> a
    void initPosition() -> e
    void storePosition() -> f
    void hide(boolean) -> b
    void onShow() -> g
    void onHide() -> h
org.geometerplus.android.fbreader.ControlPanel -> org.geometerplus.android.fbreader.ag:
    android.os.Handler myVisibilityHandler -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void show(boolean) -> a
    void hide(boolean) -> b
    void addView(android.view.View) -> addView
    void access$0(org.geometerplus.android.fbreader.ControlPanel,int,float,float) -> a
org.geometerplus.android.fbreader.ControlPanel$1 -> org.geometerplus.android.fbreader.ac:
    org.geometerplus.android.fbreader.ControlPanel this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.CoverAbsSpinner -> org.geometerplus.android.fbreader.CoverAbsSpinner:
    android.widget.SpinnerAdapter mAdapter -> a
    int mHeightMeasureSpec -> b
    int mWidthMeasureSpec -> c
    boolean mBlockLayoutRequests -> d
    int mSelectionLeftPadding -> x
    int mSelectionTopPadding -> y
    int mSelectionRightPadding -> z
    int mSelectionBottomPadding -> A
    android.graphics.Rect mSpinnerPadding -> e
    android.view.View mSelectedView -> B
    org.geometerplus.android.fbreader.CoverAbsSpinner$RecycleBin mRecycler -> f
    android.database.DataSetObserver mDataSetObserver -> C
    android.graphics.Rect mTouchFrame -> D
    void setAdapter(android.widget.SpinnerAdapter) -> a
    void resetList() -> d
    void onMeasure(int,int) -> onMeasure
    int getChildHeight(android.view.View) -> a
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    void handleDataChanged() -> e
    void layout$2563266() -> c
    android.view.View getSelectedView() -> f
    void requestLayout() -> requestLayout
    int pointToPosition(int,int) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.widget.Adapter getAdapter() -> g
    void access$2$7ad26bce(org.geometerplus.android.fbreader.CoverAbsSpinner,android.view.View) -> a
org.geometerplus.android.fbreader.CoverAbsSpinner$RecycleBin -> org.geometerplus.android.fbreader.m:
    android.util.SparseArray mScrapHeap -> a
    org.geometerplus.android.fbreader.CoverAbsSpinner this$0 -> b
    void put(int,android.view.View) -> a
    android.view.View get(int) -> a
    void clear() -> a
org.geometerplus.android.fbreader.CoverAbsSpinner$SavedState -> org.geometerplus.android.fbreader.CoverAbsSpinner$SavedState:
    long selectedId -> a
    int position -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
org.geometerplus.android.fbreader.CoverAbsSpinner$SavedState$1 -> org.geometerplus.android.fbreader.w:
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
org.geometerplus.android.fbreader.CoverAdapterView -> org.geometerplus.android.fbreader.CoverAdapterView:
    int mFirstPosition -> g
    int mSpecificTop -> a
    int mSyncPosition -> h
    long mSyncRowId -> i
    long mSyncHeight -> b
    boolean mNeedSync -> j
    int mSyncMode -> k
    int mLayoutHeight -> c
    boolean mInLayout -> l
    org.geometerplus.android.fbreader.CoverAdapterView$OnItemSelectedListener mOnItemSelectedListener -> d
    org.geometerplus.android.fbreader.CoverAdapterView$OnItemClickListener mOnItemClickListener -> m
    org.geometerplus.android.fbreader.CoverAdapterView$OnItemLongClickListener mOnItemLongClickListener -> n
    boolean mDataChanged -> o
    int mNextSelectedPosition -> p
    long mNextSelectedRowId -> q
    int mSelectedPosition -> r
    long mSelectedRowId -> s
    android.view.View mEmptyView -> e
    int mItemCount -> t
    int mOldItemCount -> u
    int mOldSelectedPosition -> v
    long mOldSelectedRowId -> w
    boolean mDesiredFocusableState -> f
    boolean mDesiredFocusableInTouchModeState -> x
    org.geometerplus.android.fbreader.CoverAdapterView$SelectionNotifier mSelectionNotifier -> y
    boolean mBlockLayoutRequests -> z
    boolean performItemClick$17e13fde(int) -> c
    android.widget.Adapter getAdapter() -> g
    void addView(android.view.View) -> addView
    void addView(android.view.View,int) -> addView
    void addView(android.view.View,android.view.ViewGroup$LayoutParams) -> addView
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    void removeView(android.view.View) -> removeView
    void removeViewAt(int) -> removeViewAt
    void removeAllViews() -> removeAllViews
    void onLayout(boolean,int,int,int,int) -> onLayout
    android.view.View getSelectedView() -> f
    int getPositionForView(android.view.View) -> b
    void setFocusable(boolean) -> setFocusable
    void setFocusableInTouchMode(boolean) -> setFocusableInTouchMode
    void checkFocus() -> h
    long getItemIdAtPosition(int) -> d
    void setOnClickListener(android.view.View$OnClickListener) -> setOnClickListener
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
    void selectionChanged() -> b
    void fireOnSelected() -> a
    boolean canAnimate() -> canAnimate
    void handleDataChanged() -> e
    void checkSelectionChanged() -> i
    void setSelectedPositionInt(int) -> b
    void setNextSelectedPositionInt(int) -> e
    void rememberSyncState() -> j
    void access$0(org.geometerplus.android.fbreader.CoverAdapterView,android.os.Parcelable) -> a
    android.os.Parcelable access$1(org.geometerplus.android.fbreader.CoverAdapterView) -> a
    void access$2(org.geometerplus.android.fbreader.CoverAdapterView) -> b
org.geometerplus.android.fbreader.CoverAdapterView$AdapterContextMenuInfo -> org.geometerplus.android.fbreader.a:
    android.view.View targetView -> a
    int position -> b
    long id -> c
org.geometerplus.android.fbreader.CoverAdapterView$AdapterDataSetObserver -> org.geometerplus.android.fbreader.k:
    android.os.Parcelable mInstanceState -> a
    org.geometerplus.android.fbreader.CoverAdapterView this$0 -> b
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
org.geometerplus.android.fbreader.CoverAdapterView$OnItemClickListener -> org.geometerplus.android.fbreader.az:
    void onItemClick$70c4986a(int) -> a
org.geometerplus.android.fbreader.CoverAdapterView$OnItemLongClickListener -> org.geometerplus.android.fbreader.z:
    boolean onItemLongClick$5c777512() -> a
org.geometerplus.android.fbreader.CoverAdapterView$OnItemSelectedListener -> org.geometerplus.android.fbreader.s:
org.geometerplus.android.fbreader.CoverAdapterView$SelectionNotifier -> org.geometerplus.android.fbreader.u:
    org.geometerplus.android.fbreader.CoverAdapterView this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.CoverFlow -> org.geometerplus.android.fbreader.CoverFlow:
    int mSpacing -> x
    int mAnimationDuration -> y
    float mUnselectedAlpha -> z
    int mLeftMost -> A
    int mRightMost -> B
    int mGravity -> C
    android.view.GestureDetector mGestureDetector -> D
    int mDownTouchPosition -> E
    android.view.View mDownTouchView -> F
    org.geometerplus.android.fbreader.CoverFlow$FlingRunnable mFlingRunnable -> G
    java.lang.Runnable mDisableSuppressSelectionChangedRunnable -> H
    boolean mShouldStopFling -> I
    android.view.View mSelectedChild -> J
    boolean mShouldCallbackDuringFling -> K
    boolean mShouldCallbackOnUnselectedItemClick -> L
    boolean mSuppressSelectionChanged -> M
    boolean mReceivedInvokeKeyDown -> N
    org.geometerplus.android.fbreader.CoverAdapterView$AdapterContextMenuInfo mContextMenuInfo -> O
    boolean mIsFirstScroll -> P
    android.graphics.Camera mCamera -> Q
    int mMaxRotationAngle -> R
    int mMaxZoom -> S
    android.content.Context mContext -> T
    void setSpacing$13462e() -> a
    boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation) -> getChildStaticTransformation
    int computeHorizontalScrollExtent() -> computeHorizontalScrollExtent
    int computeHorizontalScrollOffset() -> computeHorizontalScrollOffset
    int computeHorizontalScrollRange() -> computeHorizontalScrollRange
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    void onLayout(boolean,int,int,int,int) -> onLayout
    int getChildHeight(android.view.View) -> a
    void trackMotionScroll(int) -> a
    int getCenterOfGallery() -> k
    int getCenterOfView(android.view.View) -> c
    void scrollIntoSlots() -> l
    void onFinishedMovement() -> m
    void selectionChanged() -> b
    void layout$2563266() -> c
    void fillToGalleryLeft() -> n
    void fillToGalleryRight() -> o
    void transformImageBitmap(android.widget.ImageView,int,boolean,int) -> a
    android.view.View makeAndAddView(int,int,int,boolean) -> a
    void setUpChild(android.view.View,int,int,boolean) -> a
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onSingleTapUp(android.view.MotionEvent) -> onSingleTapUp
    boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onFling
    boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float) -> onScroll
    boolean onDown(android.view.MotionEvent) -> onDown
    void onUp() -> p
    void onLongPress(android.view.MotionEvent) -> onLongPress
    void onShowPress(android.view.MotionEvent) -> onShowPress
    void dispatchUnpress() -> q
    void dispatchSetSelected(boolean) -> dispatchSetSelected
    void dispatchSetPressed(boolean) -> dispatchSetPressed
    android.view.ContextMenu$ContextMenuInfo getContextMenuInfo() -> getContextMenuInfo
    boolean showContextMenuForChild(android.view.View) -> showContextMenuForChild
    boolean showContextMenu() -> showContextMenu
    boolean dispatchLongPress(android.view.View,int,long) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean scrollToChild(int) -> f
    void setSelectedPositionInt(int) -> b
    void updateSelectedItemMetadata() -> r
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    void onFocusChanged(boolean,int,android.graphics.Rect) -> onFocusChanged
    void access$0$36c412ef(org.geometerplus.android.fbreader.CoverFlow) -> a
    int access$1(org.geometerplus.android.fbreader.CoverFlow) -> b
    void access$2(org.geometerplus.android.fbreader.CoverFlow) -> c
    void access$3$36c412ef(org.geometerplus.android.fbreader.CoverFlow) -> d
    void access$4(org.geometerplus.android.fbreader.CoverFlow,int) -> a
    boolean access$5(org.geometerplus.android.fbreader.CoverFlow) -> e
    void access$6(org.geometerplus.android.fbreader.CoverFlow) -> f
org.geometerplus.android.fbreader.CoverFlow$1 -> org.geometerplus.android.fbreader.x:
    org.geometerplus.android.fbreader.CoverFlow this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.CoverFlow$2 -> org.geometerplus.android.fbreader.y:
    org.geometerplus.android.fbreader.CoverFlow this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.CoverFlow$FlingRunnable -> org.geometerplus.android.fbreader.au:
    android.widget.Scroller mScroller -> a
    int mLastFlingX -> b
    org.geometerplus.android.fbreader.CoverFlow this$0 -> c
    void startCommon() -> b
    void startUsingVelocity(int) -> a
    void startUsingDistance(int) -> b
    void stop$1385ff() -> a
    void endFling(boolean) -> a
    void run() -> run
    void access$0$520335fc(org.geometerplus.android.fbreader.CoverFlow$FlingRunnable) -> a
    android.widget.Scroller access$1(org.geometerplus.android.fbreader.CoverFlow$FlingRunnable) -> b
org.geometerplus.android.fbreader.CoverFlow$LayoutParams -> org.geometerplus.android.fbreader.CoverFlow$LayoutParams:
org.geometerplus.android.fbreader.DictionaryUtil -> org.geometerplus.android.fbreader.at:
    java.util.LinkedHashMap ourDictionaryInfos -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption ourDictionaryOption -> b
    java.util.Map infos() -> c
    java.util.List dictionaryInfos(android.content.Context) -> a
    org.geometerplus.android.fbreader.PackageInfo firstInfo() -> d
    org.geometerplus.zlibrary.core.options.ZLStringOption dictionaryOption() -> a
    org.geometerplus.android.fbreader.PackageInfo getCurrentDictionaryInfo() -> e
    android.content.Intent getDictionaryIntent(java.lang.String) -> a
    android.content.Intent getDictionaryIntent(org.geometerplus.android.fbreader.PackageInfo,java.lang.String) -> a
    void openWordInDictionary(android.app.Activity,org.geometerplus.zlibrary.text.view.ZLTextWordRegion) -> a
    java.util.LinkedHashMap access$0() -> b
    void access$1(android.app.Activity,org.geometerplus.android.fbreader.PackageInfo) -> a
org.geometerplus.android.fbreader.DictionaryUtil$1 -> org.geometerplus.android.fbreader.ai:
    android.app.Activity val$activity -> a
    org.geometerplus.android.fbreader.PackageInfo val$dictionaryInfo -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.DictionaryUtil$InfoReader -> org.geometerplus.android.fbreader.l:
    boolean dontCacheAttributeValues() -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.android.fbreader.FBReader -> org.geometerplus.android.fbreader.FBReader:
    int myFullScreenFlag -> a
    org.geometerplus.android.fbreader.TextSearchButtonPanel ourTextSearchPanel -> b
    org.geometerplus.android.fbreader.NavigationButtonPanel ourNavigatePanel -> c
    org.geometerplus.fbreader.fbreader.FBReaderApp fbReader -> d
    org.geometerplus.zlibrary.core.filesystem.ZLFile fileFromIntent(android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> onCreate
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onOptionsMenuClosed(android.view.Menu) -> onOptionsMenuClosed
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onStart() -> onStart
    void onResume() -> onResume
    void onPause() -> onPause
    void onStop() -> onStop
    boolean onSearchRequested() -> onSearchRequested
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void navigate() -> c
    void addMenuItem(android.view.Menu,java.lang.String,int) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    org.geometerplus.zlibrary.core.application.ZLApplication createApplication(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.android.fbreader.TextSearchButtonPanel access$1() -> d
org.geometerplus.android.fbreader.FBReader$1 -> org.geometerplus.android.fbreader.i:
    org.geometerplus.android.fbreader.FBReader this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.FBReader$2 -> org.geometerplus.android.fbreader.j:
    org.geometerplus.android.fbreader.FBReader this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.FBReader$3 -> org.geometerplus.android.fbreader.g:
    org.geometerplus.android.fbreader.FBReader this$0 -> a
    java.lang.String val$pattern -> b
    android.os.Handler val$successHandler -> c
    android.os.Handler val$failureHandler -> d
    void run() -> run
org.geometerplus.android.fbreader.FBReader$4 -> org.geometerplus.android.fbreader.h:
    org.geometerplus.android.fbreader.FBReader this$0 -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp val$fbreader -> b
    android.app.SearchManager val$manager -> c
    void onCancel() -> onCancel
org.geometerplus.android.fbreader.NavigationButtonPanel -> org.geometerplus.android.fbreader.ax:
    boolean myIsInProgress -> e
    void runNavigation() -> i
    void onShow() -> g
    void updateStates() -> b
    void createControlPanel(org.geometerplus.android.fbreader.FBReader,android.widget.RelativeLayout) -> a
    void setupNavigation(org.geometerplus.android.fbreader.ControlPanel) -> a
    java.lang.String makeProgressText(int,int) -> b
    void access$0(org.geometerplus.android.fbreader.NavigationButtonPanel,boolean) -> a
    java.lang.String access$1(int,int) -> a
org.geometerplus.android.fbreader.NavigationButtonPanel$1 -> org.geometerplus.android.fbreader.ae:
    org.geometerplus.android.fbreader.NavigationButtonPanel this$0 -> a
    android.widget.TextView val$text -> b
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
org.geometerplus.android.fbreader.NavigationButtonPanel$2 -> org.geometerplus.android.fbreader.ad:
    org.geometerplus.android.fbreader.NavigationButtonPanel this$0 -> a
    android.widget.Button val$btnCancel -> b
    android.widget.Button val$btnOk -> c
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.PackageInfo -> org.geometerplus.android.fbreader.ah:
    java.lang.String Id -> a
    java.lang.String PackageName -> b
    java.lang.String ClassName -> c
    java.lang.String Title -> d
    java.lang.String IntentAction -> e
    java.lang.String IntentKey -> f
    java.lang.String IntentDataPattern -> g
org.geometerplus.android.fbreader.ProcessHyperlinkAction -> org.geometerplus.android.fbreader.b:
    org.geometerplus.android.fbreader.FBReader myBaseActivity -> b
    boolean isEnabled() -> a
    void run() -> b
org.geometerplus.android.fbreader.RunActivityAction -> org.geometerplus.android.fbreader.t:
    org.geometerplus.android.fbreader.FBReader myBaseActivity -> b
    java.lang.Class myActivityClass -> c
    void run() -> b
org.geometerplus.android.fbreader.SQLiteBooksDatabase -> org.geometerplus.android.fbreader.am:
    java.lang.String myInstanceId -> a
    android.database.sqlite.SQLiteDatabase myDatabase -> b
    boolean myTagCacheIsInitialized -> c
    java.util.HashMap myIdByTag -> d
    java.util.HashMap myTagById -> e
    android.database.sqlite.SQLiteStatement myUpdateBookInfoStatement -> f
    android.database.sqlite.SQLiteStatement myInsertBookInfoStatement -> g
    android.database.sqlite.SQLiteStatement myDeleteBookAuthorsStatement -> h
    android.database.sqlite.SQLiteStatement myGetAuthorIdStatement -> i
    android.database.sqlite.SQLiteStatement myInsertAuthorStatement -> j
    android.database.sqlite.SQLiteStatement myInsertBookAuthorStatement -> k
    android.database.sqlite.SQLiteStatement myGetTagIdStatement -> l
    android.database.sqlite.SQLiteStatement myCreateTagIdStatement -> m
    android.database.sqlite.SQLiteStatement myDeleteBookTagsStatement -> n
    android.database.sqlite.SQLiteStatement myInsertBookTagStatement -> o
    android.database.sqlite.SQLiteStatement myGetSeriesIdStatement -> p
    android.database.sqlite.SQLiteStatement myInsertSeriesStatement -> q
    android.database.sqlite.SQLiteStatement myInsertBookSeriesStatement -> r
    android.database.sqlite.SQLiteStatement myDeleteBookSeriesStatement -> s
    android.database.sqlite.SQLiteStatement myRemoveFileInfoStatement -> t
    android.database.sqlite.SQLiteStatement myInsertFileInfoStatement -> u
    android.database.sqlite.SQLiteStatement myUpdateFileInfoStatement -> v
    android.database.sqlite.SQLiteStatement mySaveRecentBookStatement -> w
    android.database.sqlite.SQLiteStatement myAddToFavoritesStatement -> x
    android.database.sqlite.SQLiteStatement myRemoveFromFavoritesStatement -> y
    android.database.sqlite.SQLiteStatement myInsertBookmarkStatement -> z
    android.database.sqlite.SQLiteStatement myUpdateBookmarkStatement -> A
    android.database.sqlite.SQLiteStatement myDeleteBookmarkStatement -> B
    android.database.sqlite.SQLiteStatement myStorePositionStatement -> C
    android.database.sqlite.SQLiteStatement myInsertIntoBookListStatement -> D
    android.database.sqlite.SQLiteStatement myDeleteFromBookListStatement -> E
    android.database.sqlite.SQLiteStatement myCheckBookListStatement -> F
    android.database.sqlite.SQLiteStatement myDeleteVisitedHyperlinksStatement -> G
    android.database.sqlite.SQLiteStatement myStoreVisitedHyperlinksStatement -> H
    void executeAsATransaction(java.lang.Runnable) -> a
    org.geometerplus.fbreader.library.Book loadBook(long) -> a
    void reloadBook(org.geometerplus.fbreader.library.Book) -> a
    org.geometerplus.fbreader.library.Book loadBookByFile(long,org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    void initTagCache() -> f
    java.util.Map loadBooks(org.geometerplus.fbreader.library.FileInfoSet) -> a
    void updateBookInfo(long,long,java.lang.String,java.lang.String,java.lang.String) -> b
    long insertBookInfo(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String,java.lang.String,java.lang.String) -> a
    void deleteAllBookAuthors(long) -> e
    void saveBookAuthorInfo(long,long,org.geometerplus.fbreader.library.Author) -> a
    java.util.List loadAuthors(long) -> b
    long getTagId(org.geometerplus.fbreader.library.Tag) -> a
    void deleteAllBookTags(long) -> f
    void saveBookTagInfo(long,org.geometerplus.fbreader.library.Tag) -> a
    org.geometerplus.fbreader.library.Tag getTagById(long) -> q
    java.util.List loadTags(long) -> c
    void saveBookSeriesInfo(long,org.geometerplus.fbreader.library.SeriesInfo) -> a
    org.geometerplus.fbreader.library.SeriesInfo loadSeriesInfo(long) -> d
    void removeFileInfo(long) -> h
    void saveFileInfo(org.geometerplus.fbreader.library.FileInfo) -> a
    java.util.Collection loadFileInfos() -> b
    java.util.Collection loadFileInfos(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.util.Collection loadFileInfos(long) -> g
    void saveRecentBookIds(java.util.List) -> a
    java.util.List loadRecentBookIds() -> c
    void addToFavorites(long) -> i
    void removeFromFavorites(long) -> j
    java.util.List loadFavoritesIds() -> d
    java.util.List loadBookmarks$4d71d71e(long) -> k
    java.util.List loadAllVisibleBookmarks() -> e
    long saveBookmark(org.geometerplus.fbreader.library.Bookmark) -> a
    void deleteBookmark(org.geometerplus.fbreader.library.Bookmark) -> b
    org.geometerplus.zlibrary.text.view.ZLTextPosition getStoredPosition(long) -> l
    void storePosition(long,org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    boolean insertIntoBookList(long) -> m
    boolean deleteFromBookList(long) -> n
    boolean checkBookList(long) -> o
    void addVisitedHyperlink(long,java.lang.String) -> a
    java.util.Collection loadVisitedHyperlinks(long) -> p
    android.database.sqlite.SQLiteDatabase access$0(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> a
    void access$1(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> b
    void access$2(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> c
    void access$3(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> d
    void access$4(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> e
    void access$5(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> f
    void access$6(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> g
    void access$7(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> h
    void access$8(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> i
    void access$9(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> j
    void access$10(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> k
    void access$11(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> l
    void access$12(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> m
    void access$13(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> n
    void access$14(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> o
    void access$15(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> p
    void access$16(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> q
    android.database.sqlite.SQLiteStatement access$17(org.geometerplus.android.fbreader.SQLiteBooksDatabase) -> r
org.geometerplus.android.fbreader.SQLiteBooksDatabase$1 -> org.geometerplus.android.fbreader.ak:
    org.geometerplus.android.fbreader.SQLiteBooksDatabase this$0 -> a
    int val$version -> b
    void run() -> run
org.geometerplus.android.fbreader.SQLiteBooksDatabase$2 -> org.geometerplus.android.fbreader.aj:
    org.geometerplus.android.fbreader.SQLiteBooksDatabase this$0 -> a
    java.util.List val$ids -> b
    void run() -> run
org.geometerplus.android.fbreader.SearchAction -> org.geometerplus.android.fbreader.as:
    org.geometerplus.android.fbreader.FBReader myActivity -> b
    boolean isVisible() -> c
    void run() -> b
org.geometerplus.android.fbreader.ShowBookInfoAction -> org.geometerplus.android.fbreader.p:
    org.geometerplus.android.fbreader.FBReader myBaseActivity -> b
    boolean isVisible() -> c
    void run() -> b
org.geometerplus.android.fbreader.ShowBookmarksAction -> org.geometerplus.android.fbreader.q:
org.geometerplus.android.fbreader.ShowCancelMenuAction -> org.geometerplus.android.fbreader.ao:
    org.geometerplus.android.fbreader.FBReader myBaseActivity -> b
    void run() -> b
org.geometerplus.android.fbreader.ShowLibraryAction -> org.geometerplus.android.fbreader.ar:
    org.geometerplus.android.fbreader.FBReader myBaseActivity -> b
    void run() -> b
org.geometerplus.android.fbreader.ShowMenuAction -> org.geometerplus.android.fbreader.ay:
    org.geometerplus.android.fbreader.FBReader myActivity -> b
    void run() -> b
org.geometerplus.android.fbreader.ShowNavigationAction -> org.geometerplus.android.fbreader.f:
    org.geometerplus.android.fbreader.FBReader myActivity -> b
    boolean isVisible() -> c
    void run() -> b
org.geometerplus.android.fbreader.ShowNetworkLibraryAction -> org.geometerplus.android.fbreader.aq:
org.geometerplus.android.fbreader.ShowPreferencesAction -> org.geometerplus.android.fbreader.n:
    org.geometerplus.android.fbreader.FBReader myBaseActivity -> b
    void run() -> b
org.geometerplus.android.fbreader.ShowTOCAction -> org.geometerplus.android.fbreader.an:
    boolean isVisible() -> c
org.geometerplus.android.fbreader.SimpleContainer -> org.geometerplus.android.fbreader.v:
    android.view.View myEditText -> a
    android.widget.Button myOkButton -> b
    android.widget.Button myCancelButton -> c
    void onLayout(boolean,int,int,int,int) -> onLayout
org.geometerplus.android.fbreader.TOCActivity -> org.geometerplus.android.fbreader.TOCActivity:
    org.geometerplus.android.fbreader.TOCActivity$TOCAdapter myAdapter -> a
    org.geometerplus.zlibrary.core.tree.ZLTree mySelectedItem -> b
    void onCreate(android.os.Bundle) -> onCreate
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    org.geometerplus.zlibrary.core.tree.ZLTree access$0(org.geometerplus.android.fbreader.TOCActivity) -> a
org.geometerplus.android.fbreader.TOCActivity$TOCAdapter -> org.geometerplus.android.fbreader.ab:
    org.geometerplus.android.fbreader.TOCActivity this$0 -> a
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void openBookText(org.geometerplus.fbreader.bookmodel.TOCTree) -> a
    boolean runTreeItem(org.geometerplus.zlibrary.core.tree.ZLTree) -> a
org.geometerplus.android.fbreader.TextSearchButtonPanel -> org.geometerplus.android.fbreader.ap:
    java.util.ArrayList myButtons -> e
    void onHide() -> h
    void createControlPanel(org.geometerplus.android.fbreader.FBReader,android.widget.RelativeLayout) -> a
    void addButton(java.lang.String,boolean,int) -> a
    void updateStates() -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.ZLTreeAdapter -> org.geometerplus.android.fbreader.al:
    android.widget.ListView myParent -> a
    org.geometerplus.zlibrary.core.tree.ZLTree myTree -> b
    org.geometerplus.zlibrary.core.tree.ZLTree[] myItems -> c
    java.util.HashSet myOpenItems -> d
    boolean isOpen(org.geometerplus.zlibrary.core.tree.ZLTree) -> b
    void selectItem(org.geometerplus.zlibrary.core.tree.ZLTree) -> c
    int getCount(org.geometerplus.zlibrary.core.tree.ZLTree) -> d
    int getCount() -> getCount
    int indexByPosition(int,org.geometerplus.zlibrary.core.tree.ZLTree) -> a
    org.geometerplus.zlibrary.core.tree.ZLTree getItem(int) -> a
    boolean areAllItemsEnabled() -> areAllItemsEnabled
    boolean isEnabled(int) -> isEnabled
    long getItemId(int) -> getItemId
    boolean runTreeItem(org.geometerplus.zlibrary.core.tree.ZLTree) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.ebookmain -> org.geometerplus.android.fbreader.ebookmain:
    android.content.Context mContext -> c
    android.widget.ImageView imageView -> a
    android.widget.TextView textview -> b
    java.lang.Integer[] mImageIds -> d
    java.lang.Integer[] mImageIds_main -> e
    android.os.HandlerThread sWorkerThread -> f
    android.os.Handler sWorker -> g
    void onCreate(android.os.Bundle) -> onCreate
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onClick(android.view.View) -> onClick
    java.lang.Integer[] access$0(org.geometerplus.android.fbreader.ebookmain) -> a
    java.lang.Integer[] access$2(org.geometerplus.android.fbreader.ebookmain) -> b
org.geometerplus.android.fbreader.ebookmain$1 -> org.geometerplus.android.fbreader.af:
    org.geometerplus.android.fbreader.ebookmain this$0 -> a
    void onItemClick$70c4986a(int) -> a
org.geometerplus.android.fbreader.ebookmain$ImageAdapter -> org.geometerplus.android.fbreader.aw:
    android.content.Context mContext -> a
    android.widget.ImageView[] mImages -> b
    org.geometerplus.android.fbreader.ebookmain this$0 -> c
    boolean createReflectedImages() -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
org.geometerplus.android.fbreader.image.ImageViewActivity -> org.geometerplus.android.fbreader.image.ImageViewActivity:
    android.graphics.Bitmap myBitmap -> a
    org.geometerplus.zlibrary.core.util.ZLColor myBgColor -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    org.geometerplus.zlibrary.core.util.ZLColor access$0(org.geometerplus.android.fbreader.image.ImageViewActivity) -> a
    android.graphics.Bitmap access$1(org.geometerplus.android.fbreader.image.ImageViewActivity) -> b
org.geometerplus.android.fbreader.image.ImageViewActivity$ImageView -> org.geometerplus.android.fbreader.image.a:
    android.graphics.Paint myPaint -> a
    int myDx -> b
    int myDy -> c
    boolean myMotionControl -> d
    int mySavedX -> e
    int mySavedY -> f
    org.geometerplus.android.fbreader.image.ImageViewActivity this$0 -> g
    void onDraw(android.graphics.Canvas) -> onDraw
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
org.geometerplus.android.fbreader.library.BaseActivity -> org.geometerplus.android.fbreader.library.y:
    org.geometerplus.fbreader.library.BooksDatabase DatabaseInstance -> b
    org.geometerplus.fbreader.library.Library LibraryInstance -> c
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> d
    java.lang.String mySelectedBookPath -> e
    int myCoverWidth -> a
    int myCoverHeight -> f
    java.lang.Runnable myInvalidateViewsRunnable -> g
    void onCreate(android.os.Bundle) -> onCreate
    void createBookContextMenu(android.view.ContextMenu,org.geometerplus.fbreader.library.Book) -> a
    android.view.View createView(android.view.View,android.view.ViewGroup,java.lang.String,java.lang.String) -> a
    android.widget.ImageView getCoverView(android.view.View) -> a
    android.graphics.Bitmap getCoverBitmap(org.geometerplus.zlibrary.core.image.ZLImage) -> a
    void deleteBook(org.geometerplus.fbreader.library.Book,int) -> a
    void showBookInfo(org.geometerplus.fbreader.library.Book) -> a
    boolean onContextItemSelected(int,org.geometerplus.fbreader.library.Book) -> a
org.geometerplus.android.fbreader.library.BaseActivity$1 -> org.geometerplus.android.fbreader.library.r:
    org.geometerplus.android.fbreader.library.BaseActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.library.BaseActivity$BookDeleter -> org.geometerplus.android.fbreader.library.z:
    org.geometerplus.fbreader.library.Book myBook -> a
    int myMode -> b
    org.geometerplus.android.fbreader.library.BaseActivity this$0 -> c
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.library.FileManager -> org.geometerplus.android.fbreader.library.FileManager:
    java.lang.String FILE_MANAGER_PATH -> a
    java.lang.String myPath -> f
    void onCreate(android.os.Bundle) -> onCreate
    void startUpdate() -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void deleteBook(org.geometerplus.fbreader.library.Book,int) -> a
    void addItem(java.lang.String,java.lang.String) -> a
    boolean access$0(org.geometerplus.android.fbreader.library.FileManager,org.geometerplus.android.fbreader.library.FileManager$FileItem) -> a
    void access$1(org.geometerplus.android.fbreader.library.FileManager,org.geometerplus.android.fbreader.library.FileManager$FileItem) -> b
org.geometerplus.android.fbreader.library.FileManager$1 -> org.geometerplus.android.fbreader.library.n:
    org.geometerplus.android.fbreader.library.FileManager this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
org.geometerplus.android.fbreader.library.FileManager$FileComparator -> org.geometerplus.android.fbreader.library.g:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.android.fbreader.library.FileManager$FileItem -> org.geometerplus.android.fbreader.library.l:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> a
    java.lang.String myName -> b
    java.lang.String mySummary -> c
    boolean myIsSelectable -> d
    org.geometerplus.zlibrary.core.image.ZLImage myCover -> e
    boolean myCoverIsInitialized -> f
    org.geometerplus.android.fbreader.library.FileManager this$0 -> g
    java.lang.String getName() -> a
    java.lang.String getSummary() -> b
    boolean isSelectable() -> c
    int getIcon() -> d
    org.geometerplus.zlibrary.core.image.ZLImage getCover() -> e
    org.geometerplus.zlibrary.core.filesystem.ZLFile getFile() -> f
    org.geometerplus.fbreader.library.Book getBook() -> g
org.geometerplus.android.fbreader.library.FileManager$FileListAdapter -> org.geometerplus.android.fbreader.library.k:
    java.util.List myItems -> a
    org.geometerplus.android.fbreader.library.FileManager this$0 -> b
    void clear() -> a
    void add(org.geometerplus.android.fbreader.library.FileManager$FileItem) -> a
    void deleteFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    int getCount() -> getCount
    org.geometerplus.android.fbreader.library.FileManager$FileItem getItem(int) -> a
    long getItemId(int) -> getItemId
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.library.FileManager$SmartFilter -> org.geometerplus.android.fbreader.library.aa:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> b
    org.geometerplus.android.fbreader.library.FileManager this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.library.FileManager$SmartFilter$1 -> org.geometerplus.android.fbreader.library.h:
    org.geometerplus.android.fbreader.library.FileManager$SmartFilter this$1 -> a
    void run() -> run
org.geometerplus.android.fbreader.library.FileManager$SmartFilter$2 -> org.geometerplus.android.fbreader.library.j:
    org.geometerplus.android.fbreader.library.FileManager$SmartFilter this$1 -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile val$file -> b
    void run() -> run
org.geometerplus.android.fbreader.library.InitializationService -> org.geometerplus.android.fbreader.library.InitializationService:
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onStart(android.content.Intent,int) -> onStart
    int onStartCommand(android.content.Intent,int,int) -> onStartCommand
org.geometerplus.android.fbreader.library.InitializationService$1 -> org.geometerplus.android.fbreader.library.t:
    org.geometerplus.android.fbreader.library.InitializationService this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.library.InitializationService$2 -> org.geometerplus.android.fbreader.library.u:
    org.geometerplus.android.fbreader.library.InitializationService this$0 -> a
    android.os.Handler val$handler -> b
    void run() -> run
org.geometerplus.android.fbreader.library.KillerCallback -> org.geometerplus.android.fbreader.library.KillerCallback:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.geometerplus.android.fbreader.library.LibraryBaseActivity -> org.geometerplus.android.fbreader.library.b:
    org.geometerplus.zlibrary.core.options.ZLStringOption BookSearchPatternOption -> f
    org.geometerplus.fbreader.library.Book mySelectedBook -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    boolean onSearchRequested() -> onSearchRequested
    boolean runSearch(android.content.Intent) -> a
    void showNotFoundToast() -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void deleteBook(org.geometerplus.fbreader.library.Book,int) -> a
    boolean isTreeSelected(org.geometerplus.fbreader.tree.FBTree) -> a
org.geometerplus.android.fbreader.library.LibraryBaseActivity$LibraryAdapter -> org.geometerplus.android.fbreader.library.d:
    java.util.List myItems -> a
    org.geometerplus.android.fbreader.library.LibraryBaseActivity this$0 -> b
    int getCount() -> getCount
    int getFirstSelectedItemIndex() -> a
    org.geometerplus.fbreader.tree.FBTree getItem(int) -> a
    long getItemId(int) -> getItemId
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.library.LibraryBaseActivity$OpenTreeRunnable -> org.geometerplus.android.fbreader.library.c:
    org.geometerplus.fbreader.library.Library myLibrary -> a
    java.lang.Runnable myPostRunnable -> b
    org.geometerplus.android.fbreader.library.LibraryBaseActivity this$0 -> c
    void run() -> run
    org.geometerplus.fbreader.library.Library access$0(org.geometerplus.android.fbreader.library.LibraryBaseActivity$OpenTreeRunnable) -> a
org.geometerplus.android.fbreader.library.LibraryBaseActivity$OpenTreeRunnable$1 -> org.geometerplus.android.fbreader.library.x:
    org.geometerplus.android.fbreader.library.LibraryBaseActivity$OpenTreeRunnable this$1 -> a
    void run() -> run
org.geometerplus.android.fbreader.library.LibraryBaseActivity$StartTreeActivityRunnable -> org.geometerplus.android.fbreader.library.i:
    java.lang.String myTreePath -> a
    java.lang.String myParameter -> b
    org.geometerplus.android.fbreader.library.LibraryBaseActivity this$0 -> c
    void run() -> run
org.geometerplus.android.fbreader.library.LibraryFavoritesActivity -> org.geometerplus.android.fbreader.library.LibraryFavoritesActivity:
    java.util.LinkedList myItems -> f
    org.geometerplus.android.fbreader.library.TopLevelTreefavorites mySearchResultsItem -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    void setSearchResults(android.content.Intent) -> b
    void onNewIntent(android.content.Intent) -> onNewIntent
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    boolean onSearchRequested() -> onSearchRequested
org.geometerplus.android.fbreader.library.LibraryFavoritesActivity$1 -> org.geometerplus.android.fbreader.library.p:
    org.geometerplus.android.fbreader.library.LibraryFavoritesActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.library.LibraryRecentActivity -> org.geometerplus.android.fbreader.library.LibraryRecentActivity:
    java.util.LinkedList myItems -> f
    org.geometerplus.android.fbreader.library.TopLevelTreeRecent mySearchResultsItem -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    void setSearchResults(android.content.Intent) -> b
    void onNewIntent(android.content.Intent) -> onNewIntent
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    boolean onSearchRequested() -> onSearchRequested
org.geometerplus.android.fbreader.library.LibraryTopLevelActivity -> org.geometerplus.android.fbreader.library.LibraryTopLevelActivity:
    java.util.LinkedList myItems -> f
    org.geometerplus.android.fbreader.library.TopLevelTree mySearchResultsItem -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    void setSearchResults(android.content.Intent) -> b
    void onNewIntent(android.content.Intent) -> onNewIntent
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    boolean onSearchRequested() -> onSearchRequested
org.geometerplus.android.fbreader.library.LibraryTopLevelActivity$1 -> org.geometerplus.android.fbreader.library.e:
    org.geometerplus.android.fbreader.library.LibraryTopLevelActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.library.LibraryTopLevelActivity$2 -> org.geometerplus.android.fbreader.library.f:
    org.geometerplus.android.fbreader.library.LibraryTopLevelActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.library.LibraryTreeActivity -> org.geometerplus.android.fbreader.library.LibraryTreeActivity:
    java.lang.String myTreePathString -> f
    void onCreate(android.os.Bundle) -> onCreate
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    boolean onSearchRequested() -> onSearchRequested
org.geometerplus.android.fbreader.library.LibrarybyauthorActivity -> org.geometerplus.android.fbreader.library.LibrarybyauthorActivity:
    java.util.LinkedList myItems -> f
    org.geometerplus.android.fbreader.library.TopLevelTreebyauthor mySearchResultsItem -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    void setSearchResults(android.content.Intent) -> b
    void onNewIntent(android.content.Intent) -> onNewIntent
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    boolean onSearchRequested() -> onSearchRequested
org.geometerplus.android.fbreader.library.LibrarybytagActivity -> org.geometerplus.android.fbreader.library.LibrarybytagActivity:
    java.util.LinkedList myItems -> f
    org.geometerplus.android.fbreader.library.TopLevelTreebytag mySearchResultsItem -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    void setSearchResults(android.content.Intent) -> b
    void onNewIntent(android.content.Intent) -> onNewIntent
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    boolean onSearchRequested() -> onSearchRequested
org.geometerplus.android.fbreader.library.LibrarybytitleActivity -> org.geometerplus.android.fbreader.library.LibrarybytitleActivity:
    java.util.LinkedList myItems -> f
    org.geometerplus.android.fbreader.library.TopLevelTreebytitle mySearchResultsItem -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    void setSearchResults(android.content.Intent) -> b
    void onNewIntent(android.content.Intent) -> onNewIntent
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    boolean onSearchRequested() -> onSearchRequested
org.geometerplus.android.fbreader.library.LibraryfiletreeActivity -> org.geometerplus.android.fbreader.library.LibraryfiletreeActivity:
    java.util.LinkedList myItems -> f
    org.geometerplus.android.fbreader.library.TopLevelTreefiletree mySearchResultsItem -> g
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    void setSearchResults(android.content.Intent) -> b
    void onNewIntent(android.content.Intent) -> onNewIntent
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    boolean onSearchRequested() -> onSearchRequested
org.geometerplus.android.fbreader.library.LibraryfiletreeActivity$1 -> org.geometerplus.android.fbreader.library.s:
    org.geometerplus.android.fbreader.library.LibraryfiletreeActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.library.TopLevelTree -> org.geometerplus.android.fbreader.library.m:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    java.lang.String myParameter -> d
    int myCoverResourceId -> e
    java.lang.Runnable myAction -> f
    java.lang.String getName() -> a
    java.lang.String getSummary() -> c
    int getCoverResourceId() -> a_
    void run() -> e
org.geometerplus.android.fbreader.library.TopLevelTreeRecent -> org.geometerplus.android.fbreader.library.v:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    java.lang.String myParameter -> d
    int myCoverResourceId -> e
    java.lang.Runnable myAction -> f
    java.lang.String getName() -> a
    java.lang.String getSummary() -> c
    int getCoverResourceId() -> a_
    void run() -> e
org.geometerplus.android.fbreader.library.TopLevelTreebyauthor -> org.geometerplus.android.fbreader.library.ab:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    java.lang.String myParameter -> d
    int myCoverResourceId -> e
    java.lang.Runnable myAction -> f
    java.lang.String getName() -> a
    java.lang.String getSummary() -> c
    int getCoverResourceId() -> a_
    void run() -> e
org.geometerplus.android.fbreader.library.TopLevelTreebytag -> org.geometerplus.android.fbreader.library.a:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    java.lang.String myParameter -> d
    int myCoverResourceId -> e
    java.lang.Runnable myAction -> f
    java.lang.String getName() -> a
    java.lang.String getSummary() -> c
    int getCoverResourceId() -> a_
    void run() -> e
org.geometerplus.android.fbreader.library.TopLevelTreebytitle -> org.geometerplus.android.fbreader.library.w:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    java.lang.String myParameter -> d
    int myCoverResourceId -> e
    java.lang.Runnable myAction -> f
    java.lang.String getName() -> a
    java.lang.String getSummary() -> c
    int getCoverResourceId() -> a_
    void run() -> e
org.geometerplus.android.fbreader.library.TopLevelTreefavorites -> org.geometerplus.android.fbreader.library.o:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    java.lang.String myParameter -> d
    int myCoverResourceId -> e
    java.lang.Runnable myAction -> f
    java.lang.String getName() -> a
    java.lang.String getSummary() -> c
    int getCoverResourceId() -> a_
    void run() -> e
org.geometerplus.android.fbreader.library.TopLevelTreefiletree -> org.geometerplus.android.fbreader.library.q:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    java.lang.String myParameter -> d
    int myCoverResourceId -> e
    java.lang.Runnable myAction -> f
    java.lang.String getName() -> a
    java.lang.String getSummary() -> c
    int getCoverResourceId() -> a_
    void run() -> e
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity -> org.geometerplus.android.fbreader.network.AddCustomCatalogActivity:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    org.geometerplus.fbreader.network.ICustomNetworkLink myLink -> b
    void onCreate(android.os.Bundle) -> onCreate
    boolean isEmptyString(java.lang.String) -> a
    void setExtraFieldsVisibility(boolean) -> a
    void setTextById(int,java.lang.String) -> a
    java.lang.String getTextById(int) -> a
    void setupButton(int,java.lang.String,android.view.View$OnClickListener) -> a
    void setTextFromResource(int,java.lang.String) -> b
    void setErrorText(java.lang.String) -> b
    void setErrorByKey(java.lang.String) -> c
    void loadInfoByUri(android.net.Uri) -> a
    void access$0(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity) -> a
    void access$1$53eca9db(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity) -> b
    org.geometerplus.fbreader.network.ICustomNetworkLink access$2(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity) -> c
    void access$3(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity,int,java.lang.String) -> a
    void access$5$14d781ef(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity) -> d
    void access$6(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity,java.lang.String) -> a
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$1 -> org.geometerplus.android.fbreader.network.r:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$2 -> org.geometerplus.android.fbreader.network.q:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$3 -> org.geometerplus.android.fbreader.network.p:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    int val$visibility -> b
    void run() -> run
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$4 -> org.geometerplus.android.fbreader.network.o:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    java.lang.String val$errorText -> b
    void run() -> run
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$5 -> org.geometerplus.android.fbreader.network.n:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$6 -> org.geometerplus.android.fbreader.network.m:
    java.lang.String myError -> b
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity this$0 -> a
    void run() -> run
    java.lang.String access$0(org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$6) -> a
org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$6$1 -> org.geometerplus.android.fbreader.network.k:
    org.geometerplus.android.fbreader.network.AddCustomCatalogActivity$6 this$1 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.AddCustomCatalogItemActions -> org.geometerplus.android.fbreader.network.u:
    boolean canHandleTree(org.geometerplus.fbreader.network.NetworkTree) -> a
    void buildContextMenu(android.app.Activity,android.view.ContextMenu,org.geometerplus.fbreader.network.NetworkTree) -> a
    int getDefaultActionCode(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree) -> a
    java.lang.String getConfirmText$513542e4(int) -> a
    boolean createOptionsMenu(android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean prepareOptionsMenu(org.geometerplus.android.fbreader.network.NetworkBaseActivity,android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean runAction(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree,int) -> a
    void addCustomCatalog(android.app.Activity) -> a
org.geometerplus.android.fbreader.network.AuthenticationActivity -> org.geometerplus.android.fbreader.network.AuthenticationActivity:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    void onCreate(android.os.Bundle) -> onCreate
    android.widget.TextView findTextView(int) -> a
    android.widget.Button findButton(int) -> b
    android.widget.TextView access$0$269e4d39(org.geometerplus.android.fbreader.network.AuthenticationActivity) -> a
org.geometerplus.android.fbreader.network.AuthenticationActivity$1 -> org.geometerplus.android.fbreader.network.w:
    org.geometerplus.android.fbreader.network.AuthenticationActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.AuthenticationActivity$2 -> org.geometerplus.android.fbreader.network.y:
    org.geometerplus.android.fbreader.network.AuthenticationActivity this$0 -> a
    android.widget.TextView val$usernameView -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.AuthenticationActivity$3 -> org.geometerplus.android.fbreader.network.x:
    org.geometerplus.android.fbreader.network.AuthenticationActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.BookDownloader -> org.geometerplus.android.fbreader.network.BookDownloader:
    boolean acceptsUri(android.net.Uri) -> a
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.network.BookDownloaderCallback -> org.geometerplus.android.fbreader.network.BookDownloaderCallback:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.geometerplus.android.fbreader.network.BookDownloaderInterface -> org.geometerplus.android.fbreader.network.ar:
    boolean isBeingDownloaded(java.lang.String) -> a
org.geometerplus.android.fbreader.network.BookDownloaderInterface$Stub -> org.geometerplus.android.fbreader.network.ce:
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
org.geometerplus.android.fbreader.network.BookDownloaderInterface$Stub$Proxy -> org.geometerplus.android.fbreader.network.aq:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    boolean isBeingDownloaded(java.lang.String) -> a
org.geometerplus.android.fbreader.network.BookDownloaderService -> org.geometerplus.android.fbreader.network.BookDownloaderService:
    java.util.Set myDownloadingURLs -> a
    java.util.Set myOngoingNotifications -> b
    int myServiceCounter -> c
    void doStop() -> a
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onDestroy() -> onDestroy
    void onStart(android.content.Intent,int) -> onStart
    void showMessage(java.lang.String) -> a
    void showMessage(java.lang.String,java.lang.String) -> a
    android.content.Intent getFBReaderIntent(java.io.File) -> a
    void sendDownloaderCallback() -> b
    java.util.Set access$0(org.geometerplus.android.fbreader.network.BookDownloaderService) -> a
    java.util.Set access$1(org.geometerplus.android.fbreader.network.BookDownloaderService) -> b
    android.app.Notification access$2(org.geometerplus.android.fbreader.network.BookDownloaderService,java.io.File,java.lang.String,boolean) -> a
    void access$3(org.geometerplus.android.fbreader.network.BookDownloaderService) -> c
    void access$4(org.geometerplus.android.fbreader.network.BookDownloaderService) -> d
org.geometerplus.android.fbreader.network.BookDownloaderService$1 -> org.geometerplus.android.fbreader.network.b:
    org.geometerplus.android.fbreader.network.BookDownloaderService this$0 -> a
    boolean isBeingDownloaded(java.lang.String) -> a
org.geometerplus.android.fbreader.network.BookDownloaderService$2 -> org.geometerplus.android.fbreader.network.c:
    org.geometerplus.android.fbreader.network.BookDownloaderService this$0 -> a
    android.app.Notification val$progressNotification -> b
    int val$notificationId -> c
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.BookDownloaderService$3 -> org.geometerplus.android.fbreader.network.d:
    org.geometerplus.android.fbreader.network.BookDownloaderService this$0 -> a
    java.lang.String val$urlString -> b
    int val$notificationId -> c
    java.io.File val$file -> d
    java.lang.String val$title -> e
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.BookDownloaderService$4 -> org.geometerplus.android.fbreader.network.e:
    org.geometerplus.android.fbreader.network.BookDownloaderService this$0 -> a
    android.os.Handler val$progressHandler -> e
    java.io.File val$file -> f
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.android.fbreader.network.BookDownloaderService$5 -> org.geometerplus.android.fbreader.network.f:
    org.geometerplus.android.fbreader.network.BookDownloaderService this$0 -> a
    android.os.Handler val$downloadFinishHandler -> b
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest val$request -> c
    java.io.File val$file -> d
    void run() -> run
org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection -> org.geometerplus.android.fbreader.network.bs:
    org.geometerplus.android.fbreader.network.BookDownloaderInterface myInterface -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
    boolean isBeingDownloaded(java.lang.String) -> a
org.geometerplus.android.fbreader.network.ItemsLoader -> org.geometerplus.android.fbreader.network.as:
    android.app.Activity myActivity -> a
    java.util.LinkedList myItems -> b
    java.util.HashMap myUncommitedItems -> c
    java.lang.Object myItemsMonitor -> d
    boolean myFinishProcessed -> e
    java.lang.Object myFinishMonitor -> f
    long myUpdateInterval -> g
    boolean myInterruptRequested -> h
    boolean myInterruptConfirmed -> i
    java.lang.Object myInterruptLock -> j
    boolean myFinished -> k
    java.lang.Runnable myFinishRunnable -> l
    java.lang.Object myFinishedLock -> m
    void interruptLoading() -> b
    boolean confirmInterruptLoading() -> e
    boolean tryResumeLoading() -> c
    boolean isLoadingInterrupted() -> f
    void run() -> run
    void runFinishHandler() -> d
    void runOnFinish(java.lang.Runnable) -> a
    void updateItemsOnUiThread() -> g
    void finishOnUiThread(java.lang.String,boolean) -> a
    void onFinish(java.lang.String,boolean,java.util.Set) -> a
    void updateItems(java.util.List) -> a
    void doBefore() -> a
    void doLoading(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
    void access$0(org.geometerplus.android.fbreader.network.ItemsLoader,org.geometerplus.fbreader.network.INetworkLink,org.geometerplus.fbreader.network.NetworkItem) -> a
    void access$1(org.geometerplus.android.fbreader.network.ItemsLoader) -> a
    long access$2(org.geometerplus.android.fbreader.network.ItemsLoader) -> b
    boolean access$3(org.geometerplus.android.fbreader.network.ItemsLoader) -> c
    void access$4(org.geometerplus.android.fbreader.network.ItemsLoader,org.geometerplus.fbreader.network.INetworkLink) -> a
    java.lang.Object access$5(org.geometerplus.android.fbreader.network.ItemsLoader) -> d
    java.util.LinkedList access$6(org.geometerplus.android.fbreader.network.ItemsLoader) -> e
    java.util.HashMap access$7(org.geometerplus.android.fbreader.network.ItemsLoader) -> f
    java.lang.Object access$8(org.geometerplus.android.fbreader.network.ItemsLoader) -> g
    void access$9$71c55904(org.geometerplus.android.fbreader.network.ItemsLoader) -> h
org.geometerplus.android.fbreader.network.ItemsLoader$1 -> org.geometerplus.android.fbreader.network.j:
    long myUpdateTime -> a
    int myItemsNumber -> b
    org.geometerplus.android.fbreader.network.ItemsLoader this$0 -> c
    void onNewItem(org.geometerplus.fbreader.network.INetworkLink,org.geometerplus.fbreader.network.NetworkItem) -> a
    boolean confirmInterrupt() -> a
    void commitItems(org.geometerplus.fbreader.network.INetworkLink) -> a
org.geometerplus.android.fbreader.network.ItemsLoader$2 -> org.geometerplus.android.fbreader.network.g:
    org.geometerplus.android.fbreader.network.ItemsLoader this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.ItemsLoader$3 -> org.geometerplus.android.fbreader.network.i:
    org.geometerplus.android.fbreader.network.ItemsLoader this$0 -> a
    java.lang.String val$errorMessage -> b
    boolean val$interrupted -> c
    void run() -> run
org.geometerplus.android.fbreader.network.ItemsLoadingService -> org.geometerplus.android.fbreader.network.ItemsLoadingService:
    int myServiceCounter -> a
    void start(android.content.Context,org.geometerplus.fbreader.network.NetworkTree,org.geometerplus.android.fbreader.network.ItemsLoader) -> a
    org.geometerplus.android.fbreader.network.ItemsLoader getRunnable(org.geometerplus.fbreader.network.NetworkTree) -> a
    void doStop() -> a
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onStart(android.content.Intent,int) -> onStart
    void access$0(org.geometerplus.android.fbreader.network.ItemsLoadingService) -> a
org.geometerplus.android.fbreader.network.ItemsLoadingService$1 -> org.geometerplus.android.fbreader.network.ay:
    org.geometerplus.android.fbreader.network.ItemsLoadingService this$0 -> a
    org.geometerplus.fbreader.network.NetworkTree val$tree -> b
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.ItemsLoadingService$2 -> org.geometerplus.android.fbreader.network.au:
    org.geometerplus.android.fbreader.network.ItemsLoadingService this$0 -> a
    android.os.Handler val$finishHandler -> b
    org.geometerplus.android.fbreader.network.ItemsLoader val$runnable -> c
    void run() -> run
org.geometerplus.android.fbreader.network.LibraryInitializationService -> org.geometerplus.android.fbreader.network.LibraryInitializationService:
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onStart(android.content.Intent,int) -> onStart
org.geometerplus.android.fbreader.network.LibraryInitializationService$1 -> org.geometerplus.android.fbreader.network.ae:
    org.geometerplus.android.fbreader.network.LibraryInitializationService this$0 -> a
    org.geometerplus.android.fbreader.network.NetworkView val$view -> b
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.LibraryInitializationService$2 -> org.geometerplus.android.fbreader.network.af:
    org.geometerplus.android.fbreader.network.LibraryInitializationService this$0 -> a
    android.os.Handler val$handler -> b
    org.geometerplus.android.fbreader.network.NetworkView val$view -> c
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBaseActivity -> org.geometerplus.android.fbreader.network.cd:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection Connection -> b
    java.lang.Runnable myInvalidateViewsRunnable -> c
    int myCoverWidth -> d
    int myCoverHeight -> e
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void onResume() -> onResume
    void onStop() -> onStop
    void onDestroy() -> onDestroy
    void onModelChanged() -> a
    android.view.View setupNetworkTreeItemView(android.view.View,android.view.ViewGroup,org.geometerplus.fbreader.network.NetworkTree) -> a
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    boolean onSearchRequested() -> onSearchRequested
org.geometerplus.android.fbreader.network.NetworkBaseActivity$1 -> org.geometerplus.android.fbreader.network.bd:
    org.geometerplus.android.fbreader.network.NetworkBaseActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBaseActivity$2 -> org.geometerplus.android.fbreader.network.be:
    org.geometerplus.android.fbreader.network.NetworkBaseActivity this$0 -> a
    org.geometerplus.android.fbreader.network.NetworkTreeActions val$actions -> b
    org.geometerplus.fbreader.network.NetworkTree val$networkTree -> c
    int val$actionCode -> d
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.NetworkBookActions -> org.geometerplus.android.fbreader.network.bh:
    boolean useFullReferences(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    boolean useDemoReferences(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    boolean useBuyReferences(org.geometerplus.fbreader.network.NetworkBookItem) -> c
    boolean canHandleTree(org.geometerplus.fbreader.network.NetworkTree) -> a
    void buildContextMenu(android.app.Activity,android.view.ContextMenu,org.geometerplus.fbreader.network.NetworkTree) -> a
    int getBookStatus(org.geometerplus.fbreader.network.NetworkBookItem,org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection) -> a
    java.util.Set getContextMenuActions(org.geometerplus.fbreader.network.NetworkBookItem,org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection) -> b
    int getDefaultActionCode(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree) -> a
    java.lang.String getConfirmText$513542e4(int) -> a
    boolean createOptionsMenu(android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean prepareOptionsMenu(org.geometerplus.android.fbreader.network.NetworkBaseActivity,android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean runAction(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree,int) -> a
    boolean runActionStatic(android.app.Activity,org.geometerplus.fbreader.network.NetworkBookItem,int) -> a
    void doDownloadBook(android.app.Activity,org.geometerplus.fbreader.network.NetworkBookItem,boolean) -> a
    void doReadBook(android.app.Activity,org.geometerplus.fbreader.network.NetworkBookItem,boolean) -> b
    void tryToDeleteBook(android.app.Activity,org.geometerplus.fbreader.network.NetworkBookItem,boolean) -> c
    void access$0$6c3d9e5(android.app.Activity,org.geometerplus.fbreader.network.NetworkBookItem) -> a
org.geometerplus.android.fbreader.network.NetworkBookActions$1 -> org.geometerplus.android.fbreader.network.bk:
    org.geometerplus.fbreader.network.tree.NetworkBookTree val$tree -> a
    android.app.Activity val$activity -> b
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBookActions$1$1 -> org.geometerplus.android.fbreader.network.h:
    org.geometerplus.android.fbreader.network.NetworkBookActions$1 this$1 -> a
    android.app.Activity val$activity -> b
    org.geometerplus.fbreader.network.tree.NetworkBookTree val$tree -> c
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBookActions$2 -> org.geometerplus.android.fbreader.network.bl:
    boolean val$demo -> a
    org.geometerplus.fbreader.network.NetworkBookItem val$book -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.NetworkBookActions$3 -> org.geometerplus.android.fbreader.network.bg:
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> a
    org.geometerplus.fbreader.network.NetworkBookItem val$book -> b
    android.app.Activity val$activity -> c
    org.geometerplus.zlibrary.core.resources.ZLResource val$dialogResource -> d
    org.geometerplus.zlibrary.core.resources.ZLResource val$buttonResource -> e
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.NetworkBookActions$3$1 -> org.geometerplus.android.fbreader.network.bu:
    org.geometerplus.android.fbreader.network.NetworkBookActions$3 this$1 -> a
    org.geometerplus.zlibrary.core.resources.ZLResource val$dialogResource -> b
    android.app.Activity val$activity -> c
    org.geometerplus.zlibrary.core.resources.ZLResource val$buttonResource -> d
    boolean val$downloadBook -> e
    org.geometerplus.fbreader.network.NetworkBookItem val$book -> f
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> g
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.NetworkBookActions$3$1$1 -> org.geometerplus.android.fbreader.network.bz:
    org.geometerplus.android.fbreader.network.NetworkBookActions$3$1 this$2 -> a
    android.app.Activity val$activity -> b
    org.geometerplus.fbreader.network.NetworkBookItem val$book -> c
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.NetworkBookActions$3$2 -> org.geometerplus.android.fbreader.network.bt:
    org.geometerplus.android.fbreader.network.NetworkBookActions$3 this$1 -> a
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> b
    org.geometerplus.fbreader.network.NetworkBookItem val$book -> c
    android.os.Handler val$handler -> d
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBookActions$4 -> org.geometerplus.android.fbreader.network.bi:
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> a
    org.geometerplus.fbreader.network.NetworkBookItem val$book -> b
    org.geometerplus.zlibrary.core.resources.ZLResource val$dialogResource -> c
    android.app.Activity val$activity -> d
    org.geometerplus.zlibrary.core.resources.ZLResource val$buttonResource -> e
    android.content.DialogInterface$OnClickListener val$listener -> f
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBookActions$5 -> org.geometerplus.android.fbreader.network.bj:
    android.app.Activity val$activity -> a
    java.lang.Runnable val$buyRunnable -> b
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBookActions$Action -> org.geometerplus.android.fbreader.network.at:
    int Id -> a
    java.lang.String Key -> b
    java.lang.String Arg -> c
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity -> org.geometerplus.android.fbreader.network.NetworkBookInfoActivity:
    org.geometerplus.fbreader.network.NetworkBookItem myBook -> a
    android.view.View myMainView -> b
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> c
    org.geometerplus.android.fbreader.network.BookDownloaderServiceConnection myConnection -> d
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    android.view.View getMainView() -> b
    void setTextFromResource(int,java.lang.String) -> a
    void onDestroy() -> onDestroy
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void setupExtraLinks() -> c
    void setPairLabelTextFromResource(int,java.lang.String) -> b
    void setPairValueText(int,java.lang.CharSequence) -> a
    void setupInfo() -> d
    void setupButtons() -> e
    void onStart() -> onStart
    void onStop() -> onStop
    void onModelChanged() -> a
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    org.geometerplus.fbreader.network.NetworkBookItem access$0(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> a
    void access$1(org.geometerplus.android.fbreader.network.NetworkBookInfoActivity) -> b
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$1 -> org.geometerplus.android.fbreader.network.bc:
    org.geometerplus.android.fbreader.network.NetworkBookInfoActivity this$0 -> a
    org.geometerplus.fbreader.network.urlInfo.RelatedUrlInfo val$relatedInfo -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$2 -> org.geometerplus.android.fbreader.network.bb:
    org.geometerplus.android.fbreader.network.NetworkBookInfoActivity this$0 -> a
    org.geometerplus.zlibrary.core.image.ZLLoadableImage val$img -> b
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageManager val$mgr -> c
    int val$maxWidth -> d
    int val$maxHeight -> e
    android.widget.ImageView val$coverView -> f
    android.view.View val$rootView -> g
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$3 -> org.geometerplus.android.fbreader.network.ba:
    org.geometerplus.android.fbreader.network.NetworkBookInfoActivity this$0 -> a
    org.geometerplus.android.fbreader.network.NetworkBookActions$Action val$a -> b
    void onClick(android.view.View) -> onClick
org.geometerplus.android.fbreader.network.NetworkBookInfoActivity$4 -> org.geometerplus.android.fbreader.network.az:
    org.geometerplus.android.fbreader.network.NetworkBookInfoActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkCatalogActions -> org.geometerplus.android.fbreader.network.bm:
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3 -> a
    boolean canHandleTree(org.geometerplus.fbreader.network.NetworkTree) -> a
    java.lang.String getTreeTitle(org.geometerplus.fbreader.network.NetworkTree) -> b
    void buildContextMenu(android.app.Activity,android.view.ContextMenu,org.geometerplus.fbreader.network.NetworkTree) -> a
    int getDefaultActionCode(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree) -> a
    java.lang.String getConfirmText$513542e4(int) -> a
    boolean createOptionsMenu(android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean prepareOptionsMenu(org.geometerplus.android.fbreader.network.NetworkBaseActivity,android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean runAction(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree,int) -> a
    void doExpandCatalog(android.app.Activity,org.geometerplus.fbreader.network.tree.NetworkCatalogTree) -> a
    void clearTree(android.app.Activity,org.geometerplus.fbreader.network.tree.NetworkCatalogTree) -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3() -> a
    void access$1(android.app.Activity,org.geometerplus.fbreader.network.tree.NetworkCatalogTree) -> b
org.geometerplus.android.fbreader.network.NetworkCatalogActions$1 -> org.geometerplus.android.fbreader.network.bo:
    org.geometerplus.android.fbreader.network.NetworkCatalogActions this$0 -> a
    org.geometerplus.fbreader.network.NetworkCatalogItem val$item -> b
    int val$actionCode -> c
    org.geometerplus.android.fbreader.network.NetworkBaseActivity val$activity -> d
    org.geometerplus.fbreader.network.NetworkTree val$tree -> e
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkCatalogActions$2 -> org.geometerplus.android.fbreader.network.bn:
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree val$tree -> a
    android.app.Activity val$activity -> b
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkCatalogActions$2$1 -> org.geometerplus.android.fbreader.network.t:
    org.geometerplus.android.fbreader.network.NetworkCatalogActions$2 this$1 -> a
    android.app.Activity val$activity -> b
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree val$tree -> c
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkCatalogActions$3 -> org.geometerplus.android.fbreader.network.bq:
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree val$tree -> a
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkCatalogActions$4 -> org.geometerplus.android.fbreader.network.bp:
    org.geometerplus.android.fbreader.network.NetworkCatalogActions this$0 -> a
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> b
    org.geometerplus.android.fbreader.network.NetworkBaseActivity val$activity -> c
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkCatalogActions$4$1 -> org.geometerplus.android.fbreader.network.cc:
    org.geometerplus.android.fbreader.network.NetworkCatalogActions$4 this$1 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkCatalogActions$CatalogExpander -> org.geometerplus.android.fbreader.network.aw:
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree myTree -> a
    boolean myCheckAuthentication -> b
    boolean myResumeNotLoad -> c
    void doBefore() -> a
    void doLoading(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
    void updateItems(java.util.List) -> a
    void onFinish(java.lang.String,boolean,java.util.Set) -> a
org.geometerplus.android.fbreader.network.NetworkCatalogActivity -> org.geometerplus.android.fbreader.network.NetworkCatalogActivity:
    org.geometerplus.fbreader.network.NetworkTree myTree -> c
    boolean myInProgress -> d
    org.geometerplus.android.fbreader.network.NetworkCatalogActivity$MyCredentialsCreator myCredentialsCreator -> e
    void setForTree(org.geometerplus.fbreader.network.NetworkTree,org.geometerplus.android.fbreader.network.NetworkCatalogActivity) -> a
    org.geometerplus.android.fbreader.network.NetworkCatalogActivity getByTree(org.geometerplus.fbreader.network.NetworkTree) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void setupTitle() -> b
    void onDestroy() -> onDestroy
    void onResume() -> onResume
    void onModelChanged() -> a
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean onSearchRequested() -> onSearchRequested
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    org.geometerplus.fbreader.network.NetworkTree access$2(org.geometerplus.android.fbreader.network.NetworkCatalogActivity) -> a
    void access$4(org.geometerplus.android.fbreader.network.NetworkCatalogActivity,boolean) -> a
    void access$5(org.geometerplus.android.fbreader.network.NetworkCatalogActivity) -> b
org.geometerplus.android.fbreader.network.NetworkCatalogActivity$1 -> org.geometerplus.android.fbreader.network.cf:
    org.geometerplus.android.fbreader.network.NetworkCatalogActivity this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkCatalogActivity$CatalogAdapter -> org.geometerplus.android.fbreader.network.bf:
    org.geometerplus.android.fbreader.network.NetworkCatalogActivity this$0 -> a
    int getCount() -> getCount
    org.geometerplus.fbreader.network.NetworkTree getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.network.NetworkCatalogActivity$MyCredentialsCreator -> org.geometerplus.android.fbreader.network.ah:
    java.lang.String myUsername -> a
    java.lang.String myPassword -> b
    org.geometerplus.android.fbreader.network.NetworkCatalogActivity this$0 -> c
    org.apache.http.auth.Credentials createCredentials(java.lang.String,org.apache.http.auth.AuthScope) -> a
    void access$1(org.geometerplus.android.fbreader.network.NetworkCatalogActivity$MyCredentialsCreator,java.lang.String) -> a
    void access$2(org.geometerplus.android.fbreader.network.NetworkCatalogActivity$MyCredentialsCreator,java.lang.String) -> b
org.geometerplus.android.fbreader.network.NetworkInitializer -> org.geometerplus.android.fbreader.network.ax:
    org.geometerplus.android.fbreader.network.NetworkInitializer Instance -> a
    android.app.Activity myActivity -> c
    android.content.DialogInterface$OnClickListener myListener -> b
    void setActivity(android.app.Activity) -> a
    void handleMessage(android.os.Message) -> handleMessage
    android.app.Activity access$0(org.geometerplus.android.fbreader.network.NetworkInitializer) -> a
org.geometerplus.android.fbreader.network.NetworkInitializer$1 -> org.geometerplus.android.fbreader.network.z:
    org.geometerplus.android.fbreader.network.NetworkInitializer this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.NetworkInitializer$2 -> org.geometerplus.android.fbreader.network.aa:
    org.geometerplus.android.fbreader.network.NetworkInitializer this$0 -> a
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkInitializer$3 -> org.geometerplus.android.fbreader.network.ab:
    org.geometerplus.android.fbreader.network.NetworkInitializer this$0 -> a
    void onCancel(android.content.DialogInterface) -> onCancel
org.geometerplus.android.fbreader.network.NetworkLibraryActivity -> org.geometerplus.android.fbreader.network.NetworkLibraryActivity:
    org.geometerplus.fbreader.network.NetworkTree myTree -> c
    android.content.Intent myIntent -> d
    void addLinkToIntent(android.content.Intent,org.geometerplus.fbreader.network.ICustomNetworkLink) -> a
    org.geometerplus.fbreader.network.ICustomNetworkLink getLinkFromIntent(android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onNewIntent(android.content.Intent) -> onNewIntent
    void processSavedIntent() -> b
    void processIntent(android.content.Intent) -> b
    void prepareView() -> c
    void onResume() -> onResume
    void onDestroy() -> onDestroy
    android.view.MenuItem addMenuItem(android.view.Menu,int,java.lang.String,int) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean searchIsInProgress() -> d
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean onSearchRequested() -> onSearchRequested
    void onModelChanged() -> a
    boolean onContextItemSelected(android.view.MenuItem) -> onContextItemSelected
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> onListItemClick
    org.geometerplus.fbreader.network.NetworkTree access$3(org.geometerplus.android.fbreader.network.NetworkLibraryActivity) -> a
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$1 -> org.geometerplus.android.fbreader.network.aj:
    org.geometerplus.android.fbreader.network.NetworkLibraryActivity this$0 -> a
    org.geometerplus.fbreader.network.ICustomNetworkLink val$link -> b
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$2 -> org.geometerplus.android.fbreader.network.ak:
    org.geometerplus.android.fbreader.network.NetworkLibraryActivity this$0 -> a
    boolean[] val$checked -> b
    void onClick(android.content.DialogInterface,int,boolean) -> onClick
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$3 -> org.geometerplus.android.fbreader.network.al:
    org.geometerplus.android.fbreader.network.NetworkLibraryActivity this$0 -> a
    boolean[] val$checked -> b
    java.util.List val$allLanguageCodes -> c
    org.geometerplus.fbreader.network.NetworkLibrary val$library -> d
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$4 -> org.geometerplus.android.fbreader.network.am:
    org.geometerplus.android.fbreader.network.NetworkLibraryActivity this$0 -> a
    org.geometerplus.android.fbreader.network.NetworkView val$view -> b
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$5 -> org.geometerplus.android.fbreader.network.ai:
    org.geometerplus.android.fbreader.network.NetworkLibraryActivity this$0 -> a
    org.geometerplus.android.fbreader.network.NetworkView val$view -> b
    android.os.Handler val$handler -> c
    void run() -> run
org.geometerplus.android.fbreader.network.NetworkLibraryActivity$LibraryAdapter -> org.geometerplus.android.fbreader.network.bv:
    org.geometerplus.android.fbreader.network.NetworkLibraryActivity this$0 -> a
    int getCount() -> getCount
    org.geometerplus.fbreader.network.NetworkTree getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
org.geometerplus.android.fbreader.network.NetworkNotifications -> org.geometerplus.android.fbreader.network.l:
    org.geometerplus.android.fbreader.network.NetworkNotifications ourInstance -> a
    int myBookDownloadingId -> b
    org.geometerplus.android.fbreader.network.NetworkNotifications Instance() -> a
    int getBookDownloadingId() -> b
org.geometerplus.android.fbreader.network.NetworkSearchActivity -> org.geometerplus.android.fbreader.network.NetworkSearchActivity:
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.android.fbreader.network.NetworkSearchActivity$Searcher -> org.geometerplus.android.fbreader.network.s:
    org.geometerplus.fbreader.network.tree.SearchItemTree myTree -> a
    java.lang.String myPattern -> b
    void doBefore() -> a
    void doLoading(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
    void updateItems(java.util.List) -> a
    void onFinish(java.lang.String,boolean,java.util.Set) -> a
org.geometerplus.android.fbreader.network.NetworkTreeActions -> org.geometerplus.android.fbreader.network.ag:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    java.lang.String getTitleValue(java.lang.String) -> a
    java.lang.String getConfirmValue(java.lang.String) -> b
    java.lang.String getOptionsValue(java.lang.String,java.lang.String) -> a
    android.view.MenuItem addMenuItem(android.view.ContextMenu,int,java.lang.String) -> a
    android.view.MenuItem addMenuItem(android.view.ContextMenu,int,java.lang.String,java.lang.String) -> a
    android.view.MenuItem addOptionsItem(android.view.Menu,int,java.lang.String) -> a
    android.view.MenuItem addOptionsItem$303c2b57(android.view.Menu,java.lang.String,java.lang.String) -> a
    android.view.MenuItem prepareOptionsItem(android.view.Menu,int,boolean) -> a
    android.view.MenuItem prepareOptionsItem$7cd3e83d(android.view.Menu,boolean,java.lang.String,java.lang.String) -> a
    boolean canHandleTree(org.geometerplus.fbreader.network.NetworkTree) -> a
    java.lang.String getTreeTitle(org.geometerplus.fbreader.network.NetworkTree) -> b
    void buildContextMenu(android.app.Activity,android.view.ContextMenu,org.geometerplus.fbreader.network.NetworkTree) -> a
    int getDefaultActionCode(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree) -> a
    java.lang.String getConfirmText$513542e4(int) -> a
    boolean runAction(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree,int) -> a
    boolean createOptionsMenu(android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean prepareOptionsMenu(org.geometerplus.android.fbreader.network.NetworkBaseActivity,android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
org.geometerplus.android.fbreader.network.NetworkView -> org.geometerplus.android.fbreader.network.ad:
    org.geometerplus.android.fbreader.network.NetworkView ourInstance -> a
    boolean myInitialized -> b
    java.util.ArrayList myActions -> c
    org.geometerplus.android.fbreader.network.TopupActions myTopupActions -> d
    android.os.Handler myEventHandler -> e
    java.util.LinkedList myEventListeners -> f
    org.geometerplus.android.fbreader.network.NetworkView Instance() -> a
    boolean isInitialized() -> b
    void initialize() -> c
    void finishBackgroundUpdate() -> d
    org.geometerplus.android.fbreader.network.TopupActions getTopupActions() -> e
    org.geometerplus.android.fbreader.network.NetworkTreeActions getActions(org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean createOptionsMenu(android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean prepareOptionsMenu(org.geometerplus.android.fbreader.network.NetworkBaseActivity,android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean runOptionsMenu(org.geometerplus.android.fbreader.network.NetworkBaseActivity,android.view.MenuItem,org.geometerplus.fbreader.network.NetworkTree) -> a
    void addEventListener(org.geometerplus.android.fbreader.network.NetworkView$EventListener) -> a
    void removeEventListener(org.geometerplus.android.fbreader.network.NetworkView$EventListener) -> b
    void fireModelChangedAsync() -> f
    void fireModelChanged() -> g
org.geometerplus.android.fbreader.network.NetworkView$1 -> org.geometerplus.android.fbreader.network.bw:
    org.geometerplus.android.fbreader.network.NetworkView this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.fbreader.network.NetworkView$EventListener -> org.geometerplus.android.fbreader.network.ac:
    void onModelChanged() -> a
org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase -> org.geometerplus.android.fbreader.network.av:
    android.database.sqlite.SQLiteDatabase myDatabase -> a
    android.database.sqlite.SQLiteStatement myInsertCustomLinkStatement -> b
    android.database.sqlite.SQLiteStatement myUpdateCustomLinkStatement -> c
    android.database.sqlite.SQLiteStatement myInsertCustomLinkUrlStatement -> d
    android.database.sqlite.SQLiteStatement myUpdateCustomLinkUrlStatement -> e
    android.database.sqlite.SQLiteStatement myDeleteCustomLinkUrlStatement -> f
    android.database.sqlite.SQLiteStatement myDeleteAllCustomLinksStatement -> g
    android.database.sqlite.SQLiteStatement myDeleteCustomLinkStatement -> h
    void executeAsATransaction(java.lang.Runnable) -> a
    void loadCustomLinks(org.geometerplus.fbreader.network.NetworkDatabase$ICustomLinksHandler) -> a
    void saveCustomLink(org.geometerplus.fbreader.network.ICustomNetworkLink) -> a
    void deleteCustomLink(org.geometerplus.fbreader.network.ICustomNetworkLink) -> b
    android.database.sqlite.SQLiteStatement access$0(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> a
    android.database.sqlite.SQLiteDatabase access$1(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> b
    void access$2(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase,android.database.sqlite.SQLiteStatement) -> a
    android.database.sqlite.SQLiteStatement access$3(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> c
    void access$4(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase,android.database.sqlite.SQLiteStatement) -> b
    android.database.sqlite.SQLiteStatement access$5(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> d
    void access$6(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase,android.database.sqlite.SQLiteStatement) -> c
    android.database.sqlite.SQLiteStatement access$7(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> e
    void access$8(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase,android.database.sqlite.SQLiteStatement) -> d
    android.database.sqlite.SQLiteStatement access$9(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> f
    void access$10(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase,android.database.sqlite.SQLiteStatement) -> e
    android.database.sqlite.SQLiteStatement access$11(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> g
    void access$12(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase,android.database.sqlite.SQLiteStatement) -> f
    android.database.sqlite.SQLiteStatement access$13(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase) -> h
    void access$14(org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase,android.database.sqlite.SQLiteStatement) -> g
org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase$1 -> org.geometerplus.android.fbreader.network.bx:
    org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase this$0 -> a
    org.geometerplus.fbreader.network.ICustomNetworkLink val$link -> b
    void run() -> run
org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase$2 -> org.geometerplus.android.fbreader.network.by:
    org.geometerplus.android.fbreader.network.SQLiteNetworkDatabase this$0 -> a
    org.geometerplus.fbreader.network.ICustomNetworkLink val$link -> b
    void run() -> run
org.geometerplus.android.fbreader.network.SearchItemActions -> org.geometerplus.android.fbreader.network.v:
    boolean canHandleTree(org.geometerplus.fbreader.network.NetworkTree) -> a
    java.lang.String getTreeTitle(org.geometerplus.fbreader.network.NetworkTree) -> b
    void buildContextMenu(android.app.Activity,android.view.ContextMenu,org.geometerplus.fbreader.network.NetworkTree) -> a
    int getDefaultActionCode(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree) -> a
    java.lang.String getConfirmText$513542e4(int) -> a
    boolean createOptionsMenu(android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean prepareOptionsMenu(org.geometerplus.android.fbreader.network.NetworkBaseActivity,android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean runAction(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree,int) -> a
org.geometerplus.android.fbreader.network.TopupActions -> org.geometerplus.android.fbreader.network.a:
    boolean canHandleTree(org.geometerplus.fbreader.network.NetworkTree) -> a
    void buildContextMenu(android.app.Activity,android.view.ContextMenu,org.geometerplus.fbreader.network.NetworkTree) -> a
    void buildContextMenu(android.app.Activity,android.view.ContextMenu,org.geometerplus.fbreader.network.INetworkLink) -> a
    int getDefaultActionCode(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree) -> a
    int getDefaultActionCode(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink) -> b
    java.lang.String getConfirmText$513542e4(int) -> a
    boolean createOptionsMenu(android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean prepareOptionsMenu(org.geometerplus.android.fbreader.network.NetworkBaseActivity,android.view.Menu,org.geometerplus.fbreader.network.NetworkTree) -> a
    boolean runAction(org.geometerplus.android.fbreader.network.NetworkBaseActivity,org.geometerplus.fbreader.network.NetworkTree,int) -> a
    boolean runAction(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink,int) -> a
    java.lang.Runnable topupRunnable(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink,java.lang.String) -> a
    void runStandalone(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink) -> a
org.geometerplus.android.fbreader.network.TopupActions$1 -> org.geometerplus.android.fbreader.network.ap:
    android.app.Activity val$activity -> a
    org.geometerplus.fbreader.network.INetworkLink val$link -> b
    void run() -> run
org.geometerplus.android.fbreader.network.TopupActions$2 -> org.geometerplus.android.fbreader.network.an:
    android.app.Activity val$activity -> a
    org.geometerplus.fbreader.network.INetworkLink val$link -> b
    java.lang.String val$action -> c
    void run() -> run
org.geometerplus.android.fbreader.network.TopupActions$3 -> org.geometerplus.android.fbreader.network.ao:
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> a
    android.app.Activity val$activity -> b
    java.lang.Runnable val$action -> c
    void run() -> run
org.geometerplus.android.fbreader.network.Util -> org.geometerplus.android.fbreader.network.br:
    java.util.Map ourAfterRegisrationMap -> a
    boolean testService(android.app.Activity,java.lang.String,java.lang.String) -> a
    boolean isRegistrationSupported(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink) -> a
    void runRegistrationDialog(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink) -> b
    void runAuthenticationDialog(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink,java.lang.String,java.lang.Runnable) -> a
    void processCustomAuthentication(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink,int,android.content.Intent) -> a
    void processSignup(org.geometerplus.fbreader.network.INetworkLink,int,android.content.Intent) -> a
    boolean isTopupSupported(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink) -> c
    boolean isTopupSupported(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink,java.lang.String) -> a
    void runTopupDialog(android.app.Activity,org.geometerplus.fbreader.network.INetworkLink,java.lang.String) -> b
    boolean isBrowserTopupSupported$5a0daebc(org.geometerplus.fbreader.network.INetworkLink) -> a
    void openInBrowser(android.content.Context,java.lang.String) -> a
    void openTree(android.content.Context,org.geometerplus.fbreader.network.NetworkTree) -> a
    org.geometerplus.fbreader.network.NetworkTree getTreeFromIntent(android.content.Intent) -> a
org.geometerplus.android.fbreader.network.Util$1 -> org.geometerplus.android.fbreader.network.cb:
    org.geometerplus.fbreader.network.INetworkLink val$link -> a
    void run() -> run
org.geometerplus.android.fbreader.network.Util$2 -> org.geometerplus.android.fbreader.network.ca:
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager val$mgr -> a
    java.lang.String val$password -> b
    java.lang.Runnable val$onSuccess -> c
    android.app.Activity val$activity -> d
    org.geometerplus.fbreader.network.INetworkLink val$link -> e
    void run() -> run
org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference -> org.geometerplus.android.fbreader.preferences.j:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption myOption -> a
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> b
    android.widget.SeekBar mySlider -> c
    void onBindDialogView(android.view.View) -> onBindDialogView
    void onClick(android.content.DialogInterface,int) -> onClick
    void onAccept() -> a
    android.widget.SeekBar access$0(org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference) -> a
    org.geometerplus.zlibrary.core.resources.ZLResource access$1(org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference) -> b
org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference$SeekBarDrawable -> org.geometerplus.android.fbreader.preferences.p:
    android.graphics.drawable.Drawable myBase -> a
    android.graphics.Paint myPaint -> b
    android.graphics.Paint myOutlinePaint -> c
    org.geometerplus.android.fbreader.preferences.AnimationSpeedPreference this$0 -> d
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    boolean onStateChange(int[]) -> onStateChange
    boolean isStateful() -> isStateful
    boolean onLevelChange(int) -> onLevelChange
    void draw(android.graphics.Canvas) -> draw
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
org.geometerplus.android.fbreader.preferences.BatteryLevelToTurnScreenOffPreference -> org.geometerplus.android.fbreader.preferences.n:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption myOption -> a
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.BookTitlePreference -> org.geometerplus.android.fbreader.preferences.t:
    org.geometerplus.fbreader.library.Book myBook -> a
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.DictionaryPreference -> org.geometerplus.android.fbreader.preferences.r:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.EditBookInfoActivity -> org.geometerplus.android.fbreader.preferences.EditBookInfoActivity:
    org.geometerplus.fbreader.library.Book myBook -> b
    void init(android.content.Intent) -> a
    void onPause() -> onPause
    org.geometerplus.android.fbreader.preferences.ZLPreference addPreference(org.geometerplus.android.fbreader.preferences.ZLPreference) -> a
org.geometerplus.android.fbreader.preferences.FontOption -> org.geometerplus.android.fbreader.preferences.k:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    java.lang.String UNCHANGED -> b
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.FontStylePreference -> org.geometerplus.android.fbreader.preferences.z:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption myBoldOption -> a
    org.geometerplus.zlibrary.core.options.ZLBooleanOption myItalicOption -> b
    java.lang.String[] myValues -> c
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.LanguagePreference -> org.geometerplus.android.fbreader.preferences.l:
    org.geometerplus.fbreader.library.Book myBook -> a
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.PreferenceActivity -> org.geometerplus.android.fbreader.preferences.PreferenceActivity:
    void init(android.content.Intent) -> a
    org.geometerplus.android.fbreader.preferences.ZLPreference addPreference(org.geometerplus.android.fbreader.preferences.ZLPreference) -> a
org.geometerplus.android.fbreader.preferences.PreferenceActivity$1 -> org.geometerplus.android.fbreader.preferences.d:
    org.geometerplus.android.fbreader.preferences.PreferenceActivity this$0 -> a
    org.geometerplus.android.fbreader.preferences.ZLPreferenceSet val$statusBarPreferences -> b
    void onClick() -> onClick
org.geometerplus.android.fbreader.preferences.PreferenceActivity$2 -> org.geometerplus.android.fbreader.preferences.e:
    org.geometerplus.android.fbreader.preferences.PreferenceActivity this$0 -> a
    org.geometerplus.android.fbreader.preferences.ZLPreferenceSet val$bgPreferences -> b
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.PreferenceActivity$3 -> org.geometerplus.android.fbreader.preferences.b:
    org.geometerplus.android.fbreader.preferences.PreferenceActivity this$0 -> a
    org.geometerplus.android.fbreader.preferences.ZLPreferenceSet val$footerPreferences -> b
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.PreferenceActivity$4 -> org.geometerplus.android.fbreader.preferences.c:
    org.geometerplus.android.fbreader.preferences.PreferenceActivity this$0 -> a
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidApplication val$androidApp -> b
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.PreferenceActivity$5 -> org.geometerplus.android.fbreader.preferences.a:
    org.geometerplus.android.fbreader.preferences.PreferenceActivity this$0 -> a
    org.geometerplus.android.fbreader.preferences.ZLPreferenceSet val$volumeKeysPreferences -> b
    void onClick() -> onClick
org.geometerplus.android.fbreader.preferences.WallpaperPreference -> org.geometerplus.android.fbreader.preferences.h:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.ZLBoolean3Preference -> org.geometerplus.android.fbreader.preferences.q:
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option myOption -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3 -> b
    void onAccept() -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3() -> b
org.geometerplus.android.fbreader.preferences.ZLBooleanPreference -> org.geometerplus.android.fbreader.preferences.o:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption myOption -> a
    void onClick() -> onClick
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.ZLChoicePreference -> org.geometerplus.android.fbreader.preferences.ab:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption myOption -> a
    boolean $assertionsDisabled -> b
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.ZLColorPreference -> org.geometerplus.android.fbreader.preferences.x:
    org.geometerplus.zlibrary.core.options.ZLColorOption myOption -> a
    android.widget.SeekBar myRedSlider -> b
    android.widget.SeekBar myGreenSlider -> c
    android.widget.SeekBar myBlueSlider -> d
    android.graphics.drawable.GradientDrawable myPreviewDrawable -> e
    android.widget.SeekBar createSlider(android.view.View,int,int,java.lang.String) -> a
    void onBindDialogView(android.view.View) -> onBindDialogView
    void onClick(android.content.DialogInterface,int) -> onClick
    void onAccept() -> a
    android.graphics.drawable.GradientDrawable access$0(org.geometerplus.android.fbreader.preferences.ZLColorPreference) -> a
    android.widget.SeekBar access$1(org.geometerplus.android.fbreader.preferences.ZLColorPreference) -> b
    android.widget.SeekBar access$2(org.geometerplus.android.fbreader.preferences.ZLColorPreference) -> c
    android.widget.SeekBar access$3(org.geometerplus.android.fbreader.preferences.ZLColorPreference) -> d
org.geometerplus.android.fbreader.preferences.ZLColorPreference$1 -> org.geometerplus.android.fbreader.preferences.u:
    org.geometerplus.android.fbreader.preferences.ZLColorPreference this$0 -> a
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
org.geometerplus.android.fbreader.preferences.ZLColorPreference$SeekBarDrawable -> org.geometerplus.android.fbreader.preferences.ae:
    android.widget.SeekBar mySlider -> a
    android.graphics.drawable.Drawable myBase -> b
    java.lang.String myText -> c
    android.graphics.Paint myPaint -> d
    android.graphics.Paint myOutlinePaint -> e
    boolean myLabelOnRight -> f
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    boolean onStateChange(int[]) -> onStateChange
    boolean isStateful() -> isStateful
    boolean onLevelChange(int) -> onLevelChange
    void draw(android.graphics.Canvas) -> draw
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
org.geometerplus.android.fbreader.preferences.ZLEnumPreference -> org.geometerplus.android.fbreader.preferences.v:
    org.geometerplus.zlibrary.core.options.ZLEnumOption myOption -> a
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.ZLIntegerChoicePreference -> org.geometerplus.android.fbreader.preferences.ac:
    org.geometerplus.zlibrary.core.options.ZLIntegerOption myOption -> a
    int[] myValues -> b
    boolean $assertionsDisabled -> c
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.ZLIntegerRangePreference -> org.geometerplus.android.fbreader.preferences.ad:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption myOption -> a
    void onDialogClosed(boolean) -> onDialogClosed
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.ZLPreference -> org.geometerplus.android.fbreader.preferences.y:
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity -> org.geometerplus.android.fbreader.preferences.i:
    java.util.ArrayList myPreferences -> b
    android.preference.PreferenceScreen myScreen -> c
    org.geometerplus.zlibrary.core.resources.ZLResource Resource -> a
    org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity$Screen createPreferenceScreen(java.lang.String) -> a
    org.geometerplus.android.fbreader.preferences.ZLPreference addPreference(org.geometerplus.android.fbreader.preferences.ZLPreference) -> a
    void init(android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onPause() -> onPause
    java.util.ArrayList access$0(org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity) -> a
org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity$Screen -> org.geometerplus.android.fbreader.preferences.w:
    org.geometerplus.zlibrary.core.resources.ZLResource Resource -> a
    android.preference.PreferenceScreen myScreen -> b
    org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity this$0 -> c
    org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity$Screen createPreferenceScreen(java.lang.String) -> a
    org.geometerplus.android.fbreader.preferences.ZLPreference addPreference(org.geometerplus.android.fbreader.preferences.ZLPreference) -> a
    org.geometerplus.android.fbreader.preferences.ZLPreference addOption(org.geometerplus.zlibrary.core.options.ZLBooleanOption,java.lang.String) -> a
    org.geometerplus.android.fbreader.preferences.ZLPreference addOption(org.geometerplus.zlibrary.core.options.ZLStringOption,java.lang.String) -> a
    org.geometerplus.android.fbreader.preferences.ZLPreference addOption(org.geometerplus.zlibrary.core.options.ZLColorOption,java.lang.String) -> a
    org.geometerplus.android.fbreader.preferences.ZLPreference addOption(org.geometerplus.zlibrary.core.options.ZLEnumOption,java.lang.String) -> a
    android.preference.PreferenceScreen access$1(org.geometerplus.android.fbreader.preferences.ZLPreferenceActivity$Screen) -> a
org.geometerplus.android.fbreader.preferences.ZLPreferenceSet -> org.geometerplus.android.fbreader.preferences.m:
    java.util.LinkedList myPreferences -> a
    void add(org.geometerplus.android.fbreader.preferences.ZLPreference) -> a
    void setEnabled(boolean) -> a
org.geometerplus.android.fbreader.preferences.ZLStringChoicePreference -> org.geometerplus.android.fbreader.preferences.g:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.ZLStringListPreference -> org.geometerplus.android.fbreader.preferences.aa:
    org.geometerplus.zlibrary.core.resources.ZLResource myResource -> a
    boolean $assertionsDisabled -> b
    void setList(java.lang.String[]) -> a
    void setLists(java.lang.String[],java.lang.String[]) -> a
    boolean setInitialValue(java.lang.String) -> a
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.preferences.ZLStringOptionPreference -> org.geometerplus.android.fbreader.preferences.s:
    org.geometerplus.zlibrary.core.options.ZLStringOption myOption -> a
    void onAccept() -> a
org.geometerplus.android.fbreader.preferences.ZLStringPreference -> org.geometerplus.android.fbreader.preferences.f:
    java.lang.String myValue -> a
    void setValue(java.lang.String) -> a
    java.lang.String getValue() -> b
    void onDialogClosed(boolean) -> onDialogClosed
org.geometerplus.android.fbreader.tree.ZLAndroidTree -> org.geometerplus.android.fbreader.a.a:
    int getCoverResourceId() -> a_
org.geometerplus.android.util.PackageUtil -> org.geometerplus.android.a.e:
    boolean canBeStarted(android.content.Context,android.content.Intent,boolean) -> a
    boolean installFromMarket(android.app.Activity,java.lang.String) -> a
    void runInstallPluginDialog(android.app.Activity,java.util.Map,java.lang.Runnable) -> a
org.geometerplus.android.util.PackageUtil$1 -> org.geometerplus.android.a.b:
    android.app.Activity val$activity -> a
    java.lang.String val$plugin -> b
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.util.PackageUtil$2 -> org.geometerplus.android.a.a:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption val$doNotInstallOption -> a
    android.widget.CheckBox val$checkBox -> b
    java.lang.Runnable val$postRunnable -> c
    void onClick(android.content.DialogInterface,int) -> onClick
org.geometerplus.android.util.SQLiteUtil -> org.geometerplus.android.a.j:
    void bindString(android.database.sqlite.SQLiteStatement,int,java.lang.String) -> a
    void bindDate(android.database.sqlite.SQLiteStatement,int,java.util.Date) -> a
    java.util.Date getDate(android.database.Cursor,int) -> a
org.geometerplus.android.util.UIUtil -> org.geometerplus.android.a.h:
    java.lang.Object ourMonitor -> a
    android.app.ProgressDialog ourProgress -> b
    java.util.Queue ourTaskQueue -> c
    android.os.Handler ourProgressHandler -> d
    void wait(java.lang.String,java.lang.Runnable,android.content.Context) -> a
    void runWithMessage(android.content.Context,java.lang.String,java.lang.Runnable,java.lang.Runnable) -> a
    void showErrorMessageText(android.content.Context,java.lang.String) -> a
    void showErrorMessage(android.content.Context,java.lang.String) -> b
    void showErrorMessage(android.content.Context,java.lang.String,java.lang.String) -> a
    java.lang.Object access$0() -> a
    java.util.Queue access$1() -> b
    android.app.ProgressDialog access$2() -> c
    void access$3$7db20201() -> d
    android.os.Handler access$4() -> e
org.geometerplus.android.util.UIUtil$1 -> org.geometerplus.android.a.c:
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.util.UIUtil$2 -> org.geometerplus.android.a.d:
    android.app.ProgressDialog val$currentProgress -> a
    void run() -> run
org.geometerplus.android.util.UIUtil$3 -> org.geometerplus.android.a.g:
    android.app.ProgressDialog val$progress -> a
    java.lang.Runnable val$postAction -> b
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.android.util.UIUtil$4 -> org.geometerplus.android.a.f:
    java.lang.Runnable val$action -> a
    android.os.Handler val$handler -> b
    void run() -> run
org.geometerplus.android.util.UIUtil$Pair -> org.geometerplus.android.a.i:
    java.lang.Runnable Action -> a
    java.lang.String Message -> b
org.geometerplus.fbreader.Paths -> org.geometerplus.a.a:
    org.geometerplus.zlibrary.core.options.ZLStringOption BooksDirectoryOption() -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption FontsDirectoryOption() -> b
    org.geometerplus.zlibrary.core.options.ZLStringOption WallpapersDirectoryOption() -> c
    java.lang.String cacheDirectory() -> d
    java.lang.String networkCacheDirectory() -> e
org.geometerplus.fbreader.bookmodel.BookModel -> org.geometerplus.a.e.c:
    org.geometerplus.zlibrary.core.image.ZLImageMap myImageMap -> d
    org.geometerplus.fbreader.library.Book Book -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel BookTextModel -> b
    org.geometerplus.fbreader.bookmodel.TOCTree TOCTree -> c
    java.util.HashMap myFootnotes -> e
    org.geometerplus.zlibrary.text.model.CharStorage myInternalHyperlinks -> f
    char[] myCurrentLinkBlock -> g
    int myCurrentLinkBlockOffset -> h
    org.geometerplus.fbreader.bookmodel.BookModel createModel(org.geometerplus.fbreader.library.Book) -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel getFootnoteModel(java.lang.String) -> a
    void addHyperlinkLabel(java.lang.String,org.geometerplus.zlibrary.text.model.ZLTextModel,int) -> a
    org.geometerplus.fbreader.bookmodel.BookModel$Label getLabel(java.lang.String) -> b
    void addImage(java.lang.String,org.geometerplus.zlibrary.core.image.ZLImage) -> a
org.geometerplus.fbreader.bookmodel.BookModel$Label -> org.geometerplus.a.e.d:
    java.lang.String ModelId -> a
    int ParagraphIndex -> b
org.geometerplus.fbreader.bookmodel.BookReader -> org.geometerplus.a.e.b:
    org.geometerplus.fbreader.bookmodel.BookModel Model -> b
    org.geometerplus.zlibrary.text.model.ZLTextWritableModel myCurrentTextModel -> a
    boolean myTextParagraphExists -> c
    boolean myTextParagraphIsNonEmpty -> d
    char[] myTextBuffer -> e
    int myTextBufferLength -> f
    java.lang.StringBuilder myContentsBuffer -> g
    byte[] myKindStack -> h
    int myKindStackSize -> i
    byte myHyperlinkKind -> j
    java.lang.String myHyperlinkReference -> k
    boolean myInsideTitle -> l
    boolean mySectionContainsRegularContents -> m
    org.geometerplus.fbreader.bookmodel.TOCTree myCurrentContentsTree -> n
    java.nio.charset.CharsetDecoder myByteDecoder -> o
    byte[] myUnderflowByteBuffer -> p
    int myUnderflowLength -> q
    void setByteDecoder(java.nio.charset.CharsetDecoder) -> a
    void flushTextBufferToParagraph() -> a
    void addControl(byte,boolean) -> a
    void pushKind(byte) -> b
    boolean popKind() -> e
    void beginParagraph() -> f
    void beginParagraph(byte) -> c
    void endParagraph() -> g
    void insertEndOfSectionParagraph() -> h
    void unsetCurrentTextModel() -> i
    void enterTitle() -> j
    void exitTitle() -> k
    void setMainTextModel() -> l
    void setFootnoteTextModel(java.lang.String) -> c
    void addData(char[]) -> a
    void addData(char[],int,int,boolean) -> a
    void addByteData(byte[],int,int) -> b
    byte hyperlinkType(byte) -> a
    void addHyperlinkControl(byte,java.lang.String) -> a
    void addHyperlinkLabel(java.lang.String) -> d
    void addHyperlinkLabel(java.lang.String,int) -> a
    void addContentsData(char[]) -> b
    void addContentsData(char[],int,int) -> a
    boolean hasContentsData() -> m
    void beginContentsParagraph(int) -> a
    void endContentsParagraph() -> n
    boolean paragraphIsOpen() -> o
    boolean paragraphIsNonEmpty() -> p
    void beginContentsParagraph() -> q
    void addImageReference(java.lang.String) -> e
    void addImageReference(java.lang.String,short) -> a
    void addImage(java.lang.String,org.geometerplus.zlibrary.core.image.ZLImage) -> a
    void addFixedHSpace(short) -> a
org.geometerplus.fbreader.bookmodel.TOCTree -> org.geometerplus.a.e.e:
    java.lang.String myText -> a
    org.geometerplus.fbreader.bookmodel.TOCTree$Reference myReference -> d
    java.lang.String getText() -> a
    void setText(java.lang.String) -> a
    org.geometerplus.fbreader.bookmodel.TOCTree$Reference getReference() -> b
    void setReference(org.geometerplus.zlibrary.text.model.ZLTextModel,int) -> a
org.geometerplus.fbreader.bookmodel.TOCTree$Reference -> org.geometerplus.a.e.a:
    int ParagraphIndex -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel Model -> b
org.geometerplus.fbreader.fbreader.ChangeFontSizeAction -> org.geometerplus.a.d.o:
    int myDelta -> b
    void run() -> b
org.geometerplus.fbreader.fbreader.ClearFindResultsAction -> org.geometerplus.a.d.c:
    void run() -> b
org.geometerplus.fbreader.fbreader.ColorProfile -> org.geometerplus.a.d.y:
    java.util.ArrayList ourNames -> i
    java.util.HashMap ourProfiles -> j
    org.geometerplus.zlibrary.core.options.ZLStringOption WallpaperOption -> a
    org.geometerplus.zlibrary.core.options.ZLColorOption BackgroundOption -> b
    org.geometerplus.zlibrary.core.options.ZLColorOption SelectionBackgroundOption -> c
    org.geometerplus.zlibrary.core.options.ZLColorOption HighlightingOption -> d
    org.geometerplus.zlibrary.core.options.ZLColorOption RegularTextOption -> e
    org.geometerplus.zlibrary.core.options.ZLColorOption HyperlinkTextOption -> f
    org.geometerplus.zlibrary.core.options.ZLColorOption VisitedHyperlinkTextOption -> g
    org.geometerplus.zlibrary.core.options.ZLColorOption FooterFillOption -> h
    org.geometerplus.fbreader.fbreader.ColorProfile get(java.lang.String) -> a
    org.geometerplus.zlibrary.core.options.ZLColorOption createOption(java.lang.String,java.lang.String,int,int,int) -> a
org.geometerplus.fbreader.fbreader.ExitAction -> org.geometerplus.a.d.ac:
    void run() -> b
org.geometerplus.fbreader.fbreader.FBAction -> org.geometerplus.a.d.b:
    org.geometerplus.fbreader.fbreader.FBReaderApp Reader -> a
org.geometerplus.fbreader.fbreader.FBReaderApp -> org.geometerplus.a.d.i:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption AllowScreenBrightnessAdjustmentOption -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption TextSearchPatternOption -> b
    org.geometerplus.zlibrary.core.options.ZLBooleanOption UseSeparateBindingsOption -> y
    org.geometerplus.zlibrary.core.options.ZLBooleanOption EnableDoubleTapOption -> c
    org.geometerplus.zlibrary.core.options.ZLBooleanOption NavigateAllWordsOption -> d
    org.geometerplus.zlibrary.core.options.ZLEnumOption DictionaryTappingActionOption -> e
    org.geometerplus.zlibrary.core.options.ZLColorOption ImageViewBackgroundOption -> f
    org.geometerplus.zlibrary.core.options.ZLEnumOption ImageTappingActionOption -> g
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption LeftMarginOption -> h
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption RightMarginOption -> i
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption TopMarginOption -> j
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption BottomMarginOption -> k
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption ScrollbarTypeOption -> l
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption FooterHeightOption -> m
    org.geometerplus.zlibrary.core.options.ZLBooleanOption FooterShowTOCMarksOption -> n
    org.geometerplus.zlibrary.core.options.ZLBooleanOption FooterShowClockOption -> o
    org.geometerplus.zlibrary.core.options.ZLBooleanOption FooterShowBatteryOption -> p
    org.geometerplus.zlibrary.core.options.ZLBooleanOption FooterShowProgressOption -> q
    org.geometerplus.zlibrary.core.options.ZLStringOption FooterFontOption -> r
    org.geometerplus.zlibrary.core.options.ZLBooleanOption SelectionEnabledOption -> s
    org.geometerplus.zlibrary.core.options.ZLStringOption ColorProfileOption -> t
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ShowPreviousBookInCancelMenuOption -> u
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ShowPositionsInCancelMenuOption -> v
    org.geometerplus.zlibrary.core.application.ZLKeyBindings myBindings -> z
    org.geometerplus.fbreader.fbreader.FBView BookTextView -> w
    org.geometerplus.fbreader.fbreader.FBView FootnoteView -> A
    org.geometerplus.fbreader.bookmodel.BookModel Model -> x
    java.lang.String myArg0 -> B
    org.geometerplus.fbreader.fbreader.ColorProfile myColorProfile -> C
    java.util.ArrayList myCancelActionsList -> D
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$FBReaderApp$CancelActionType -> E
    void initWindow() -> c
    void openBook(org.geometerplus.fbreader.library.Book,org.geometerplus.fbreader.library.Bookmark) -> a
    org.geometerplus.fbreader.fbreader.ColorProfile getColorProfile() -> p
    void setColorProfileName(java.lang.String) -> d
    org.geometerplus.zlibrary.core.application.ZLKeyBindings keyBindings() -> g
    void tryOpenFootnote(java.lang.String) -> e
    void clearTextCaches() -> q
    void openBookInternal(org.geometerplus.fbreader.library.Book,org.geometerplus.fbreader.library.Bookmark) -> b
    void gotoBookmark(org.geometerplus.fbreader.library.Bookmark) -> a
    void showBookTextView() -> r
    org.geometerplus.fbreader.library.Book createBookForFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
    void openFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    void onWindowClosing() -> k
    java.util.List getCancelActionsList() -> s
    void runCancelAction(int) -> a
    void updateInvisibleBookmarksList(org.geometerplus.fbreader.library.Bookmark) -> b
    void addInvisibleBookmark(org.geometerplus.zlibrary.text.view.ZLTextWordCursor) -> a
    void addInvisibleBookmark() -> t
    org.geometerplus.fbreader.library.Bookmark addBookmark(int,boolean) -> a
    java.lang.String access$0(org.geometerplus.fbreader.fbreader.FBReaderApp) -> a
    org.geometerplus.fbreader.library.Book access$1$39b7ecbb(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$FBReaderApp$CancelActionType() -> u
org.geometerplus.fbreader.fbreader.FBReaderApp$1 -> org.geometerplus.a.d.s:
    org.geometerplus.fbreader.fbreader.FBReaderApp this$0 -> a
    void run() -> run
org.geometerplus.fbreader.fbreader.FBReaderApp$2 -> org.geometerplus.a.d.t:
    org.geometerplus.fbreader.fbreader.FBReaderApp this$0 -> a
    org.geometerplus.fbreader.library.Book val$book -> b
    org.geometerplus.fbreader.library.Bookmark val$bookmark -> c
    void run() -> run
org.geometerplus.fbreader.fbreader.FBReaderApp$BookmarkDescription -> org.geometerplus.a.d.m:
    org.geometerplus.fbreader.library.Bookmark Bookmark -> d
org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionDescription -> org.geometerplus.a.d.e:
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType Type -> a
    java.lang.String Title -> b
    java.lang.String Summary -> c
org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType -> org.geometerplus.a.d.w:
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType previousBook -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType returnTo -> b
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType close -> c
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType[] ENUM$VALUES -> d
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType[] values() -> values
    org.geometerplus.fbreader.fbreader.FBReaderApp$CancelActionType valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.fbreader.FBReaderApp$DictionaryTappingAction -> org.geometerplus.a.d.a:
    org.geometerplus.fbreader.fbreader.FBReaderApp$DictionaryTappingAction doNothing -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp$DictionaryTappingAction selectWord -> b
    org.geometerplus.fbreader.fbreader.FBReaderApp$DictionaryTappingAction openDictionary -> c
    org.geometerplus.fbreader.fbreader.FBReaderApp$DictionaryTappingAction[] ENUM$VALUES -> d
    org.geometerplus.fbreader.fbreader.FBReaderApp$DictionaryTappingAction[] values() -> values
    org.geometerplus.fbreader.fbreader.FBReaderApp$DictionaryTappingAction valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction -> org.geometerplus.a.d.q:
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction doNothing -> a
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction selectImage -> c
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction openImageView -> b
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction[] ENUM$VALUES -> d
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction[] values() -> values
    org.geometerplus.fbreader.fbreader.FBReaderApp$ImageTappingAction valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.fbreader.FBView -> org.geometerplus.a.d.d:
    org.geometerplus.fbreader.fbreader.FBReaderApp myReader -> d
    int myStartY -> e
    boolean myIsBrightnessAdjustmentInProgress -> f
    int myStartBrightness -> g
    java.lang.String myZoneMapId -> h
    org.geometerplus.fbreader.fbreader.TapZoneMap myZoneMap -> i
    org.geometerplus.fbreader.fbreader.FBView$Footer myFooter -> j
    void setModel(org.geometerplus.zlibrary.text.model.ZLTextModel) -> a
    org.geometerplus.fbreader.fbreader.TapZoneMap getZoneMap() -> L
    boolean onFingerSingleTap(int,int) -> a
    boolean isDoubleTapSupported() -> a
    boolean onFingerDoubleTap(int,int) -> b
    boolean onFingerPress(int,int) -> c
    boolean isFlickScrollingEnabled() -> M
    void startManualScrolling(int,int) -> j
    boolean onFingerMove(int,int) -> d
    boolean onFingerRelease(int,int) -> e
    boolean onFingerLongPress(int,int) -> f
    boolean onFingerMoveAfterLongPress(int,int) -> g
    boolean onFingerReleaseAfterLongPress(int,int) -> h
    boolean onTrackballRotated(int,int) -> i
    int getLeftMargin() -> b
    int getRightMargin() -> c
    int getTopMargin() -> d
    int getBottomMargin() -> e
    org.geometerplus.zlibrary.core.filesystem.ZLFile getWallpaperFile() -> f
    org.geometerplus.zlibrary.core.util.ZLColor getBackgroundColor() -> g
    org.geometerplus.zlibrary.core.util.ZLColor getSelectedBackgroundColor() -> h
    org.geometerplus.zlibrary.core.util.ZLColor getTextColor(org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
    org.geometerplus.zlibrary.core.util.ZLColor getHighlightingColor() -> i
    boolean isSelectionEnabled() -> j
    int scrollbarType() -> k
    org.geometerplus.zlibrary.core.view.ZLView$Animation getAnimationType() -> l
    org.geometerplus.zlibrary.core.view.ZLView$FooterArea getFooterArea() -> m
    org.geometerplus.fbreader.fbreader.FBReaderApp access$1(org.geometerplus.fbreader.fbreader.FBView) -> a
    int access$2(org.geometerplus.fbreader.fbreader.FBView) -> b
    int access$3(org.geometerplus.fbreader.fbreader.FBView,int) -> a
org.geometerplus.fbreader.fbreader.FBView$Footer -> org.geometerplus.a.d.u:
    java.lang.Runnable UpdateTask -> b
    java.util.ArrayList myTOCMarks -> c
    int MAX_TOC_MARKS_NUMBER -> d
    int myGaugeWidth -> e
    org.geometerplus.fbreader.fbreader.FBView this$0 -> a
    int getHeight() -> a
    void resetTOCMarks() -> b
    void updateTOCMarks(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    void paint(org.geometerplus.zlibrary.core.view.ZLPaintContext) -> a
    java.lang.Runnable access$1(org.geometerplus.fbreader.fbreader.FBView$Footer) -> a
org.geometerplus.fbreader.fbreader.FBView$Footer$1 -> org.geometerplus.a.d.aa:
    org.geometerplus.fbreader.fbreader.FBView$Footer this$1 -> a
    void run() -> run
org.geometerplus.fbreader.fbreader.FindNextAction -> org.geometerplus.a.d.p:
    boolean isEnabled() -> a
    void run() -> b
org.geometerplus.fbreader.fbreader.FindPreviousAction -> org.geometerplus.a.d.r:
    boolean isEnabled() -> a
    void run() -> b
org.geometerplus.fbreader.fbreader.RotateAction -> org.geometerplus.a.d.j:
    void run() -> b
    boolean isVisible() -> c
org.geometerplus.fbreader.fbreader.ScrollingPreferences -> org.geometerplus.a.d.x:
    org.geometerplus.fbreader.fbreader.ScrollingPreferences ourInstance -> g
    org.geometerplus.zlibrary.core.options.ZLEnumOption FingerScrollingOption -> a
    org.geometerplus.zlibrary.core.options.ZLBooleanOption VolumeKeysOption -> b
    org.geometerplus.zlibrary.core.options.ZLBooleanOption InvertVolumeKeysOption -> c
    org.geometerplus.zlibrary.core.options.ZLEnumOption AnimationOption -> d
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption AnimationSpeedOption -> e
    org.geometerplus.zlibrary.core.options.ZLBooleanOption HorizontalOption -> f
    org.geometerplus.zlibrary.core.options.ZLEnumOption TapZonesSchemeOption -> h
    org.geometerplus.fbreader.fbreader.ScrollingPreferences Instance() -> a
org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling -> org.geometerplus.a.d.g:
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling byTap -> a
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling byFlick -> b
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling byTapAndFlick -> c
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling[] ENUM$VALUES -> d
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling[] values() -> values
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$FingerScrolling valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme -> org.geometerplus.a.d.l:
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme left_to_right -> b
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme right_to_left -> a
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme up -> c
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme down -> d
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme custom -> e
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme[] ENUM$VALUES -> f
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme[] values() -> values
    org.geometerplus.fbreader.fbreader.ScrollingPreferences$TapZonesScheme valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.fbreader.SwitchProfileAction -> org.geometerplus.a.d.h:
    java.lang.String myProfileName -> b
    boolean isVisible() -> c
    void run() -> b
org.geometerplus.fbreader.fbreader.TapZoneMap -> org.geometerplus.a.d.f:
    int myVerticalSize -> a
    int myHorizontalSize -> b
    java.util.HashMap myZoneMap -> c
    java.util.HashMap myZoneMap2 -> d
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$TapZoneMap$Tap -> e
    java.lang.String getActionByCoordinates(int,int,int,int,org.geometerplus.fbreader.fbreader.TapZoneMap$Tap) -> a
    java.util.HashMap access$0(org.geometerplus.fbreader.fbreader.TapZoneMap) -> a
    java.util.HashMap access$1(org.geometerplus.fbreader.fbreader.TapZoneMap) -> b
    void access$2(org.geometerplus.fbreader.fbreader.TapZoneMap,int) -> a
    void access$3(org.geometerplus.fbreader.fbreader.TapZoneMap,int) -> b
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$fbreader$TapZoneMap$Tap() -> a
org.geometerplus.fbreader.fbreader.TapZoneMap$Reader -> org.geometerplus.a.d.v:
    org.geometerplus.fbreader.fbreader.TapZoneMap this$0 -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.fbreader.TapZoneMap$Tap -> org.geometerplus.a.d.n:
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap singleTap -> a
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap singleNotDoubleTap -> b
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap doubleTap -> c
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap[] ENUM$VALUES -> d
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap[] values() -> values
    org.geometerplus.fbreader.fbreader.TapZoneMap$Tap valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.fbreader.TapZoneMap$Zone -> org.geometerplus.a.d.z:
    int HIndex -> a
    int VIndex -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.fbreader.TurnPageAction -> org.geometerplus.a.d.k:
    boolean myForward -> b
    boolean isEnabled() -> a
    void run() -> b
    void runWithCoordinates(int,int) -> a
org.geometerplus.fbreader.fbreader.VolumeKeyTurnPageAction -> org.geometerplus.a.d.ab:
    boolean myForward -> b
    boolean isEnabled() -> a
    void run() -> b
org.geometerplus.fbreader.formats.FormatPlugin -> org.geometerplus.a.c.a:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean readMetaInfo(org.geometerplus.fbreader.library.Book) -> a
    boolean readModel(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    org.geometerplus.zlibrary.core.image.ZLImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
org.geometerplus.fbreader.formats.PluginCollection -> org.geometerplus.a.c.b:
    org.geometerplus.fbreader.formats.PluginCollection ourInstance -> a
    java.util.ArrayList myPlugins -> b
    org.geometerplus.zlibrary.core.options.ZLStringOption DefaultLanguageOption -> c
    org.geometerplus.zlibrary.core.options.ZLStringOption DefaultEncodingOption -> d
    org.geometerplus.zlibrary.core.options.ZLBooleanOption LanguageAutoDetectOption -> e
    org.geometerplus.fbreader.formats.PluginCollection Instance() -> a
    org.geometerplus.fbreader.formats.FormatPlugin getPlugin(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
org.geometerplus.fbreader.formats.fb2.Base64EncodedImage -> org.geometerplus.a.c.c.j:
    int ourCounter -> a
    java.lang.String myDirName -> b
    int myFileNumber -> c
    java.io.OutputStreamWriter myStreamWriter -> d
    void resetCounter() -> f
    java.lang.String encodedFileName() -> c
    java.lang.String decodedFileName() -> e
    void addData(char[],int,int) -> a
    void close() -> g
org.geometerplus.fbreader.formats.fb2.FB2AnnotationReader -> org.geometerplus.a.c.c.f:
    int myReadState -> a
    java.lang.StringBuilder myBuffer -> b
    boolean dontCacheAttributeValues() -> b
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
org.geometerplus.fbreader.formats.fb2.FB2CoverImage -> org.geometerplus.a.c.c.e:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> a
    org.geometerplus.zlibrary.core.image.ZLSingleImage getRealImage() -> c
    int sourceType() -> g
    java.lang.String getId() -> h
org.geometerplus.fbreader.formats.fb2.FB2CoverImage$BackgroundReader -> org.geometerplus.a.c.c.k:
    boolean myReadCoverPage -> a
    java.lang.String myImageReference -> b
    org.geometerplus.fbreader.formats.fb2.Base64EncodedImage myImage -> c
    org.geometerplus.fbreader.formats.fb2.Base64EncodedImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean processNamespaces() -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
org.geometerplus.fbreader.formats.fb2.FB2CoverReader -> org.geometerplus.a.c.c.d:
org.geometerplus.fbreader.formats.fb2.FB2MetaInfoReader -> org.geometerplus.a.c.c.g:
    org.geometerplus.fbreader.library.Book myBook -> a
    int myReadState -> b
    java.lang.String[] myAuthorNames -> c
    java.lang.StringBuilder myBuffer -> d
    boolean dontCacheAttributeValues() -> b
    boolean readMetaInfo() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
org.geometerplus.fbreader.formats.fb2.FB2Plugin -> org.geometerplus.a.c.c.h:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean readMetaInfo(org.geometerplus.fbreader.library.Book) -> a
    boolean readModel(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    org.geometerplus.zlibrary.core.image.ZLImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
org.geometerplus.fbreader.formats.fb2.FB2Reader -> org.geometerplus.a.c.c.b:
    org.geometerplus.fbreader.bookmodel.BookReader myBookReader -> a
    boolean myInsidePoem -> b
    boolean myInsideTitle -> c
    int myBodyCounter -> d
    boolean myReadMainText -> e
    int mySectionDepth -> f
    boolean mySectionStarted -> g
    byte myHyperlinkType -> h
    org.geometerplus.fbreader.formats.fb2.Base64EncodedImage myCurrentImage -> i
    boolean myInsideCoverpage -> j
    java.lang.String myCoverImageReference -> k
    int myParagraphsBeforeBodyNumber -> l
    char[] SPACE -> m
    byte[] myTagStack -> n
    int myTagStackSize -> o
    boolean readBook() -> a
    boolean dontCacheAttributeValues() -> b
    void characterDataHandler(char[],int,int) -> a
    void characterDataHandlerFinal(char[],int,int) -> b
    boolean endElementHandler(java.lang.String) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean processNamespaces() -> c
    void addExternalEntities(java.util.HashMap) -> a
    java.util.List externalDTDs() -> d
org.geometerplus.fbreader.formats.fb2.FB2Tag -> org.geometerplus.a.c.c.c:
    java.util.HashMap ourTagByName -> a
    java.lang.Byte ourUnknownTag -> b
    byte getTagByName(java.lang.String) -> a
org.geometerplus.fbreader.formats.fb2.FB2TagManager -> org.geometerplus.a.c.c.i:
    java.util.HashMap ourMap -> a
    java.util.ArrayList humanReadableTags(java.lang.String) -> a
    java.util.HashMap access$0() -> a
org.geometerplus.fbreader.formats.fb2.FB2TagManager$FB2TagInfoReader -> org.geometerplus.a.c.c.a:
    java.lang.String myLanguage -> a
    org.geometerplus.fbreader.library.Tag myCategoryTag -> b
    org.geometerplus.fbreader.library.Tag mySubCategoryTag -> c
    java.util.ArrayList myGenreIds -> d
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.fbreader.formats.html.HtmlReader -> org.geometerplus.a.c.f.a:
    byte[] myStyleTable -> c
    java.nio.charset.CharsetDecoder myAttributeDecoder -> a
    boolean myInsideTitle -> d
    boolean mySectionStarted -> e
    byte myHyperlinkType -> f
    char[] SPACE -> g
    java.lang.String myHrefAttribute -> h
    boolean myOrderedListIsStarted -> i
    int myOLCounter -> j
    byte[] myControls -> k
    byte myControlsNumber -> l
    java.util.HashMap myEntityMap -> m
    java.nio.charset.CharsetDecoder createDecoder() -> c
    java.io.InputStream getInputStream() -> d
    void startDocumentHandler() -> a
    void endDocumentHandler() -> b
    void byteDataHandler(byte[],int,int) -> a
    void entityDataHandler(java.lang.String) -> b
    void openControl(byte) -> d
    void closeControl(byte) -> e
    void startNewParagraph() -> r
    void endElementHandler(java.lang.String) -> a
    void endElementHandler(byte) -> a
    void startElementHandler(java.lang.String,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
    void startElementHandler(byte,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
org.geometerplus.fbreader.formats.html.HtmlTag -> org.geometerplus.a.c.f.b:
    java.util.HashMap ourTagByName -> a
    java.lang.Byte ourUnknownTag -> b
    byte getTagByName(java.lang.String) -> a
org.geometerplus.fbreader.formats.oeb.ContainerFileReader -> org.geometerplus.a.c.a.j:
    java.lang.String myRootPath -> a
    java.lang.String getRootPath() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.formats.oeb.NCXReader -> org.geometerplus.a.c.a.g:
    java.util.TreeMap myNavigationMap -> a
    java.util.ArrayList myPointStack -> b
    int myReadState -> c
    int myPlayIndex -> d
    java.lang.String myLocalPathPrefix -> e
    boolean readFile(java.lang.String) -> b
    java.util.Map navigationMap() -> a
    int atoi(java.lang.String) -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    boolean dontCacheAttributeValues() -> b
org.geometerplus.fbreader.formats.oeb.NCXReader$NavPoint -> org.geometerplus.a.c.a.c:
    int Order -> a
    int Level -> b
    java.lang.String Text -> c
    java.lang.String ContentHRef -> d
org.geometerplus.fbreader.formats.oeb.OEBAnnotationReader -> org.geometerplus.a.c.a.b:
    java.lang.String myDescriptionTag -> a
    int myReadState -> b
    java.lang.StringBuilder myBuffer -> c
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean processNamespaces() -> c
    void namespaceMapChangedHandler(java.util.Map) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void characterDataHandler(char[],int,int) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.fbreader.formats.oeb.OEBBookReader -> org.geometerplus.a.c.a.k:
    char[] Dots -> a
    org.geometerplus.fbreader.bookmodel.BookReader myModelReader -> b
    java.util.HashMap myIdToHref -> c
    java.util.ArrayList myHtmlFileNames -> d
    java.util.ArrayList myTourTOC -> e
    java.util.ArrayList myGuideTOC -> f
    java.lang.String myOPFSchemePrefix -> g
    java.lang.String myFilePrefix -> h
    java.lang.String myNCXTOCFileName -> i
    java.util.TreeMap myFileNumbers -> j
    java.util.TreeMap myTOCLabels -> k
    int myState -> l
    boolean readBook(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.fbreader.bookmodel.BookModel$Label getTOCLabel(java.lang.String) -> b
    void generateTOC() -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    boolean processNamespaces() -> c
    void namespaceMapChangedHandler(java.util.Map) -> a
    boolean dontCacheAttributeValues() -> b
org.geometerplus.fbreader.formats.oeb.OEBCoverBackgroundReader -> org.geometerplus.a.c.a.h:
    org.geometerplus.zlibrary.core.image.ZLFileImage myImage -> a
    java.lang.String myPathPrefix -> b
    java.lang.String myXHTMLPathPrefix -> c
    java.lang.String myCoverXHTML -> d
    boolean myReadGuide -> e
    org.geometerplus.zlibrary.core.image.ZLFileImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    java.lang.String access$0(org.geometerplus.fbreader.formats.oeb.OEBCoverBackgroundReader) -> a
    void access$1(org.geometerplus.fbreader.formats.oeb.OEBCoverBackgroundReader,org.geometerplus.zlibrary.core.image.ZLFileImage) -> a
org.geometerplus.fbreader.formats.oeb.OEBCoverBackgroundReader$XHTMLImageFinder -> org.geometerplus.a.c.a.i:
    org.geometerplus.fbreader.formats.oeb.OEBCoverBackgroundReader this$0 -> a
    boolean processNamespaces() -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.formats.oeb.OEBCoverReader -> org.geometerplus.a.c.a.a:
org.geometerplus.fbreader.formats.oeb.OEBCoverReader$OEBCoverImage -> org.geometerplus.a.c.a.d:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> a
    org.geometerplus.zlibrary.core.image.ZLSingleImage getRealImage() -> c
    int sourceType() -> g
    java.lang.String getId() -> h
org.geometerplus.fbreader.formats.oeb.OEBMetaInfoReader -> org.geometerplus.a.c.a.l:
    org.geometerplus.fbreader.library.Book myBook -> a
    java.lang.String myDCMetadataTag -> b
    java.lang.String myMetadataTag -> c
    java.lang.String myOpfMetadataTag -> d
    java.lang.String myMetadataTagRealName -> e
    java.lang.String myTitleTag -> f
    java.lang.String myAuthorTag -> g
    java.lang.String mySubjectTag -> h
    java.lang.String myLanguageTag -> i
    java.lang.String myMetaTag -> j
    java.lang.String mySeriesTitle -> k
    float mySeriesIndex -> l
    java.util.ArrayList myAuthorList -> m
    java.util.ArrayList myAuthorList2 -> n
    int myReadState -> o
    boolean myReadMetaData -> p
    java.lang.StringBuilder myBuffer -> q
    boolean readMetaInfo(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean processNamespaces() -> c
    void namespaceMapChangedHandler(java.util.Map) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void characterDataHandler(char[],int,int) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.fbreader.formats.oeb.OEBPlugin -> org.geometerplus.a.c.a.e:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile getOpfFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> d
    boolean readMetaInfo(org.geometerplus.fbreader.library.Book) -> a
    boolean readModel(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    org.geometerplus.zlibrary.core.image.ZLImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
org.geometerplus.fbreader.formats.oeb.Reference -> org.geometerplus.a.c.a.f:
    java.lang.String Title -> a
    java.lang.String HRef -> b
org.geometerplus.fbreader.formats.pdb.DocDecompressor -> org.geometerplus.a.c.d.a:
    int decompress(java.io.InputStream,byte[],int) -> a
org.geometerplus.fbreader.formats.pdb.MobipocketHtmlBookReader -> org.geometerplus.a.c.d.h:
    java.nio.charset.CharsetDecoder myTocDecoder -> c
    org.geometerplus.fbreader.formats.pdb.MobipocketStream myMobipocketStream -> d
    boolean myReadGuide -> e
    int myTocStartOffset -> f
    int myTocEndOffset -> g
    java.util.TreeMap myTocEntries -> h
    java.util.TreeMap myPositionToParagraph -> i
    java.util.TreeSet myFileposReferences -> j
    int myCurrentTocPosition -> k
    org.geometerplus.zlibrary.core.html.ZLByteBuffer myTocBuffer -> l
    java.io.InputStream getInputStream() -> d
    boolean tocRangeContainsPosition(int) -> b
    void startElementHandler(byte,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
    void endElementHandler(byte) -> a
    void byteDataHandler(byte[],int,int) -> a
    void startDocumentHandler() -> a
    void endDocumentHandler() -> b
org.geometerplus.fbreader.formats.pdb.MobipocketPlugin -> org.geometerplus.a.c.d.c:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean readMetaInfo(org.geometerplus.fbreader.library.Book) -> a
    boolean readModel(org.geometerplus.fbreader.bookmodel.BookModel) -> a
    org.geometerplus.zlibrary.core.image.ZLImage readCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    java.lang.String readAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
org.geometerplus.fbreader.formats.pdb.MobipocketStream -> org.geometerplus.a.c.d.b:
    int myFileSize -> i
    int myImageStartIndex -> j
    int getImageOffset(int) -> a
    int getImageLength(int) -> b
org.geometerplus.fbreader.formats.pdb.PalmDocLikeStream -> org.geometerplus.a.c.d.g:
    int myMaxRecordIndex -> a
    int myRecordIndex -> b
    int myCompressionType -> c
    long myFileSize -> i
    boolean fillBuffer() -> a
org.geometerplus.fbreader.formats.pdb.PdbHeader -> org.geometerplus.a.c.d.d:
    java.lang.String DocName -> b
    int Flags -> c
    java.lang.String Id -> d
    int[] Offsets -> a
    int length() -> a
org.geometerplus.fbreader.formats.pdb.PdbPlugin -> org.geometerplus.a.c.d.e:
    boolean acceptsFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.lang.String fileType(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> d
org.geometerplus.fbreader.formats.pdb.PdbStream -> org.geometerplus.a.c.d.i:
    org.geometerplus.zlibrary.core.util.ZLInputStreamWithOffset myBase -> d
    org.geometerplus.fbreader.formats.pdb.PdbHeader myHeader -> e
    byte[] myBuffer -> f
    short myBufferLength -> g
    short myBufferOffset -> h
    int read() -> read
    int read(byte[],int,int) -> read
    void close() -> close
    boolean fillBuffer() -> a
org.geometerplus.fbreader.formats.pdb.PdbUtil -> org.geometerplus.a.c.d.f:
    void skip(java.io.InputStream,int) -> a
    int readShort(java.io.InputStream) -> a
    long readInt(java.io.InputStream) -> b
org.geometerplus.fbreader.formats.util.MiscUtil -> org.geometerplus.a.c.e.a:
    java.lang.String htmlDirectoryPrefix(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.lang.String archiveEntryName(java.lang.String) -> a
    boolean isHexDigit(char) -> a
    java.lang.String decodeHtmlReference(java.lang.String) -> b
org.geometerplus.fbreader.formats.xhtml.XHTMLReader -> org.geometerplus.a.c.b.h:
    java.util.HashMap ourTagActions -> f
    org.geometerplus.fbreader.bookmodel.BookReader myModelReader -> g
    java.lang.String myPathPrefix -> a
    java.lang.String myLocalPathPrefix -> b
    java.lang.String myReferencePrefix -> c
    boolean myPreformatted -> d
    boolean myInsideBody -> e
    java.util.Map myFileNumbers -> h
    java.util.ArrayList ourExternalDTDs -> i
    org.geometerplus.fbreader.formats.xhtml.XHTMLTagAction addAction(java.lang.String,org.geometerplus.fbreader.formats.xhtml.XHTMLTagAction) -> a
    org.geometerplus.fbreader.bookmodel.BookReader getModelReader() -> a
    java.lang.String getFileAlias(java.lang.String) -> b
    boolean readFile(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    java.util.List xhtmlDTDs() -> e
    java.util.List externalDTDs() -> d
    boolean dontCacheAttributeValues() -> b
    boolean processNamespaces() -> c
org.geometerplus.fbreader.formats.xhtml.XHTMLTagAction -> org.geometerplus.a.c.b.e:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagBodyAction -> org.geometerplus.a.c.b.f:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagControlAction -> org.geometerplus.a.c.b.c:
    byte myControl -> a
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagHyperlinkAction -> org.geometerplus.a.c.b.i:
    byte[] myHyperlinkStack -> a
    int myHyperlinkStackSize -> b
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagImageAction -> org.geometerplus.a.c.b.k:
    java.lang.String myNamespace -> a
    java.lang.String myNameAttribute -> b
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagItemAction -> org.geometerplus.a.c.b.d:
    char[] BULLET -> a
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagParagraphAction -> org.geometerplus.a.c.b.g:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagParagraphWithControlAction -> org.geometerplus.a.c.b.a:
    byte myControl -> a
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagPreAction -> org.geometerplus.a.c.b.j:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.formats.xhtml.XHTMLTagRestartParagraphAction -> org.geometerplus.a.c.b.b:
    void doAtStart(org.geometerplus.fbreader.formats.xhtml.XHTMLReader,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void doAtEnd(org.geometerplus.fbreader.formats.xhtml.XHTMLReader) -> a
org.geometerplus.fbreader.library.Author -> org.geometerplus.a.b.h:
    java.lang.String DisplayName -> a
    java.lang.String SortKey -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.library.AuthorTree -> org.geometerplus.a.b.b:
    org.geometerplus.fbreader.library.Author Author -> a
    java.lang.String getName() -> a
    java.lang.String getSortKey() -> b
org.geometerplus.fbreader.library.Book -> org.geometerplus.a.b.j:
    org.geometerplus.zlibrary.core.filesystem.ZLFile File -> a
    long myId -> b
    java.lang.String myEncoding -> c
    java.lang.String myLanguage -> d
    java.lang.String myTitle -> e
    java.util.List myAuthors -> f
    java.util.List myTags -> g
    org.geometerplus.fbreader.library.SeriesInfo mySeriesInfo -> h
    boolean myIsSaved -> i
    java.util.Set myVisitedHyperlinks -> j
    org.geometerplus.fbreader.library.Book getById(long) -> a
    org.geometerplus.fbreader.library.Book getByFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    void reloadInfoFromFile() -> a
    void reloadInfoFromDatabase() -> b
    boolean readMetaInfo() -> c
    void loadLists() -> n
    java.util.List authors() -> d
    void addAuthorWithNoCheck(org.geometerplus.fbreader.library.Author) -> a
    void addAuthor(java.lang.String) -> a
    void addAuthor(java.lang.String,java.lang.String) -> a
    long getId() -> e
    java.lang.String getTitle() -> f
    void setTitle(java.lang.String) -> b
    org.geometerplus.fbreader.library.SeriesInfo getSeriesInfo() -> g
    void setSeriesInfoWithNoCheck(java.lang.String,float) -> a
    void setSeriesInfo(java.lang.String,float) -> b
    java.lang.String getLanguage() -> h
    void setLanguage(java.lang.String) -> c
    java.lang.String getEncoding() -> i
    void setEncoding(java.lang.String) -> d
    java.util.List tags() -> j
    void addTagWithNoCheck(org.geometerplus.fbreader.library.Tag) -> a
    void addTag(org.geometerplus.fbreader.library.Tag) -> b
    void addTag(java.lang.String) -> e
    boolean matches(java.lang.String) -> f
    boolean save() -> k
    org.geometerplus.zlibrary.text.view.ZLTextPosition getStoredPosition() -> l
    void storePosition(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    void initHyperlinkSet() -> o
    boolean isHyperlinkVisited(java.lang.String) -> g
    void markHyperlinkAsVisited(java.lang.String) -> h
    void insertIntoBookList() -> m
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    long access$0(org.geometerplus.fbreader.library.Book) -> a
    java.lang.String access$1(org.geometerplus.fbreader.library.Book) -> b
    java.lang.String access$2(org.geometerplus.fbreader.library.Book) -> c
    java.lang.String access$3(org.geometerplus.fbreader.library.Book) -> d
    void access$4(org.geometerplus.fbreader.library.Book,long) -> a
    void access$5(org.geometerplus.fbreader.library.Book) -> e
    org.geometerplus.fbreader.library.SeriesInfo access$6(org.geometerplus.fbreader.library.Book) -> f
org.geometerplus.fbreader.library.Book$1 -> org.geometerplus.a.b.e:
    org.geometerplus.fbreader.library.Book this$0 -> a
    org.geometerplus.fbreader.library.BooksDatabase val$database -> b
    void run() -> run
org.geometerplus.fbreader.library.BookInSeriesTree -> org.geometerplus.a.b.i:
    int compareTo(org.geometerplus.fbreader.tree.FBTree) -> a
org.geometerplus.fbreader.library.BookTree -> org.geometerplus.a.b.n:
    org.geometerplus.fbreader.library.Book Book -> a
    boolean myShowAuthors -> d
    java.lang.String getName() -> a
    java.lang.String getSummary() -> c
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> d
org.geometerplus.fbreader.library.Bookmark -> org.geometerplus.a.b.m:
    long myId -> c
    long myBookId -> d
    java.lang.String myBookTitle -> e
    java.lang.String myText -> f
    java.util.Date myCreationDate -> g
    java.util.Date myModificationDate -> h
    java.util.Date myAccessDate -> i
    int myAccessCount -> m
    java.util.Date myLatestDate -> n
    java.lang.String ModelId -> a
    boolean IsVisible -> b
    boolean myIsChanged -> o
    java.util.List bookmarks() -> a
    java.util.List invisibleBookmarks(org.geometerplus.fbreader.library.Book) -> a
    long getId() -> b
    long getBookId() -> c
    java.lang.String getText() -> g
    java.lang.String getBookTitle() -> h
    java.util.Date getTime(int) -> a
    int getAccessCount() -> i
    void onOpen() -> j
    void save() -> k
    void delete() -> l
org.geometerplus.fbreader.library.Bookmark$ByTimeComparator -> org.geometerplus.a.b.c:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.library.BooksDatabase -> org.geometerplus.a.b.r:
    org.geometerplus.fbreader.library.BooksDatabase ourInstance -> a
    org.geometerplus.fbreader.library.BooksDatabase Instance() -> a
    org.geometerplus.fbreader.library.Book createBook(long,long,java.lang.String,java.lang.String,java.lang.String) -> a
    org.geometerplus.fbreader.library.Book createBook(long,org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String,java.lang.String,java.lang.String) -> a
    void addAuthor(org.geometerplus.fbreader.library.Book,org.geometerplus.fbreader.library.Author) -> a
    void addTag(org.geometerplus.fbreader.library.Book,org.geometerplus.fbreader.library.Tag) -> a
    void setSeriesInfo(org.geometerplus.fbreader.library.Book,java.lang.String,float) -> a
    void executeAsATransaction(java.lang.Runnable) -> a
    java.util.Map loadBooks(org.geometerplus.fbreader.library.FileInfoSet) -> a
    org.geometerplus.fbreader.library.Book loadBook(long) -> a
    void reloadBook(org.geometerplus.fbreader.library.Book) -> a
    org.geometerplus.fbreader.library.Book loadBookByFile(long,org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.util.List loadAuthors(long) -> b
    java.util.List loadTags(long) -> c
    org.geometerplus.fbreader.library.SeriesInfo loadSeriesInfo(long) -> d
    void updateBookInfo(long,long,java.lang.String,java.lang.String,java.lang.String) -> b
    long insertBookInfo(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String,java.lang.String,java.lang.String) -> a
    void deleteAllBookAuthors(long) -> e
    void saveBookAuthorInfo(long,long,org.geometerplus.fbreader.library.Author) -> a
    void deleteAllBookTags(long) -> f
    void saveBookTagInfo(long,org.geometerplus.fbreader.library.Tag) -> a
    void saveBookSeriesInfo(long,org.geometerplus.fbreader.library.SeriesInfo) -> a
    org.geometerplus.fbreader.library.FileInfo createFileInfo(long,java.lang.String,org.geometerplus.fbreader.library.FileInfo) -> a
    java.util.Collection loadFileInfos() -> b
    java.util.Collection loadFileInfos(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.util.Collection loadFileInfos(long) -> g
    void removeFileInfo(long) -> h
    void saveFileInfo(org.geometerplus.fbreader.library.FileInfo) -> a
    java.util.List loadRecentBookIds() -> c
    void saveRecentBookIds(java.util.List) -> a
    java.util.List loadFavoritesIds() -> d
    void addToFavorites(long) -> i
    void removeFromFavorites(long) -> j
    org.geometerplus.fbreader.library.Bookmark createBookmark(long,long,java.lang.String,java.lang.String,java.util.Date,java.util.Date,java.util.Date,int,java.lang.String,int,int,int,boolean) -> a
    java.util.List loadBookmarks$4d71d71e(long) -> k
    java.util.List loadAllVisibleBookmarks() -> e
    long saveBookmark(org.geometerplus.fbreader.library.Bookmark) -> a
    void deleteBookmark(org.geometerplus.fbreader.library.Bookmark) -> b
    org.geometerplus.zlibrary.text.view.ZLTextPosition getStoredPosition(long) -> l
    void storePosition(long,org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    boolean insertIntoBookList(long) -> m
    boolean deleteFromBookList(long) -> n
    boolean checkBookList(long) -> o
    java.util.Collection loadVisitedHyperlinks(long) -> p
    void addVisitedHyperlink(long,java.lang.String) -> a
org.geometerplus.fbreader.library.FileInfo -> org.geometerplus.a.b.s:
    java.lang.String Name -> a
    long Id -> d
    long FileSize -> e
org.geometerplus.fbreader.library.FileInfoSet -> org.geometerplus.a.b.p:
    java.util.HashMap myInfosByFile -> a
    java.util.HashMap myFilesByInfo -> b
    java.util.HashMap myInfosByPair -> c
    java.util.HashMap myInfosById -> d
    java.util.LinkedHashSet myInfosToSave -> e
    java.util.LinkedHashSet myInfosToRemove -> f
    void load(java.util.Collection) -> a
    void save() -> a
    boolean check(org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile,boolean) -> a
    java.util.List archiveEntries(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.geometerplus.fbreader.library.FileInfo get(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
    long getId(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    org.geometerplus.zlibrary.core.filesystem.ZLFile getFile(org.geometerplus.fbreader.library.FileInfo) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile getFile(long) -> a
    void removeChildren(org.geometerplus.fbreader.library.FileInfo) -> b
    void addChildren(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> d
    java.util.LinkedHashSet access$0(org.geometerplus.fbreader.library.FileInfoSet) -> a
    java.util.HashMap access$1(org.geometerplus.fbreader.library.FileInfoSet) -> b
    java.util.LinkedHashSet access$2(org.geometerplus.fbreader.library.FileInfoSet) -> c
org.geometerplus.fbreader.library.FileInfoSet$1 -> org.geometerplus.a.b.a:
    org.geometerplus.fbreader.library.FileInfoSet this$0 -> a
    org.geometerplus.fbreader.library.BooksDatabase val$database -> b
    void run() -> run
org.geometerplus.fbreader.library.FileInfoSet$Pair -> org.geometerplus.a.b.v:
    java.lang.String myName -> a
    org.geometerplus.fbreader.library.FileInfo myParent -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
org.geometerplus.fbreader.library.Library -> org.geometerplus.a.b.w:
    java.util.LinkedList myBooks -> a
    java.util.HashSet myExternalBooks -> b
    org.geometerplus.fbreader.library.LibraryTree myLibraryByAuthor -> c
    org.geometerplus.fbreader.library.LibraryTree myLibraryByTitle -> d
    org.geometerplus.fbreader.library.LibraryTree myLibraryByTag -> e
    org.geometerplus.fbreader.library.LibraryTree myRecentBooks -> f
    org.geometerplus.fbreader.library.LibraryTree myFavorites -> g
    org.geometerplus.fbreader.library.LibraryTree mySearchResult -> h
    int myState -> i
    boolean myInterrupted -> j
    java.util.ArrayList myNullList -> k
    java.util.HashMap ourCoverMap -> l
    java.lang.ref.WeakReference NULL_IMAGE -> m
    boolean hasState$134632() -> a
    void waitForState$13462e() -> b
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile getHelpFile() -> c
    org.geometerplus.fbreader.library.Book getBook(org.geometerplus.zlibrary.core.filesystem.ZLFile,org.geometerplus.fbreader.library.FileInfoSet,java.util.Map,boolean) -> a
    void collectBooks(org.geometerplus.zlibrary.core.filesystem.ZLFile,org.geometerplus.fbreader.library.FileInfoSet,java.util.Map,boolean) -> b
    void collectExternalBooks(org.geometerplus.fbreader.library.FileInfoSet,java.util.Map) -> a
    void collectBooks() -> m
    org.geometerplus.fbreader.library.TagTree getTagTree(org.geometerplus.fbreader.library.Tag,java.util.HashMap) -> a
    void synchronize() -> d
    org.geometerplus.fbreader.library.LibraryTree byAuthor() -> e
    org.geometerplus.fbreader.library.LibraryTree byTitle() -> f
    org.geometerplus.fbreader.library.LibraryTree byTag() -> g
    org.geometerplus.fbreader.library.LibraryTree recentBooks() -> h
    org.geometerplus.fbreader.library.Book getRecentBook() -> i
    org.geometerplus.fbreader.library.Book getPreviousBook() -> j
    org.geometerplus.fbreader.library.LibraryTree favorites() -> k
    org.geometerplus.fbreader.library.LibraryTree searchResults() -> l
    org.geometerplus.fbreader.library.LibraryTree searchBooks(java.lang.String) -> a
    void addBookToRecentList(org.geometerplus.fbreader.library.Book) -> a
    boolean isBookInFavorites(org.geometerplus.fbreader.library.Book) -> b
    void addBookToFavorites(org.geometerplus.fbreader.library.Book) -> c
    void removeBookFromFavorites(org.geometerplus.fbreader.library.Book) -> d
    int getRemoveBookMode(org.geometerplus.fbreader.library.Book) -> e
    void removeBook(org.geometerplus.fbreader.library.Book,int) -> a
    org.geometerplus.zlibrary.core.image.ZLImage getCover(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.lang.String getAnnotation(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    java.util.LinkedList access$0(org.geometerplus.fbreader.library.Library) -> a
org.geometerplus.fbreader.library.Library$1 -> org.geometerplus.a.b.k:
    org.geometerplus.fbreader.library.Library this$0 -> a
    void run() -> run
org.geometerplus.fbreader.library.Library$AuthorSeriesPair -> org.geometerplus.a.b.l:
    org.geometerplus.fbreader.library.Author myAuthor -> a
    java.lang.String mySeries -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.library.LibraryTree -> org.geometerplus.a.b.o:
    org.geometerplus.fbreader.library.BookTree createBookSubTree(org.geometerplus.fbreader.library.Book,boolean) -> a
    boolean containsBook(org.geometerplus.fbreader.library.Book) -> a
    boolean removeBook(org.geometerplus.fbreader.library.Book) -> b
org.geometerplus.fbreader.library.RootTree -> org.geometerplus.a.b.u:
    java.lang.String getName() -> a
org.geometerplus.fbreader.library.SeriesInfo -> org.geometerplus.a.b.q:
    java.lang.String Name -> a
    float Index -> b
org.geometerplus.fbreader.library.SeriesTree -> org.geometerplus.a.b.d:
    java.lang.String Series -> a
    java.lang.String getName() -> a
org.geometerplus.fbreader.library.Tag -> org.geometerplus.a.b.g:
    java.util.HashMap ourTagSet -> c
    org.geometerplus.fbreader.library.Tag Parent -> a
    java.lang.String Name -> b
    org.geometerplus.fbreader.library.Tag getTag(org.geometerplus.fbreader.library.Tag,java.lang.String) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.library.TagTree -> org.geometerplus.a.b.f:
    org.geometerplus.fbreader.library.Tag Tag -> a
    java.lang.String getName() -> a
    java.lang.String getSortKey() -> b
org.geometerplus.fbreader.library.TitleTree -> org.geometerplus.a.b.t:
    java.lang.String Title -> a
    java.lang.String getName() -> a
org.geometerplus.fbreader.network.AbstractNetworkLink -> org.geometerplus.a.a.g:
    java.lang.String mySiteName -> d
    java.lang.String myTitle -> a
    java.lang.String mySummary -> b
    java.lang.String myLanguage -> e
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection myInfos -> c
    org.geometerplus.zlibrary.core.options.ZLStringListOption myBooksInBasketOption -> f
    java.lang.String getSiteName() -> f
    java.lang.String getTitle() -> g
    java.lang.String getSummary() -> h
    java.lang.String getLanguage() -> i
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection urlInfoMap() -> b
    java.lang.String getUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfoWithDate getUrlInfo(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> b
    java.util.Set getUrlKeys() -> j
    org.geometerplus.fbreader.network.Basket basket() -> k
    void add(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    void remove(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    void clear() -> l
    boolean contains(org.geometerplus.fbreader.network.NetworkBookItem) -> c
    java.util.List bookIds() -> m
    org.geometerplus.fbreader.network.NetworkOperationData createOperationData(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.Base64EncodedImage -> org.geometerplus.a.a.x:
    java.lang.String myDecodedFileName -> a
    java.lang.String makeImagesDir() -> f
    void setData(java.lang.String) -> a
    boolean isCacheValid(java.io.File) -> a
    java.lang.String encodedFileName() -> c
    java.lang.String decodedFileName() -> e
org.geometerplus.fbreader.network.Basket -> org.geometerplus.a.a.o:
    void add(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    void remove(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    boolean contains(org.geometerplus.fbreader.network.NetworkBookItem) -> c
    java.util.List bookIds() -> m
    void clear() -> l
org.geometerplus.fbreader.network.HtmlUtil -> org.geometerplus.a.a.s:
    java.lang.CharSequence getHtmlText(java.lang.String) -> a
org.geometerplus.fbreader.network.ICustomNetworkLink -> org.geometerplus.a.a.f:
    int getId() -> a
    void setId(int) -> a
    void setTitle(java.lang.String) -> a
    void setSummary(java.lang.String) -> b
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection urlInfoMap() -> b
    void setUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type,java.lang.String) -> a
    boolean isObsolete$1349f3() -> c
    void reloadInfo(boolean) -> a
    boolean hasChanges() -> d
    void resetChanges() -> e
org.geometerplus.fbreader.network.INetworkLink -> org.geometerplus.a.a.i:
    java.lang.String getSiteName() -> f
    java.lang.String getTitle() -> g
    java.lang.String getSummary() -> h
    java.lang.String getUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfoWithDate getUrlInfo(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> b
    java.util.Set getUrlKeys() -> j
    java.lang.String getLanguage() -> i
    org.geometerplus.fbreader.network.NetworkOperationData createOperationData(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest simpleSearchRequest(java.lang.String,org.geometerplus.fbreader.network.NetworkOperationData) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest resume(org.geometerplus.fbreader.network.NetworkOperationData) -> a
    org.geometerplus.fbreader.network.NetworkCatalogItem libraryItem() -> n
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager authenticationManager() -> o
    org.geometerplus.fbreader.network.Basket basket() -> k
    java.lang.String rewriteUrl(java.lang.String,boolean) -> a
org.geometerplus.fbreader.network.NetworkBookItem -> org.geometerplus.a.a.r:
    int Index -> h
    java.lang.String Id -> a
    java.util.LinkedList Authors -> d
    java.util.LinkedList Tags -> e
    java.lang.String SeriesTitle -> f
    float IndexInSeries -> g
    boolean isFullyLoaded() -> a
    void loadFullInformation() -> b
    org.geometerplus.fbreader.network.NetworkCatalogItem createRelatedCatalogItem(org.geometerplus.fbreader.network.urlInfo.RelatedUrlInfo) -> a
    org.geometerplus.fbreader.network.urlInfo.BookUrlInfo reference(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> c
    java.lang.String localCopyFileName() -> c
org.geometerplus.fbreader.network.NetworkBookItem$AuthorData -> org.geometerplus.a.a.d:
    java.lang.String DisplayName -> a
    java.lang.String SortKey -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.fbreader.network.NetworkBookItemComparator -> org.geometerplus.a.a.j:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.network.NetworkCatalogItem -> org.geometerplus.a.a.b:
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility myAccessibility -> d
    int Flags -> a
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$NetworkCatalogItem$Accessibility -> e
    java.util.Map extraData() -> c
    void loadChildren(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
    boolean supportsResumeLoading() -> d
    void resumeLoading(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> b
    void onDisplayItem() -> e
    org.geometerplus.zlibrary.core.util.ZLBoolean3 getVisibility() -> f
    java.lang.String getStringId() -> b
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$NetworkCatalogItem$Accessibility() -> a
org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility -> org.geometerplus.a.a.u:
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility NEVER -> a
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility ALWAYS -> b
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility SIGNED_IN -> c
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility HAS_BOOKS -> d
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility[] ENUM$VALUES -> e
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility[] values() -> values
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.network.NetworkDatabase -> org.geometerplus.a.a.t:
    org.geometerplus.fbreader.network.NetworkDatabase ourInstance -> a
    org.geometerplus.fbreader.network.NetworkDatabase Instance() -> a
    void loadCustomLinks(org.geometerplus.fbreader.network.NetworkDatabase$ICustomLinksHandler) -> a
    void saveCustomLink(org.geometerplus.fbreader.network.ICustomNetworkLink) -> a
    void deleteCustomLink(org.geometerplus.fbreader.network.ICustomNetworkLink) -> b
org.geometerplus.fbreader.network.NetworkDatabase$ICustomLinksHandler -> org.geometerplus.a.a.n:
    void handleCustomLinkData(int,java.lang.String,java.lang.String,java.lang.String,org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection) -> a
org.geometerplus.fbreader.network.NetworkImage -> org.geometerplus.a.a.ac:
    java.lang.String Url -> a
    org.geometerplus.zlibrary.core.image.ZLFileImage myFileImage -> b
    java.lang.String makeImageFilePath(java.lang.String,org.geometerplus.zlibrary.core.util.MimeType) -> a
    java.lang.String getFilePath() -> c
    int sourceType() -> g
    java.lang.String getId() -> h
    java.lang.String getURI() -> d
    void synchronize() -> e
    void synchronizeFast() -> f
    void synchronizeInternal(boolean) -> a
    java.io.InputStream inputStream() -> a
org.geometerplus.fbreader.network.NetworkItem -> org.geometerplus.a.a.q:
    org.geometerplus.fbreader.network.INetworkLink Link -> b
    java.lang.CharSequence Title -> c
    java.lang.CharSequence mySummary -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection myURLs -> d
    void setSummary(java.lang.CharSequence) -> a
    java.lang.CharSequence getSummary() -> h
    void addUrls(org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection) -> a
    java.util.List getAllInfos() -> i
    java.util.List getAllInfos(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    java.lang.String getUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> b
    java.lang.String getImageUrl() -> j
org.geometerplus.fbreader.network.NetworkLibrary -> org.geometerplus.a.a.c:
    org.geometerplus.fbreader.network.NetworkLibrary ourInstance -> b
    org.geometerplus.zlibrary.core.options.ZLStringOption NetworkSearchPatternOption -> a
    java.util.List myLinks -> c
    org.geometerplus.zlibrary.core.options.ZLStringOption myActiveLanguageCodesOption -> d
    org.geometerplus.fbreader.network.tree.RootTree myRootTree -> e
    org.geometerplus.fbreader.network.tree.RootTree myFakeRootTree -> f
    org.geometerplus.fbreader.network.tree.SearchItemTree mySearchItemTree -> g
    boolean myChildrenAreInvalid -> h
    boolean myUpdateVisibility -> i
    boolean myIsAlreadyInitialized -> j
    java.util.ArrayList myBackgroundLinks -> k
    java.lang.Object myBackgroundLock -> l
    org.geometerplus.fbreader.network.NetworkLibrary Instance() -> a
    java.util.List languageCodes() -> b
    org.geometerplus.zlibrary.core.options.ZLStringOption activeLanguageCodesOption() -> j
    java.util.Collection activeLanguageCodes() -> c
    void setActiveLanguageCodes(java.util.Collection) -> a
    java.lang.String commaSeparatedString(java.util.Collection) -> b
    java.util.List activeLinks() -> k
    void initialize() -> d
    void removeAllLoadedLinks() -> l
    void runBackgroundUpdate(boolean) -> a
    void finishBackgroundUpdate() -> e
    java.lang.String rewriteUrl(java.lang.String,boolean) -> a
    void invalidateVisibility() -> f
    boolean linkIsChanged(org.geometerplus.fbreader.network.INetworkLink) -> a
    void updateVisibility() -> m
    void synchronize() -> g
    org.geometerplus.fbreader.network.NetworkTree getRootTree() -> h
    org.geometerplus.fbreader.network.tree.SearchItemTree getSearchItemTree() -> i
    org.geometerplus.fbreader.network.tree.NetworkCatalogTree getFakeCatalogTree(org.geometerplus.fbreader.network.NetworkCatalogItem) -> a
    org.geometerplus.fbreader.network.NetworkTree getTreeByKey(org.geometerplus.fbreader.network.NetworkTree$Key) -> a
    void simpleSearch(java.lang.String,org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
    void addCustomLink(org.geometerplus.fbreader.network.ICustomNetworkLink) -> a
    void removeCustomLink(org.geometerplus.fbreader.network.ICustomNetworkLink) -> b
    java.util.List access$0(org.geometerplus.fbreader.network.NetworkLibrary) -> a
    java.util.ArrayList access$1(org.geometerplus.fbreader.network.NetworkLibrary) -> b
org.geometerplus.fbreader.network.NetworkLibrary$1 -> org.geometerplus.a.a.y:
    org.geometerplus.fbreader.network.NetworkLibrary this$0 -> a
    void onNewLink(org.geometerplus.fbreader.network.INetworkLink) -> a
org.geometerplus.fbreader.network.NetworkLibrary$2 -> org.geometerplus.a.a.aa:
    org.geometerplus.fbreader.network.NetworkLibrary this$0 -> a
    void handleCustomLinkData(int,java.lang.String,java.lang.String,java.lang.String,org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection) -> a
org.geometerplus.fbreader.network.NetworkLibrary$3 -> org.geometerplus.a.a.z:
    org.geometerplus.fbreader.network.NetworkLibrary this$0 -> a
    void onNewLink(org.geometerplus.fbreader.network.INetworkLink) -> a
org.geometerplus.fbreader.network.NetworkLibrary$4 -> org.geometerplus.a.a.ab:
    org.geometerplus.fbreader.network.NetworkLibrary this$0 -> a
    org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener val$listener -> b
    void onNewItem(org.geometerplus.fbreader.network.INetworkLink,org.geometerplus.fbreader.network.NetworkItem) -> a
    boolean confirmInterrupt() -> a
    void commitItems(org.geometerplus.fbreader.network.INetworkLink) -> a
org.geometerplus.fbreader.network.NetworkLibrary$LinksComparator -> org.geometerplus.a.a.w:
    java.lang.String filterLinkTitle(java.lang.String) -> a
    int languageOrder(java.lang.String) -> b
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.network.NetworkLibrary$OnNewLinkListener -> org.geometerplus.a.a.h:
    void onNewLink(org.geometerplus.fbreader.network.INetworkLink) -> a
org.geometerplus.fbreader.network.NetworkOperationData -> org.geometerplus.a.a.m:
    org.geometerplus.fbreader.network.INetworkLink Link -> a
    org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener Listener -> b
    java.lang.String ResumeURI -> c
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest resume() -> a
org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener -> org.geometerplus.a.a.e:
    void onNewItem(org.geometerplus.fbreader.network.INetworkLink,org.geometerplus.fbreader.network.NetworkItem) -> a
    void commitItems(org.geometerplus.fbreader.network.INetworkLink) -> a
    boolean confirmInterrupt() -> a
org.geometerplus.fbreader.network.NetworkTree -> org.geometerplus.a.a.a:
    org.geometerplus.fbreader.network.NetworkTree$Key myKey -> a
    java.util.Map myUserData -> d
    org.geometerplus.zlibrary.core.image.ZLImage createCover(org.geometerplus.fbreader.network.NetworkItem) -> a
    org.geometerplus.fbreader.network.NetworkItem getHoldedItem() -> e
    org.geometerplus.fbreader.network.NetworkTree$Key getUniqueKey() -> g
    void setUserData(java.lang.String,java.lang.Object) -> a
    java.lang.Object getUserData(java.lang.String) -> a
    java.lang.String getStringId() -> f
    void removeItems(java.util.Set) -> a
org.geometerplus.fbreader.network.NetworkTree$Key -> org.geometerplus.a.a.p:
    org.geometerplus.fbreader.network.NetworkTree$Key Parent -> a
    java.lang.String Id -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.NetworkURLCatalogItem -> org.geometerplus.a.a.k:
    java.lang.String getStringId() -> b
org.geometerplus.fbreader.network.SearchResult -> org.geometerplus.a.a.v:
    java.lang.String Summary -> a
    java.util.LinkedHashMap BooksMap -> b
org.geometerplus.fbreader.network.TopUpItem -> org.geometerplus.a.a.l:
org.geometerplus.fbreader.network.atom.ATOMAuthor -> org.geometerplus.a.a.e.m:
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMCategory -> org.geometerplus.a.a.e.b:
    java.lang.String getTerm() -> a
    java.lang.String getLabel() -> b
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMCommonAttributes -> org.geometerplus.a.a.e.g:
    org.geometerplus.zlibrary.core.xml.ZLStringMap myAttributes -> a
    void readAttribute(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    java.lang.String getAttribute(java.lang.String) -> a
    void addAttribute(java.lang.String,java.lang.String) -> a
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMDateConstruct -> org.geometerplus.a.a.e.a:
    int Year -> a
    int Month -> b
    int Day -> c
    int Hour -> d
    int Minutes -> e
    int Seconds -> f
    float SecondFraction -> g
    int TZHour -> h
    int TZMinutes -> i
    int[] DAYS_IN_MONTHS -> j
    boolean parse(java.lang.String,org.geometerplus.fbreader.network.atom.ATOMDateConstruct) -> a
    void appendChars$3fb042fc(java.lang.StringBuilder,int) -> a
    java.lang.String toString() -> toString
    int daysInMonth(int,int) -> a
    int compareTo(org.geometerplus.fbreader.network.atom.ATOMDateConstruct) -> a
    boolean equals(java.lang.Object) -> equals
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.fbreader.network.atom.ATOMEntry -> org.geometerplus.a.a.e.c:
    org.geometerplus.fbreader.network.atom.ATOMId Id -> a
    java.util.LinkedList Authors -> b
    java.util.LinkedList Categories -> c
    java.util.LinkedList Contributors -> j
    java.util.LinkedList Links -> d
    org.geometerplus.fbreader.network.atom.ATOMPublished Published -> e
    java.lang.CharSequence Summary -> f
    java.lang.CharSequence Content -> g
    java.lang.CharSequence Title -> h
    org.geometerplus.fbreader.network.atom.ATOMUpdated Updated -> i
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMFeedHandler -> org.geometerplus.a.a.e.n:
    void processFeedStart() -> a
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
    void processFeedEnd() -> b
org.geometerplus.fbreader.network.atom.ATOMFeedMetadata -> org.geometerplus.a.a.e.h:
    org.geometerplus.fbreader.network.atom.ATOMId Id -> d
    java.util.LinkedList Authors -> e
    java.util.LinkedList Categories -> f
    org.geometerplus.fbreader.network.atom.ATOMIcon Icon -> g
    java.util.LinkedList Links -> h
    java.lang.CharSequence Subtitle -> i
    java.lang.CharSequence Title -> j
    org.geometerplus.fbreader.network.atom.ATOMUpdated Updated -> k
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMIcon -> org.geometerplus.a.a.e.f:
    java.lang.String Uri -> a
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMId -> org.geometerplus.a.a.e.p:
    java.lang.String Uri -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMLink -> org.geometerplus.a.a.e.d:
    java.lang.String getHref() -> a
    java.lang.String getRel() -> b
    java.lang.String getType() -> c
    java.lang.String getTitle() -> d
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMPersonConstruct -> org.geometerplus.a.a.e.k:
    java.lang.String Name -> a
    java.lang.String Uri -> b
    java.lang.String Email -> c
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.atom.ATOMPublished -> org.geometerplus.a.a.e.i:
org.geometerplus.fbreader.network.atom.ATOMUpdated -> org.geometerplus.a.a.e.e:
org.geometerplus.fbreader.network.atom.ATOMXMLReader -> org.geometerplus.a.a.e.j:
    org.geometerplus.fbreader.network.atom.ATOMFeedHandler myFeedHandler -> c
    org.geometerplus.fbreader.network.atom.ATOMFeedMetadata myFeed -> d
    org.geometerplus.fbreader.network.atom.ATOMEntry myEntry -> e
    org.geometerplus.fbreader.network.atom.ATOMAuthor myAuthor -> f
    org.geometerplus.fbreader.network.atom.ATOMId myId -> g
    org.geometerplus.fbreader.network.atom.ATOMLink myLink -> h
    org.geometerplus.fbreader.network.atom.ATOMCategory myCategory -> i
    org.geometerplus.fbreader.network.atom.ATOMUpdated myUpdated -> j
    org.geometerplus.fbreader.network.atom.ATOMPublished myPublished -> k
    org.geometerplus.fbreader.network.atom.ATOMIcon myIcon -> l
    java.util.Map myNamespaceMap -> m
    int myState -> a
    java.lang.StringBuilder myBuffer -> n
    org.geometerplus.fbreader.network.atom.FormattedBuffer myFormattedBuffer -> b
    boolean myFeedMetadataProcessed -> o
    org.geometerplus.fbreader.network.atom.ATOMFeedHandler getATOMFeedHandler() -> e
    org.geometerplus.fbreader.network.atom.ATOMFeedMetadata getATOMFeed() -> f
    org.geometerplus.fbreader.network.atom.ATOMEntry getATOMEntry() -> g
    org.geometerplus.fbreader.network.atom.ATOMLink getATOMLink() -> h
    boolean processNamespaces() -> c
    void namespaceMapChangedHandler(java.util.Map) -> a
    java.lang.String getNamespace(java.lang.String) -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    java.lang.String extractBufferContent() -> a
    org.geometerplus.fbreader.network.atom.ATOMFeedMetadata createFeed(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> c
    org.geometerplus.fbreader.network.atom.ATOMLink createLink(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    org.geometerplus.fbreader.network.atom.ATOMEntry createEntry(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> b
    boolean startElementHandler(java.lang.String,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String) -> a
    boolean endElementHandler(java.lang.String,java.lang.String,java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    void setFormattingType(java.lang.String) -> c
org.geometerplus.fbreader.network.atom.FormattedBuffer -> org.geometerplus.a.a.e.l:
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type myType -> a
    java.lang.StringBuilder myBuffer -> b
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$atom$FormattedBuffer$Type -> c
    void appendText(java.lang.CharSequence) -> a
    void appendStartTag(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    void appendEndTag(java.lang.String) -> a
    void reset(org.geometerplus.fbreader.network.atom.FormattedBuffer$Type) -> a
    void reset() -> a
    java.lang.CharSequence getText() -> b
    java.lang.String toString() -> toString
    int[] $SWITCH_TABLE$org$geometerplus$fbreader$network$atom$FormattedBuffer$Type() -> c
org.geometerplus.fbreader.network.atom.FormattedBuffer$Type -> org.geometerplus.a.a.e.o:
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type Text -> a
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type Html -> b
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type XHtml -> c
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type[] ENUM$VALUES -> d
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type[] values() -> values
    org.geometerplus.fbreader.network.atom.FormattedBuffer$Type valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager -> org.geometerplus.a.a.a.a:
    java.util.HashMap ourManagers -> d
    org.geometerplus.fbreader.network.INetworkLink Link -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption UserNameOption -> b
    java.lang.String SSLCertificate -> c
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager createManager$63066561(org.geometerplus.fbreader.network.INetworkLink,java.lang.Class) -> a
    boolean isAuthorised(boolean) -> a
    void authorise(java.lang.String) -> a
    void logOut() -> a
    org.geometerplus.fbreader.network.urlInfo.BookUrlInfo downloadReference(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    boolean mayBeAuthorised(boolean) -> b
    java.lang.String currentUserName() -> b
    boolean needsInitialization() -> c
    void initialize() -> d
    boolean needPurchase(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    void purchaseBook(org.geometerplus.fbreader.network.NetworkBookItem) -> c
    java.util.List purchasedBooks() -> e
    java.lang.String currentAccount() -> f
    java.lang.String topupLink() -> g
    java.util.Map getTopupData() -> h
    void initUser(java.lang.String,java.lang.String) -> a
org.geometerplus.fbreader.network.authentication.litres.ByAuthorCatalogItem -> org.geometerplus.a.a.a.a.b:
    java.util.Comparator getComparator() -> a
    java.lang.String getStringId() -> b
org.geometerplus.fbreader.network.authentication.litres.ByDateCatalogItem -> org.geometerplus.a.a.a.a.c:
    java.util.Comparator getComparator() -> a
    java.lang.String getStringId() -> b
org.geometerplus.fbreader.network.authentication.litres.BySeriesCatalogItem -> org.geometerplus.a.a.a.a.g:
    java.util.Comparator getComparator() -> a
    boolean accepts(org.geometerplus.fbreader.network.NetworkItem) -> a
    java.lang.String getStringId() -> b
org.geometerplus.fbreader.network.authentication.litres.BySeriesCatalogItem$1 -> org.geometerplus.a.a.a.a.i:
    org.geometerplus.fbreader.network.authentication.litres.BySeriesCatalogItem this$0 -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.network.authentication.litres.ByTitleCatalogItem -> org.geometerplus.a.a.a.a.m:
    java.util.Comparator getComparator() -> a
    java.lang.String getStringId() -> b
org.geometerplus.fbreader.network.authentication.litres.ByTitleCatalogItem$1 -> org.geometerplus.a.a.a.a.l:
    org.geometerplus.fbreader.network.authentication.litres.ByTitleCatalogItem this$0 -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationManager -> org.geometerplus.a.a.a.a.o:
    boolean mySidChecked -> d
    org.geometerplus.zlibrary.core.options.ZLStringOption mySidUserNameOption -> e
    org.geometerplus.zlibrary.core.options.ZLStringOption mySidOption -> f
    org.geometerplus.zlibrary.core.options.ZLStringOption myUserIdOption -> g
    java.lang.String myInitializedDataSid -> h
    java.lang.String myAccount -> i
    java.util.Map myPurchasedBookMap -> j
    java.util.List myPurchasedBookList -> k
    void initUser(java.lang.String,java.lang.String) -> a
    void initUser(java.lang.String,java.lang.String,java.lang.String) -> a
    void logOut() -> a
    boolean isAuthorised(boolean) -> a
    void authorise(java.lang.String) -> a
    org.geometerplus.fbreader.network.urlInfo.BookUrlInfo downloadReference(org.geometerplus.fbreader.network.NetworkBookItem) -> a
    java.lang.String currentUserName() -> b
    boolean needPurchase(org.geometerplus.fbreader.network.NetworkBookItem) -> b
    void purchaseBook(org.geometerplus.fbreader.network.NetworkBookItem) -> c
    java.lang.String topupLink() -> g
    java.lang.String currentAccount() -> f
    void reloadPurchasedBooks() -> i
    java.util.List purchasedBooks() -> e
    boolean needsInitialization() -> c
    void initialize() -> d
    org.geometerplus.fbreader.network.authentication.litres.LitResNetworkRequest loadPurchasedBooks() -> j
    void loadPurchasedBooksOnSuccess(org.geometerplus.fbreader.network.authentication.litres.LitResNetworkRequest) -> a
    java.util.Map getTopupData() -> h
org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationXMLReader -> org.geometerplus.a.a.a.a.e:
    java.lang.String HostName -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkException myException -> b
    void setException(org.geometerplus.zlibrary.core.network.ZLNetworkException) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkException getException() -> a
org.geometerplus.fbreader.network.authentication.litres.LitResBookshelfItem -> org.geometerplus.a.a.a.a.p:
    boolean myForceReload -> d
    void onDisplayItem() -> e
    void loadChildren(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResLoginXMLReader -> org.geometerplus.a.a.a.a.f:
    java.lang.String FirstName -> d
    java.lang.String LastName -> e
    java.lang.String UserId -> b
    java.lang.String Sid -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResNetworkRequest -> org.geometerplus.a.a.a.a.h:
    org.geometerplus.fbreader.network.authentication.litres.LitResAuthenticationXMLReader Reader -> a
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResPurchaseXMLReader -> org.geometerplus.a.a.a.a.j:
    java.lang.String Account -> b
    java.lang.String BookId -> c
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResRecommendationsItem -> org.geometerplus.a.a.a.a.a:
    java.lang.String getCatalogUrl() -> a
org.geometerplus.fbreader.network.authentication.litres.LitResUtil -> org.geometerplus.a.a.a.a.n:
    java.lang.String url(org.geometerplus.fbreader.network.INetworkLink,java.lang.String) -> a
org.geometerplus.fbreader.network.authentication.litres.LitResXMLReader -> org.geometerplus.a.a.a.a.k:
    org.geometerplus.fbreader.network.INetworkLink Link -> c
    java.util.List Books -> b
    int myIndex -> d
    java.lang.String myBookId -> e
    java.lang.String myTitle -> f
    java.lang.String mySeriesTitle -> g
    int myIndexInSeries -> h
    java.lang.CharSequence mySummary -> i
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection myUrls -> j
    java.lang.String myAuthorFirstName -> k
    java.lang.String myAuthorMiddleName -> l
    java.lang.String myAuthorLastName -> m
    java.util.LinkedList myAuthors -> n
    java.util.LinkedList myTags -> o
    int myState -> p
    java.lang.StringBuilder myBuffer -> q
    org.geometerplus.fbreader.network.atom.FormattedBuffer myAnnotationBuffer -> r
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
org.geometerplus.fbreader.network.authentication.litres.SortedCatalogItem -> org.geometerplus.a.a.a.a.d:
    java.util.List myChildren -> d
    boolean isEmpty() -> g
    java.util.Comparator getComparator() -> a
    boolean accepts(org.geometerplus.fbreader.network.NetworkItem) -> a
    void onDisplayItem() -> e
    void loadChildren(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
org.geometerplus.fbreader.network.opds.BasketItem -> org.geometerplus.a.a.b.n:
    java.lang.String getCatalogUrl() -> a
org.geometerplus.fbreader.network.opds.DCDate -> org.geometerplus.a.a.b.aa:
org.geometerplus.fbreader.network.opds.OPDSBookItem -> org.geometerplus.a.a.b.e:
    boolean myInformationIsFull -> h
    java.lang.CharSequence getAnnotation(org.geometerplus.fbreader.network.opds.OPDSEntry) -> b
    java.util.List getAuthors(org.geometerplus.fbreader.network.opds.OPDSEntry) -> c
    java.util.List getTags(org.geometerplus.fbreader.network.opds.OPDSEntry) -> d
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection getUrls(org.geometerplus.fbreader.network.opds.OPDSNetworkLink,org.geometerplus.fbreader.network.opds.OPDSEntry,java.lang.String) -> b
    void collectReferences(org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection,org.geometerplus.fbreader.network.opds.OPDSLink,java.lang.String,org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type,java.lang.String,boolean) -> a
    int formatByMimeType(org.geometerplus.zlibrary.core.util.MimeType) -> a
    boolean isFullyLoaded() -> a
    void loadFullInformation() -> b
    org.geometerplus.fbreader.network.NetworkCatalogItem createRelatedCatalogItem(org.geometerplus.fbreader.network.urlInfo.RelatedUrlInfo) -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection access$1(org.geometerplus.fbreader.network.opds.OPDSNetworkLink,org.geometerplus.fbreader.network.opds.OPDSEntry,java.lang.String) -> a
    void access$2(org.geometerplus.fbreader.network.opds.OPDSBookItem,org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection) -> a
    java.lang.CharSequence access$3(org.geometerplus.fbreader.network.opds.OPDSEntry) -> a
    void access$4(org.geometerplus.fbreader.network.opds.OPDSBookItem,java.lang.CharSequence) -> a
    void access$5$2db442cc(org.geometerplus.fbreader.network.opds.OPDSBookItem) -> a
org.geometerplus.fbreader.network.opds.OPDSBookItem$1 -> org.geometerplus.a.a.b.c:
    org.geometerplus.fbreader.network.opds.OPDSBookItem this$0 -> a
    java.lang.String val$url -> e
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSBookItem$SingleEntryFeedHandler -> org.geometerplus.a.a.b.a:
    java.lang.String myUrl -> a
    org.geometerplus.fbreader.network.opds.OPDSBookItem this$0 -> b
    void processFeedStart() -> a
    void processFeedEnd() -> b
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.network.opds.OPDSCatalogInfoHandler -> org.geometerplus.a.a.b.k:
    boolean FeedStarted -> a
    java.lang.String Icon -> b
    java.lang.CharSequence Title -> c
    java.lang.CharSequence Summary -> d
    org.geometerplus.fbreader.network.opds.OpenSearchDescription DirectOpenSearchDescription -> e
    java.util.List myOpensearchDescriptionURLs -> f
    java.lang.String myBaseURL -> g
    org.geometerplus.fbreader.network.opds.OPDSNetworkLink myLink -> h
    void processFeedStart() -> a
    void processFeedEnd() -> b
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.network.opds.OPDSCatalogItem -> org.geometerplus.a.a.b.b:
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State myLoadingState -> d
    java.util.Map myExtraData -> e
    void doLoadChildren(org.geometerplus.zlibrary.core.network.ZLNetworkRequest) -> a
    java.util.Map extraData() -> c
    java.lang.String getCatalogUrl() -> a
    void loadChildren(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
    boolean supportsResumeLoading() -> d
    void resumeLoading(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> b
org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State -> org.geometerplus.a.a.b.u:
    java.lang.String LastLoadedId -> d
    java.util.HashSet LoadedIds -> e
org.geometerplus.fbreader.network.opds.OPDSCustomLink -> org.geometerplus.a.a.b.r:
    int myId -> d
    boolean myHasChanges -> e
    int getId() -> a
    void setId(int) -> a
    boolean hasChanges() -> d
    void resetChanges() -> e
    void setSummary(java.lang.String) -> b
    void setTitle(java.lang.String) -> a
    void setUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type,java.lang.String) -> a
    boolean isObsolete$1349f3() -> c
    void reloadInfo(boolean) -> a
    void access$0(org.geometerplus.fbreader.network.opds.OPDSCustomLink,java.lang.String) -> a
    void access$1(org.geometerplus.fbreader.network.opds.OPDSCustomLink,java.lang.String) -> b
org.geometerplus.fbreader.network.opds.OPDSCustomLink$1 -> org.geometerplus.a.a.b.q:
    org.geometerplus.fbreader.network.opds.OPDSCustomLink this$0 -> a
    java.util.LinkedList val$opensearchDescriptionURLs -> e
    java.util.List val$descriptions -> f
    boolean val$urlsOnly -> g
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSCustomLink$2 -> org.geometerplus.a.a.b.p:
    org.geometerplus.fbreader.network.opds.OPDSCustomLink this$0 -> a
    java.util.List val$descriptions -> e
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSEntry -> org.geometerplus.a.a.b.z:
    java.lang.String DCLanguage -> j
    java.lang.String DCPublisher -> k
    org.geometerplus.fbreader.network.opds.DCDate DCIssued -> l
    java.lang.String SeriesTitle -> m
    float SeriesIndex -> n
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.opds.OPDSFeedHandler -> org.geometerplus.a.a.b.g:
    java.lang.String myBaseURL -> a
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State myData -> b
    int myIndex -> c
    java.lang.String myNextURL -> d
    java.lang.String mySkipUntilId -> e
    boolean myFoundNewIds -> f
    int myItemsToLoad -> g
    void processFeedStart() -> a
    void processFeedEnd() -> b
    boolean tryInterrupt() -> c
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.network.opds.OPDSFeedMetadata -> org.geometerplus.a.a.b.s:
    int OpensearchTotalResults -> a
    int OpensearchItemsPerPage -> b
    int OpensearchStartIndex -> c
org.geometerplus.fbreader.network.opds.OPDSLink -> org.geometerplus.a.a.b.m:
    java.util.LinkedList Prices -> a
    java.util.LinkedList Formats -> b
    org.geometerplus.fbreader.network.opds.OPDSPrice getPrice(java.lang.String) -> b
    org.geometerplus.fbreader.network.opds.OPDSPrice selectBestPrice() -> e
org.geometerplus.fbreader.network.opds.OPDSLinkReader -> org.geometerplus.a.a.b.o:
    void loadOPDSLinks(int,org.geometerplus.fbreader.network.NetworkLibrary$OnNewLinkListener) -> a
org.geometerplus.fbreader.network.opds.OPDSLinkReader$1 -> org.geometerplus.a.a.b.w:
    org.geometerplus.fbreader.network.NetworkLibrary$OnNewLinkListener val$listener -> a
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSLinkXMLReader -> org.geometerplus.a.a.b.j:
    org.geometerplus.fbreader.network.atom.ATOMUpdated getUpdatedTime() -> a
    boolean startElementHandler(java.lang.String,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String) -> a
org.geometerplus.fbreader.network.opds.OPDSLinkXMLReader$FeedHandler -> org.geometerplus.a.a.b.v:
    org.geometerplus.fbreader.network.NetworkLibrary$OnNewLinkListener myListener -> a
    java.lang.String myAuthenticationType -> b
    boolean myHasStableIdentifiers -> c
    java.util.LinkedList myUrlRewritingRules -> d
    java.util.HashMap myRelationAliases -> e
    java.util.LinkedHashMap myExtraData -> f
    org.geometerplus.fbreader.network.atom.ATOMUpdated myUpdatedTime -> g
    org.geometerplus.fbreader.network.atom.ATOMUpdated myReadAfterTime -> h
    void setAuthenticationType(java.lang.String) -> a
    void setHasStableIdentifiers$1385ff() -> c
    void addUrlRewritingRule(org.geometerplus.fbreader.network.opds.URLRewritingRule) -> a
    void addRelationAlias(org.geometerplus.fbreader.network.opds.RelationAlias,java.lang.String) -> a
    void putExtraData(java.lang.String,java.lang.String) -> a
    void clear() -> d
    org.geometerplus.fbreader.network.atom.ATOMUpdated getUpdatedTime() -> e
    void processFeedStart() -> a
    void processFeedEnd() -> b
    boolean processFeedMetadata(org.geometerplus.fbreader.network.atom.ATOMFeedMetadata,boolean) -> a
    boolean processFeedEntry(org.geometerplus.fbreader.network.atom.ATOMEntry) -> a
org.geometerplus.fbreader.network.opds.OPDSNetworkLink -> org.geometerplus.a.a.b.i:
    java.util.TreeMap myRelationAliases -> d
    java.util.TreeMap myUrlConditions -> e
    java.util.LinkedList myUrlRewritingRules -> f
    java.util.Map myExtraData -> g
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager myAuthenticationManager -> h
    boolean myHasStableIdentifiers -> i
    void setRelationAliases(java.util.Map) -> a
    void setUrlConditions(java.util.Map) -> b
    void setUrlRewritingRules(java.util.List) -> a
    void setExtraData(java.util.Map) -> c
    void setAuthenticationManager(org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest createNetworkData(java.lang.String,org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State) -> a
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State createOperationData(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> b
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest simpleSearchRequest(java.lang.String,org.geometerplus.fbreader.network.NetworkOperationData) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkRequest resume(org.geometerplus.fbreader.network.NetworkOperationData) -> a
    org.geometerplus.fbreader.network.NetworkCatalogItem libraryItem() -> n
    org.geometerplus.fbreader.network.authentication.NetworkAuthenticationManager authenticationManager() -> o
    java.lang.String rewriteUrl(java.lang.String,boolean) -> a
    org.geometerplus.fbreader.network.NetworkCatalogItem$Accessibility getCondition(java.lang.String) -> c
    java.lang.String relation(java.lang.String,org.geometerplus.zlibrary.core.util.MimeType) -> a
    java.lang.String toString() -> toString
    org.geometerplus.fbreader.network.NetworkOperationData createOperationData(org.geometerplus.fbreader.network.NetworkOperationData$OnNewItemListener) -> a
    boolean access$1(org.geometerplus.fbreader.network.opds.OPDSNetworkLink) -> a
org.geometerplus.fbreader.network.opds.OPDSNetworkLink$1 -> org.geometerplus.a.a.b.d:
    org.geometerplus.fbreader.network.opds.OPDSNetworkLink this$0 -> a
    org.geometerplus.fbreader.network.opds.OPDSCatalogItem$State val$result -> e
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.fbreader.network.opds.OPDSPrice -> org.geometerplus.a.a.b.h:
    java.lang.String Price -> a
    java.lang.String Currency -> b
org.geometerplus.fbreader.network.opds.OPDSXMLReader -> org.geometerplus.a.a.b.l:
    org.geometerplus.fbreader.network.opds.DCDate myDCIssued -> c
    java.lang.String myPriceCurrency -> d
    boolean startElementHandler(java.lang.String,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String) -> a
    boolean endElementHandler(java.lang.String,java.lang.String,java.lang.String) -> a
    org.geometerplus.fbreader.network.atom.ATOMLink createLink(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    org.geometerplus.fbreader.network.atom.ATOMEntry createEntry(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> b
    org.geometerplus.fbreader.network.atom.ATOMFeedMetadata createFeed(org.geometerplus.zlibrary.core.xml.ZLStringMap) -> c
org.geometerplus.fbreader.network.opds.OpenSearchDescription -> org.geometerplus.a.a.b.x:
    java.lang.String Template -> a
    int IndexOffset -> b
    int PageOffset -> c
    int ItemsPerPage -> d
    org.geometerplus.fbreader.network.opds.OpenSearchDescription createDefault(java.lang.String) -> a
    boolean isValid() -> a
    java.lang.String makeQuery(java.lang.String) -> b
org.geometerplus.fbreader.network.opds.OpenSearchXMLReader -> org.geometerplus.a.a.b.t:
    java.util.List myDescriptions -> a
    java.lang.String myBaseURL -> b
    java.lang.String myOpenSearchNamespaceId -> c
    int myState -> d
    boolean processNamespaces() -> c
    void namespaceMapChangedHandler(java.util.Map) -> a
    int parseInt(java.lang.String) -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.fbreader.network.opds.RelationAlias -> org.geometerplus.a.a.b.f:
    java.lang.String Alias -> a
    java.lang.String Type -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.fbreader.network.opds.URLRewritingRule -> org.geometerplus.a.a.b.y:
    int myType -> a
    int myApply -> b
    java.util.HashMap myParameters -> c
    int whereToApply() -> a
    java.lang.String apply(java.lang.String) -> a
org.geometerplus.fbreader.network.tree.AddCustomCatalogItemTree -> org.geometerplus.a.a.c.c:
    java.lang.String getName() -> a
    java.lang.String getSummary() -> c
    org.geometerplus.fbreader.network.NetworkItem getHoldedItem() -> e
    java.lang.String getStringId() -> f
org.geometerplus.fbreader.network.tree.NetworkAuthorTree -> org.geometerplus.a.a.c.i:
    org.geometerplus.fbreader.network.NetworkBookItem$AuthorData Author -> a
    int myBooksNumber -> d
    java.util.HashMap mySeriesMap -> e
    java.lang.String getName() -> a
    java.lang.String getSortKey() -> b
    void updateSubTrees(java.util.LinkedList) -> a
    org.geometerplus.fbreader.network.NetworkItem getHoldedItem() -> e
    java.lang.String getStringId() -> f
org.geometerplus.fbreader.network.tree.NetworkBookTree -> org.geometerplus.a.a.c.a:
    org.geometerplus.fbreader.network.NetworkBookItem Book -> a
    boolean myShowAuthors -> d
    java.lang.String getName() -> a
    java.lang.String getSummary() -> c
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> d
    org.geometerplus.fbreader.network.NetworkItem getHoldedItem() -> e
    java.lang.String getStringId() -> f
org.geometerplus.fbreader.network.tree.NetworkCatalogRootTree -> org.geometerplus.a.a.c.e:
org.geometerplus.fbreader.network.tree.NetworkCatalogTree -> org.geometerplus.a.a.c.j:
    org.geometerplus.fbreader.network.NetworkCatalogItem Item -> a
    java.util.ArrayList ChildrenItems -> d
    long myLoadedTime -> e
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3 -> f
    java.lang.String getName() -> a
    java.lang.String getSummary() -> c
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> d
    boolean isContentValid() -> q
    void updateLoadedTime() -> r
    void updateVisibility() -> s
    org.geometerplus.fbreader.network.NetworkItem getHoldedItem() -> e
    void removeItems(java.util.Set) -> a
    java.lang.String getStringId() -> f
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3() -> t
org.geometerplus.fbreader.network.tree.NetworkSeriesTree -> org.geometerplus.a.a.c.d:
    java.lang.String SeriesTitle -> a
    boolean myShowAuthors -> d
    java.lang.String getName() -> a
    java.lang.String getSummary() -> c
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> d
    org.geometerplus.fbreader.network.NetworkItem getHoldedItem() -> e
    void removeItems(java.util.Set) -> a
    java.lang.String getStringId() -> f
org.geometerplus.fbreader.network.tree.NetworkTreeFactory -> org.geometerplus.a.a.c.h:
    org.geometerplus.fbreader.network.NetworkTree createNetworkTree(org.geometerplus.fbreader.network.tree.NetworkCatalogTree,org.geometerplus.fbreader.network.NetworkItem,int) -> a
org.geometerplus.fbreader.network.tree.RootTree -> org.geometerplus.a.a.c.b:
    java.lang.String myId -> a
    java.lang.String getName() -> a
    org.geometerplus.fbreader.network.NetworkItem getHoldedItem() -> e
    java.lang.String getStringId() -> f
org.geometerplus.fbreader.network.tree.SearchItemTree -> org.geometerplus.a.a.c.g:
    org.geometerplus.fbreader.network.SearchResult myResult -> a
    java.lang.String getName() -> a
    java.lang.String getSummary() -> c
    void setSearchResult(org.geometerplus.fbreader.network.SearchResult) -> a
    org.geometerplus.fbreader.network.SearchResult getSearchResult() -> q
    void updateSubTrees() -> r
    org.geometerplus.fbreader.network.NetworkItem getHoldedItem() -> e
    java.lang.String getStringId() -> f
org.geometerplus.fbreader.network.tree.TopUpTree -> org.geometerplus.a.a.c.f:
    org.geometerplus.fbreader.network.TopUpItem Item -> a
    java.lang.String getName() -> a
    java.lang.String getSummary() -> c
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> d
    java.lang.String getStringId() -> f
    org.geometerplus.fbreader.network.NetworkItem getHoldedItem() -> e
org.geometerplus.fbreader.network.urlInfo.BookBuyUrlInfo -> org.geometerplus.a.a.d.b:
    java.lang.String Price -> c
    java.lang.String price(java.lang.String,java.lang.String) -> a
org.geometerplus.fbreader.network.urlInfo.BookUrlInfo -> org.geometerplus.a.a.d.h:
    int BookFormat -> d
    java.lang.String makeBookFileName(java.lang.String,int,org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    java.lang.String cleanUrl() -> a
    java.lang.String localCopyFileName(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    java.lang.String toString() -> toString
org.geometerplus.fbreader.network.urlInfo.DecoratedBookUrlInfo -> org.geometerplus.a.a.d.d:
    java.lang.String myCleanUrl -> c
    java.lang.String cleanUrl() -> a
org.geometerplus.fbreader.network.urlInfo.RelatedUrlInfo -> org.geometerplus.a.a.d.c:
    java.lang.String Title -> c
    org.geometerplus.zlibrary.core.util.MimeType Mime -> d
org.geometerplus.fbreader.network.urlInfo.UrlInfo -> org.geometerplus.a.a.d.a:
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type InfoType -> a
    java.lang.String Url -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type -> org.geometerplus.a.a.d.e:
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Catalog -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type HtmlPage -> b
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type SingleEntry -> c
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Related -> d
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Image -> e
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Thumbnail -> f
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Search -> g
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type SignIn -> h
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type SignOut -> i
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type SignUp -> j
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type TopUp -> k
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type RecoverPassword -> l
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Book -> m
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookConditional -> n
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookDemo -> o
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookFullOrDemo -> p
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookBuy -> q
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type BookBuyInBrowser -> r
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type TOC -> s
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type Comments -> t
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type[] ENUM$VALUES -> u
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type[] values() -> values
    org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type valueOf(java.lang.String) -> valueOf
org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection -> org.geometerplus.a.a.d.f:
    java.util.LinkedList myInfos -> a
    void upgrade(org.geometerplus.fbreader.network.urlInfo.UrlInfoCollection) -> a
    void addInfo(org.geometerplus.fbreader.network.urlInfo.UrlInfo) -> a
    org.geometerplus.fbreader.network.urlInfo.UrlInfo getInfo(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> a
    java.util.List getAllInfos() -> a
    java.util.List getAllInfos(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> b
    java.lang.String getUrl(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> c
    void clear() -> b
    void removeAllInfos(org.geometerplus.fbreader.network.urlInfo.UrlInfo$Type) -> d
    boolean isEmpty() -> c
org.geometerplus.fbreader.network.urlInfo.UrlInfoWithDate -> org.geometerplus.a.a.d.g:
    org.geometerplus.fbreader.network.urlInfo.UrlInfoWithDate NULL -> c
    java.util.Date Updated -> d
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.fbreader.tree.FBTree -> org.geometerplus.a.f.a:
    org.geometerplus.zlibrary.core.image.ZLImage myCover -> a
    boolean myCoverRequested -> d
    java.lang.String mySecondString -> e
    java.lang.String getName() -> a
    java.lang.String getSortKey() -> b
    int compareTo(org.geometerplus.fbreader.tree.FBTree) -> a
    void sortAllChildren() -> m
    void invalidateChildren() -> n
    java.lang.String getSecondString() -> o
    java.lang.String getSummary() -> c
    org.geometerplus.zlibrary.core.image.ZLImage createCover() -> d
    org.geometerplus.zlibrary.core.image.ZLImage getCover() -> p
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.zlibrary.core.application.ZLApplication -> org.geometerplus.zlibrary.a.c.c:
    org.geometerplus.zlibrary.core.application.ZLApplication ourInstance -> a
    org.geometerplus.zlibrary.core.application.ZLApplicationWindow myWindow -> b
    org.geometerplus.zlibrary.core.view.ZLView myView -> c
    java.util.HashMap myIdToActionMap -> d
    java.util.List myPanels -> e
    java.util.Timer myTimer -> f
    java.util.HashMap myTimerTaskPeriods -> g
    java.util.HashMap myTimerTasks -> h
    org.geometerplus.zlibrary.core.application.ZLApplication Instance() -> a
    void setView(org.geometerplus.zlibrary.core.view.ZLView) -> a
    org.geometerplus.zlibrary.core.view.ZLView getCurrentView() -> b
    void setWindow(org.geometerplus.zlibrary.core.application.ZLApplicationWindow) -> a
    void initWindow() -> c
    org.geometerplus.zlibrary.core.view.ZLViewWidget getViewWidget() -> d
    void onRepaintFinished() -> e
    void onViewChanged() -> f
    void addAction(java.lang.String,org.geometerplus.zlibrary.core.application.ZLApplication$ZLAction) -> a
    boolean isActionVisible(java.lang.String) -> a
    boolean isActionEnabled(java.lang.String) -> b
    void doAction(java.lang.String) -> c
    void doActionWithCoordinates(java.lang.String,int,int) -> a
    org.geometerplus.zlibrary.core.application.ZLKeyBindings keyBindings() -> g
    boolean doActionByKey(java.lang.String,boolean) -> a
    void rotateScreen() -> h
    boolean canRotateScreen() -> i
    boolean closeWindow() -> j
    void onWindowClosing() -> k
    void openFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    java.util.List buttonPanels() -> l
    void registerButtonPanel(org.geometerplus.zlibrary.core.application.ZLApplication$ButtonPanel) -> a
    int getBatteryLevel() -> m
    void addTimerTaskInternal(java.lang.Runnable,long) -> a
    void startTimer() -> n
    void stopTimer() -> o
    void addTimerTask$574944f(java.lang.Runnable) -> a
    void removeTimerTask(java.lang.Runnable) -> b
org.geometerplus.zlibrary.core.application.ZLApplication$ButtonPanel -> org.geometerplus.zlibrary.a.c.f:
    void updateStates() -> b
    void hide() -> a
org.geometerplus.zlibrary.core.application.ZLApplication$MyTimerTask -> org.geometerplus.zlibrary.a.c.g:
    java.lang.Runnable myRunnable -> a
    void run() -> run
org.geometerplus.zlibrary.core.application.ZLApplication$ZLAction -> org.geometerplus.zlibrary.a.c.d:
    boolean isVisible() -> c
    boolean isEnabled() -> a
    boolean checkAndRun() -> d
    void run() -> b
    void runWithCoordinates(int,int) -> a
org.geometerplus.zlibrary.core.application.ZLApplicationWindow -> org.geometerplus.zlibrary.a.c.a:
    org.geometerplus.zlibrary.core.application.ZLApplication myApplication -> a
    org.geometerplus.zlibrary.core.application.ZLApplication getApplication() -> a
    void refreshMenu() -> b
    org.geometerplus.zlibrary.core.view.ZLViewWidget getViewWidget() -> c
    void rotate() -> d
    boolean canRotate() -> e
    void close() -> f
    int getBatteryLevel() -> g
org.geometerplus.zlibrary.core.application.ZLKeyBindings -> org.geometerplus.zlibrary.a.c.b:
    java.lang.String myName -> a
    org.geometerplus.zlibrary.core.options.ZLStringListOption myKeysOption -> b
    java.util.TreeMap myActionMap -> c
    java.util.TreeMap myLongPressActionMap -> d
    org.geometerplus.zlibrary.core.options.ZLStringOption createOption(java.lang.String,boolean,java.lang.String) -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption getOption(java.lang.String,boolean) -> a
    java.lang.String getBinding(java.lang.String,boolean) -> b
    java.util.TreeMap access$0(org.geometerplus.zlibrary.core.application.ZLKeyBindings) -> a
    org.geometerplus.zlibrary.core.options.ZLStringOption access$1$2a1ebbf4(org.geometerplus.zlibrary.core.application.ZLKeyBindings,java.lang.String,java.lang.String) -> a
org.geometerplus.zlibrary.core.application.ZLKeyBindings$Reader -> org.geometerplus.zlibrary.a.c.e:
    java.util.List myKeyList -> a
    org.geometerplus.zlibrary.core.application.ZLKeyBindings this$0 -> b
    boolean dontCacheAttributeValues() -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.zlibrary.core.config.ZLConfig -> org.geometerplus.zlibrary.a.i.a:
    org.geometerplus.zlibrary.core.config.ZLConfig ourInstance -> a
    org.geometerplus.zlibrary.core.config.ZLConfig Instance() -> a
    java.lang.String getValue(java.lang.String,java.lang.String,java.lang.String) -> a
    void setValue(java.lang.String,java.lang.String,java.lang.String) -> b
    void unsetValue(java.lang.String,java.lang.String) -> a
    void removeGroup(java.lang.String) -> a
org.geometerplus.zlibrary.core.dialogs.ZLDialogManager -> org.geometerplus.zlibrary.a.q.a:
    org.geometerplus.zlibrary.core.dialogs.ZLDialogManager ourInstance -> a
    org.geometerplus.zlibrary.core.dialogs.ZLDialogManager Instance() -> a
    void wait(java.lang.String,java.lang.Runnable) -> a
org.geometerplus.zlibrary.core.encoding.ZLEncodingCollection -> org.geometerplus.zlibrary.a.p.a:
    org.geometerplus.zlibrary.core.encoding.ZLEncodingCollection ourInstance -> a
    java.util.HashMap myEncodingByAlias -> b
    org.geometerplus.zlibrary.core.encoding.ZLEncodingCollection Instance() -> a
    java.lang.String getEncodingName(int) -> a
    java.util.HashMap access$0(org.geometerplus.zlibrary.core.encoding.ZLEncodingCollection) -> a
org.geometerplus.zlibrary.core.encoding.ZLEncodingCollection$ZLEncodingCollectionReader -> org.geometerplus.zlibrary.a.p.b:
    java.lang.String myCurrentEncodingName -> a
    org.geometerplus.zlibrary.core.encoding.ZLEncodingCollection this$0 -> b
    boolean dontCacheAttributeValues() -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.zlibrary.core.filesystem.ZLArchiveEntryFile -> org.geometerplus.zlibrary.a.k.f:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myParent -> b
    java.lang.String myName -> c
    java.lang.String normalizeEntryName(java.lang.String) -> b
    org.geometerplus.zlibrary.core.filesystem.ZLArchiveEntryFile createArchiveEntryFile(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String) -> b
    java.util.List archiveEntries(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean exists() -> f
    boolean isDirectory() -> g
    java.lang.String getPath() -> a
    java.lang.String getLongName() -> b
    org.geometerplus.zlibrary.core.filesystem.ZLFile getParent() -> j
    org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile getPhysicalFile() -> c
org.geometerplus.zlibrary.core.filesystem.ZLFile -> org.geometerplus.zlibrary.a.k.e:
    java.util.HashMap ourCachedFiles -> b
    java.lang.String myExtension -> c
    java.lang.String myShortName -> d
    int myArchiveType -> a
    boolean myIsCached -> e
    void init() -> l
    org.geometerplus.zlibrary.core.filesystem.ZLFile createFile(org.geometerplus.zlibrary.core.filesystem.ZLFile,java.lang.String) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile createFileByPath(java.lang.String) -> a
    long size() -> d
    boolean exists() -> f
    boolean isDirectory() -> g
    java.lang.String getPath() -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile getParent() -> j
    org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile getPhysicalFile() -> c
    java.io.InputStream getInputStream() -> e
    boolean isReadable() -> h
    boolean isArchive() -> m
    java.lang.String getLongName() -> b
    java.lang.String getShortName() -> n
    java.lang.String getExtension() -> o
    java.util.List directoryEntries() -> k
    java.util.List children() -> p
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    boolean isCached() -> q
    void setCached(boolean) -> a
org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile -> org.geometerplus.zlibrary.a.k.c:
    java.io.File myFile -> b
    boolean exists() -> f
    long size() -> d
    boolean isDirectory() -> g
    boolean isReadable() -> h
    boolean delete() -> i
    java.lang.String getPath() -> a
    java.lang.String getLongName() -> b
    org.geometerplus.zlibrary.core.filesystem.ZLFile getParent() -> j
    org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile getPhysicalFile() -> c
    java.io.InputStream getInputStream() -> e
    java.util.List directoryEntries() -> k
org.geometerplus.zlibrary.core.filesystem.ZLResourceFile -> org.geometerplus.zlibrary.a.k.a:
    java.lang.String myPath -> b
    java.lang.String getPath() -> a
    java.lang.String getLongName() -> b
    org.geometerplus.zlibrary.core.filesystem.ZLPhysicalFile getPhysicalFile() -> c
org.geometerplus.zlibrary.core.filesystem.ZLZipEntryFile -> org.geometerplus.zlibrary.a.k.b:
    java.util.HashMap ourZipFileMap -> d
    java.util.List archiveEntries(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    org.amse.ys.zip.ZipFile getZipFile(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> c
    void removeFromCache(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> b
    long size() -> d
    java.io.InputStream getInputStream() -> e
org.geometerplus.zlibrary.core.filesystem.ZLZipEntryFile$1 -> org.geometerplus.zlibrary.a.k.d:
    org.geometerplus.zlibrary.core.filesystem.ZLFile val$file -> a
    java.io.InputStream getInputStream() -> a
org.geometerplus.zlibrary.core.filesystem.tar.ZLTarEntryFile -> org.geometerplus.zlibrary.a.k.a.c:
    java.util.List archiveEntries(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    long size() -> d
    java.io.InputStream getInputStream() -> e
org.geometerplus.zlibrary.core.filesystem.tar.ZLTarHeader -> org.geometerplus.zlibrary.a.k.a.b:
    java.lang.String Name -> a
    int Size -> b
    boolean IsRegularFile -> c
    java.lang.String getStringFromByteArray(byte[]) -> a
    boolean read(java.io.InputStream) -> a
org.geometerplus.zlibrary.core.filesystem.tar.ZLTarInputStream -> org.geometerplus.zlibrary.a.k.a.a:
    java.io.InputStream myBase -> a
    int read() -> read
    int read(byte[]) -> read
    int read(byte[],int,int) -> read
    long skip(long) -> skip
    int available() -> available
org.geometerplus.zlibrary.core.html.ZLByteBuffer -> org.geometerplus.zlibrary.a.h.b:
    byte[] myData -> a
    int myLength -> b
    java.lang.Object myConverterLock -> c
    char[] myConverterBuffer -> d
    java.lang.String myStringValue -> e
    boolean isEmpty() -> a
    void append(byte[],int,int) -> a
    void clear() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean equalsToLCString(java.lang.String) -> a
    java.lang.String toString(java.nio.charset.CharsetDecoder) -> a
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap -> org.geometerplus.zlibrary.a.h.e:
    org.geometerplus.zlibrary.core.html.ZLByteBuffer[] myKeys -> a
    org.geometerplus.zlibrary.core.html.ZLByteBuffer[] myValues -> b
    int mySize -> c
    void put(org.geometerplus.zlibrary.core.html.ZLByteBuffer,org.geometerplus.zlibrary.core.html.ZLByteBuffer) -> a
    org.geometerplus.zlibrary.core.html.ZLByteBuffer getValue(java.lang.String) -> a
    java.lang.String getStringValue(java.lang.String,java.nio.charset.CharsetDecoder) -> a
    void clear() -> a
org.geometerplus.zlibrary.core.html.ZLHtmlParser -> org.geometerplus.zlibrary.a.h.d:
    org.geometerplus.zlibrary.core.html.ZLHtmlReader myReader -> a
    java.io.InputStream myStream -> b
    org.geometerplus.zlibrary.core.html.ZLByteBuffer unique(java.util.HashMap,org.geometerplus.zlibrary.core.html.ZLByteBuffer) -> a
    void doIt() -> a
    void processStartTag(org.geometerplus.zlibrary.core.html.ZLHtmlReader,org.geometerplus.zlibrary.core.html.ZLByteBuffer,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
    void processEndTag(org.geometerplus.zlibrary.core.html.ZLHtmlReader,org.geometerplus.zlibrary.core.html.ZLByteBuffer) -> a
org.geometerplus.zlibrary.core.html.ZLHtmlProcessor -> org.geometerplus.zlibrary.a.h.c:
    boolean read(org.geometerplus.zlibrary.core.html.ZLHtmlReader,java.io.InputStream) -> a
org.geometerplus.zlibrary.core.html.ZLHtmlReader -> org.geometerplus.zlibrary.a.h.a:
    void startDocumentHandler() -> a
    void endDocumentHandler() -> b
    void startElementHandler(java.lang.String,int,org.geometerplus.zlibrary.core.html.ZLHtmlAttributeMap) -> a
    void endElementHandler(java.lang.String) -> a
    void byteDataHandler(byte[],int,int) -> a
    void entityDataHandler(java.lang.String) -> b
org.geometerplus.zlibrary.core.image.ZLBase64EncodedImage -> org.geometerplus.zlibrary.a.a.f:
    boolean myIsDecoded -> a
    byte decodeByte(byte) -> a
    java.lang.String getURI() -> d
    java.lang.String encodedFileName() -> c
    java.lang.String decodedFileName() -> e
    boolean isCacheValid(java.io.File) -> a
    void decode() -> f
    java.io.InputStream inputStream() -> a
org.geometerplus.zlibrary.core.image.ZLFileImage -> org.geometerplus.zlibrary.a.a.e:
    org.geometerplus.zlibrary.core.filesystem.ZLFile myFile -> a
    int myOffset -> b
    int myLength -> c
    java.lang.String getURI() -> d
    java.io.InputStream inputStream() -> a
org.geometerplus.zlibrary.core.image.ZLImage -> org.geometerplus.zlibrary.a.a.i:
    java.lang.String getURI() -> d
org.geometerplus.zlibrary.core.image.ZLImageData -> org.geometerplus.zlibrary.a.a.d:
org.geometerplus.zlibrary.core.image.ZLImageManager -> org.geometerplus.zlibrary.a.a.a:
    org.geometerplus.zlibrary.core.image.ZLImageManager ourInstance -> a
    int[][] PalmImage8bitColormap -> b
    org.geometerplus.zlibrary.core.image.ZLImageManager Instance() -> a
    org.geometerplus.zlibrary.core.image.ZLImageData getImageData(org.geometerplus.zlibrary.core.image.ZLImage) -> a
    void startImageLoading(org.geometerplus.zlibrary.core.image.ZLLoadableImage,java.lang.Runnable) -> a
org.geometerplus.zlibrary.core.image.ZLImageMap -> org.geometerplus.zlibrary.a.a.g:
    org.geometerplus.zlibrary.core.image.ZLImage getImage(java.lang.String) -> a
org.geometerplus.zlibrary.core.image.ZLImageProxy -> org.geometerplus.zlibrary.a.a.c:
    org.geometerplus.zlibrary.core.image.ZLSingleImage myImage -> a
    org.geometerplus.zlibrary.core.image.ZLSingleImage getRealImage() -> c
    java.lang.String getURI() -> d
    java.io.InputStream inputStream() -> a
    void synchronize() -> e
    void synchronizeFast() -> f
org.geometerplus.zlibrary.core.image.ZLLoadableImage -> org.geometerplus.zlibrary.a.a.h:
    boolean myIsSynchronized -> a
    boolean isSynchronized() -> i
    void setSynchronized() -> j
    void startSynchronization(java.lang.Runnable) -> a
    int sourceType() -> g
    void synchronize() -> e
    void synchronizeFast() -> f
    java.lang.String getId() -> h
org.geometerplus.zlibrary.core.image.ZLSingleImage -> org.geometerplus.zlibrary.a.a.b:
    org.geometerplus.zlibrary.core.util.MimeType myMimeType -> a
    java.io.InputStream inputStream() -> a
    org.geometerplus.zlibrary.core.util.MimeType mimeType() -> b
org.geometerplus.zlibrary.core.language.ZLLanguageUtil -> org.geometerplus.zlibrary.a.f.b:
    java.util.ArrayList ourLanguageCodes -> a
    java.util.List languageCodes() -> a
    java.lang.String languageName(java.lang.String) -> a
    java.lang.String languageByIntCode(int,int) -> a
org.geometerplus.zlibrary.core.language.ZLLanguageUtil$CodeComparator -> org.geometerplus.zlibrary.a.f.a:
    int compare(java.lang.Object,java.lang.Object) -> compare
org.geometerplus.zlibrary.core.library.ZLibrary -> org.geometerplus.zlibrary.a.m.a:
    org.geometerplus.zlibrary.core.library.ZLibrary ourImplementation -> a
    org.geometerplus.zlibrary.core.library.ZLibrary Instance() -> a
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(java.lang.String) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(org.geometerplus.zlibrary.core.filesystem.ZLResourceFile,java.lang.String) -> a
    java.lang.String getVersionName() -> b
    java.lang.String getCurrentTimeString() -> c
    void setScreenBrightness(int) -> a
    int getScreenBrightness() -> d
    int getDisplayDPI() -> e
    java.util.Collection defaultLanguageCodes() -> f
org.geometerplus.zlibrary.core.network.CookieDatabase -> org.geometerplus.zlibrary.a.l.c:
    org.geometerplus.zlibrary.core.network.CookieDatabase ourInstance -> a
    org.geometerplus.zlibrary.core.network.CookieDatabase getInstance() -> a
    void saveCookies(java.util.Collection) -> a
    java.util.Collection loadCookies() -> b
org.geometerplus.zlibrary.core.network.ZLNetworkException -> org.geometerplus.zlibrary.a.l.b:
    java.lang.String myCode -> a
    org.geometerplus.zlibrary.core.resources.ZLResource getResource() -> b
    java.lang.String getCode() -> a
org.geometerplus.zlibrary.core.network.ZLNetworkManager -> org.geometerplus.zlibrary.a.l.f:
    org.geometerplus.zlibrary.core.network.ZLNetworkManager ourManager -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkManager$CredentialsCreator myCredentialsCreator -> b
    org.apache.http.protocol.HttpContext myHttpContext -> c
    org.apache.http.client.CookieStore myCookieStore -> d
    org.geometerplus.zlibrary.core.network.ZLNetworkManager Instance() -> a
    void setCredentialsCreator(org.geometerplus.zlibrary.core.network.ZLNetworkManager$CredentialsCreator) -> a
    void perform(org.geometerplus.zlibrary.core.network.ZLNetworkRequest) -> a
    void perform(java.util.List) -> a
    void downloadToFile(java.lang.String,java.io.File) -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkManager$CredentialsCreator access$0(org.geometerplus.zlibrary.core.network.ZLNetworkManager) -> a
org.geometerplus.zlibrary.core.network.ZLNetworkManager$1 -> org.geometerplus.zlibrary.a.l.e:
    boolean myIsInitialized -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkManager this$0 -> b
    void addCookie(org.apache.http.cookie.Cookie) -> addCookie
    void addCookies(org.apache.http.cookie.Cookie[]) -> addCookies
    void clear() -> clear
    java.util.List getCookies() -> getCookies
org.geometerplus.zlibrary.core.network.ZLNetworkManager$2 -> org.geometerplus.zlibrary.a.l.d:
    org.geometerplus.zlibrary.core.network.ZLNetworkManager this$0 -> a
    java.io.File val$outFile -> e
    int val$bufferSize -> f
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.zlibrary.core.network.ZLNetworkManager$CredentialsCreator -> org.geometerplus.zlibrary.a.l.h:
    org.apache.http.auth.Credentials createCredentials(java.lang.String,org.apache.http.auth.AuthScope) -> a
org.geometerplus.zlibrary.core.network.ZLNetworkManager$MyCredentialsProvider -> org.geometerplus.zlibrary.a.l.a:
    org.apache.http.client.methods.HttpUriRequest myRequest -> a
    org.geometerplus.zlibrary.core.network.ZLNetworkManager this$0 -> b
    org.apache.http.auth.Credentials getCredentials(org.apache.http.auth.AuthScope) -> getCredentials
org.geometerplus.zlibrary.core.network.ZLNetworkRequest -> org.geometerplus.zlibrary.a.l.g:
    java.lang.String URL -> b
    java.lang.String SSLCertificate -> a
    java.lang.String PostData -> c
    java.util.Map PostParameters -> d
    void addPostParameter(java.lang.String,java.lang.String) -> a
    java.lang.String getURL() -> a
    void handleStream(java.io.InputStream,int) -> a
org.geometerplus.zlibrary.core.options.ZLBoolean3Option -> org.geometerplus.zlibrary.a.e.h:
    org.geometerplus.zlibrary.core.util.ZLBoolean3 myValue -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 myDefaultValue -> b
    org.geometerplus.zlibrary.core.util.ZLBoolean3 getValue() -> a
    void setValue(org.geometerplus.zlibrary.core.util.ZLBoolean3) -> a
org.geometerplus.zlibrary.core.options.ZLBooleanOption -> org.geometerplus.zlibrary.a.e.d:
    boolean myDefaultValue -> a
    boolean myValue -> b
    boolean getValue() -> a
    void setValue(boolean) -> a
org.geometerplus.zlibrary.core.options.ZLColorOption -> org.geometerplus.zlibrary.a.e.f:
    org.geometerplus.zlibrary.core.util.ZLColor myDefaultValue -> a
    org.geometerplus.zlibrary.core.util.ZLColor myValue -> b
    org.geometerplus.zlibrary.core.util.ZLColor getValue() -> a
    void setValue(org.geometerplus.zlibrary.core.util.ZLColor) -> a
org.geometerplus.zlibrary.core.options.ZLEnumOption -> org.geometerplus.zlibrary.a.e.e:
    java.lang.Enum myDefaultValue -> a
    java.lang.Enum myValue -> b
    java.lang.Enum getValue() -> a
    void setValue(java.lang.Enum) -> a
org.geometerplus.zlibrary.core.options.ZLIntegerOption -> org.geometerplus.zlibrary.a.e.c:
    int myDefaultValue -> a
    int myValue -> b
    int getValue() -> a
    void setValue(int) -> a
org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption -> org.geometerplus.zlibrary.a.e.b:
    int MinValue -> a
    int MaxValue -> b
    int myDefaultValue -> d
    int myValue -> e
    int getValue() -> a
    void setValue(int) -> a
org.geometerplus.zlibrary.core.options.ZLOption -> org.geometerplus.zlibrary.a.e.i:
    java.lang.String myGroup -> a
    java.lang.String myOptionName -> b
    boolean myIsSynchronized -> c
    java.lang.String getConfigValue(java.lang.String) -> b
    void setConfigValue(java.lang.String) -> c
    void unsetConfigValue() -> b
org.geometerplus.zlibrary.core.options.ZLStringListOption -> org.geometerplus.zlibrary.a.e.a:
    java.util.List myDefaultValue -> a
    java.util.List myValue -> b
    java.lang.String listToString(java.util.List) -> b
    java.util.List getValue() -> a
    void setValue(java.util.List) -> a
org.geometerplus.zlibrary.core.options.ZLStringOption -> org.geometerplus.zlibrary.a.e.g:
    java.lang.String myDefaultValue -> a
    java.lang.String myValue -> b
    java.lang.String getValue() -> a
    void setValue(java.lang.String) -> a
org.geometerplus.zlibrary.core.resources.ZLMissingResource -> org.geometerplus.zlibrary.a.j.d:
    org.geometerplus.zlibrary.core.resources.ZLMissingResource Instance -> a
    org.geometerplus.zlibrary.core.resources.ZLResource getResource(java.lang.String) -> b
    boolean hasValue() -> a
    java.lang.String getValue() -> b
org.geometerplus.zlibrary.core.resources.ZLResource -> org.geometerplus.zlibrary.a.j.b:
    java.lang.String Name -> a
    org.geometerplus.zlibrary.core.resources.ZLResource resource(java.lang.String) -> a
    boolean hasValue() -> a
    java.lang.String getValue() -> b
    org.geometerplus.zlibrary.core.resources.ZLResource getResource(java.lang.String) -> b
org.geometerplus.zlibrary.core.resources.ZLTreeResource -> org.geometerplus.zlibrary.a.j.c:
    org.geometerplus.zlibrary.core.resources.ZLTreeResource ourRoot -> a
    long ourTimeStamp -> b
    java.lang.String ourLanguage -> c
    boolean myHasValue -> d
    java.lang.String myValue -> e
    java.util.HashMap myChildren -> f
    void buildTree() -> c
    void loadData(java.lang.String) -> c
    void setValue(java.lang.String) -> d
    boolean hasValue() -> a
    java.lang.String getValue() -> b
    org.geometerplus.zlibrary.core.resources.ZLResource getResource(java.lang.String) -> b
    java.util.HashMap access$0(org.geometerplus.zlibrary.core.resources.ZLTreeResource) -> a
    void access$1(org.geometerplus.zlibrary.core.resources.ZLTreeResource,java.util.HashMap) -> a
    void access$3(org.geometerplus.zlibrary.core.resources.ZLTreeResource,java.lang.String) -> a
org.geometerplus.zlibrary.core.resources.ZLTreeResource$ResourceTreeReader -> org.geometerplus.zlibrary.a.j.a:
    java.util.ArrayList myStack -> a
    void readDocument(org.geometerplus.zlibrary.core.resources.ZLTreeResource,org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    boolean dontCacheAttributeValues() -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
org.geometerplus.zlibrary.core.sqliteconfig.ZLSQLiteConfig -> org.geometerplus.zlibrary.a.o.a:
    android.database.sqlite.SQLiteDatabase myDatabase -> a
    android.database.sqlite.SQLiteStatement myGetValueStatement -> b
    android.database.sqlite.SQLiteStatement mySetValueStatement -> c
    android.database.sqlite.SQLiteStatement myUnsetValueStatement -> d
    android.database.sqlite.SQLiteStatement myDeleteGroupStatement -> e
    void removeGroup(java.lang.String) -> a
    java.lang.String getValue(java.lang.String,java.lang.String,java.lang.String) -> a
    void setValue(java.lang.String,java.lang.String,java.lang.String) -> b
    void unsetValue(java.lang.String,java.lang.String) -> a
org.geometerplus.zlibrary.core.tree.ZLTree -> org.geometerplus.zlibrary.a.g.a:
    int mySize -> a
    org.geometerplus.zlibrary.core.tree.ZLTree Parent -> b
    int Level -> c
    java.util.ArrayList mySubTrees -> d
    int getSize() -> h
    boolean hasChildren() -> i
    java.util.List subTrees() -> j
    org.geometerplus.zlibrary.core.tree.ZLTree getTreeByParagraphNumber(int) -> a
    void addSubTree(org.geometerplus.zlibrary.core.tree.ZLTree,int) -> a
    void removeSelf() -> k
    void clear() -> l
    java.lang.Iterable allSubTrees(int) -> b
    java.util.Iterator iterator() -> iterator
    java.util.ArrayList access$1(org.geometerplus.zlibrary.core.tree.ZLTree) -> a
org.geometerplus.zlibrary.core.tree.ZLTree$1 -> org.geometerplus.zlibrary.a.g.c:
    org.geometerplus.zlibrary.core.tree.ZLTree this$0 -> a
    int val$maxLevel -> b
    java.util.Iterator iterator() -> iterator
org.geometerplus.zlibrary.core.tree.ZLTree$TreeIterator -> org.geometerplus.zlibrary.a.g.b:
    org.geometerplus.zlibrary.core.tree.ZLTree myCurrentElement -> a
    java.util.LinkedList myIndexStack -> b
    int myMaxLevel -> c
    org.geometerplus.zlibrary.core.tree.ZLTree this$0 -> d
    boolean hasNext() -> hasNext
    void remove() -> remove
    java.lang.Object next() -> next
org.geometerplus.zlibrary.core.util.MimeType -> org.geometerplus.zlibrary.a.b.l:
    java.util.Map ourSimpleTypesMap -> n
    org.geometerplus.zlibrary.core.util.MimeType APP_FB2ZIP -> a
    org.geometerplus.zlibrary.core.util.MimeType APP_EPUB -> b
    org.geometerplus.zlibrary.core.util.MimeType APP_MOBI -> c
    org.geometerplus.zlibrary.core.util.MimeType APP_PDF -> o
    org.geometerplus.zlibrary.core.util.MimeType APP_ATOM -> d
    org.geometerplus.zlibrary.core.util.MimeType APP_OPENSEARCHDESCRIPTION -> e
    org.geometerplus.zlibrary.core.util.MimeType APP_LITRES -> f
    org.geometerplus.zlibrary.core.util.MimeType TEXT_HTML -> g
    org.geometerplus.zlibrary.core.util.MimeType TEXT_XHTML -> h
    org.geometerplus.zlibrary.core.util.MimeType TEXT_PLAIN -> p
    org.geometerplus.zlibrary.core.util.MimeType IMAGE_PNG -> i
    org.geometerplus.zlibrary.core.util.MimeType IMAGE_JPEG -> j
    org.geometerplus.zlibrary.core.util.MimeType IMAGE_AUTO -> k
    org.geometerplus.zlibrary.core.util.MimeType IMAGE_PALM -> l
    org.geometerplus.zlibrary.core.util.MimeType NULL -> q
    java.lang.String Name -> m
    java.util.Map myParameters -> r
    org.geometerplus.zlibrary.core.util.MimeType get(java.lang.String) -> a
    java.lang.String getParameter(java.lang.String) -> b
    boolean equals(java.lang.Object) -> equals
    boolean weakEquals(org.geometerplus.zlibrary.core.util.MimeType) -> a
    int hashCode() -> hashCode
org.geometerplus.zlibrary.core.util.SliceInputStream -> org.geometerplus.zlibrary.a.b.k:
    int myStart -> a
    int myLength -> b
    int available() -> available
    void reset() -> reset
org.geometerplus.zlibrary.core.util.ZLArrayUtils -> org.geometerplus.zlibrary.a.b.f:
    byte[] createCopy(byte[],int,int) -> a
    char[] createCopy(char[],int,int) -> a
    int[] createCopy(int[],int,int) -> a
    java.lang.String[] createCopy(java.lang.String[],int,int) -> a
org.geometerplus.zlibrary.core.util.ZLBoolean3 -> org.geometerplus.zlibrary.a.b.i:
    org.geometerplus.zlibrary.core.util.ZLBoolean3 B3_FALSE -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 B3_TRUE -> b
    org.geometerplus.zlibrary.core.util.ZLBoolean3 B3_UNDEFINED -> c
    java.lang.String Name -> d
    org.geometerplus.zlibrary.core.util.ZLBoolean3[] ENUM$VALUES -> e
    org.geometerplus.zlibrary.core.util.ZLBoolean3 getByName(java.lang.String) -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3[] values() -> values
    org.geometerplus.zlibrary.core.util.ZLBoolean3 valueOf(java.lang.String) -> valueOf
org.geometerplus.zlibrary.core.util.ZLColor -> org.geometerplus.zlibrary.a.b.c:
    short Red -> a
    short Green -> b
    short Blue -> c
    int getIntValue() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.core.util.ZLInputStreamWithOffset -> org.geometerplus.zlibrary.a.b.b:
    java.io.InputStream myDecoratedStream -> a
    int myOffset -> b
    int available() -> available
    long skip(long) -> skip
    int read() -> read
    void close() -> close
    int read(byte[],int,int) -> read
    int read(byte[]) -> read
    void reset() -> reset
    int offset() -> a
org.geometerplus.zlibrary.core.util.ZLMiscUtil -> org.geometerplus.zlibrary.a.b.j:
    boolean equals(java.lang.Object,java.lang.Object) -> a
    int hashCode(java.lang.Object) -> a
    boolean matchesIgnoreCase(java.lang.String,java.lang.String) -> a
org.geometerplus.zlibrary.core.util.ZLNetworkUtil -> org.geometerplus.zlibrary.a.b.m:
    java.lang.String url(java.lang.String,java.lang.String) -> a
    boolean hasParameter(java.lang.String,java.lang.String) -> b
    java.lang.String appendParameter(java.lang.String,java.lang.String,java.lang.String) -> a
org.geometerplus.zlibrary.core.util.ZLSearchPattern -> org.geometerplus.zlibrary.a.b.a:
    boolean IgnoreCase -> a
    char[] LowerCasePattern -> b
    char[] UpperCasePattern -> c
    int getLength() -> a
org.geometerplus.zlibrary.core.util.ZLSearchUtil -> org.geometerplus.zlibrary.a.b.g:
    int find(char[],int,int,org.geometerplus.zlibrary.core.util.ZLSearchPattern) -> a
    int find(char[],int,int,org.geometerplus.zlibrary.core.util.ZLSearchPattern,int) -> a
org.geometerplus.zlibrary.core.util.ZLTTFInfo -> org.geometerplus.zlibrary.a.b.h:
    java.lang.String FamilyName -> a
    java.lang.String SubFamilyName -> b
org.geometerplus.zlibrary.core.util.ZLTTFInfoDetector -> org.geometerplus.zlibrary.a.b.e:
    java.io.InputStream myStream -> a
    int myPosition -> b
    java.util.Map collectFonts(java.io.File[]) -> a
    org.geometerplus.zlibrary.core.util.ZLTTFInfo detectInfo(java.io.File) -> a
    int getInt16(byte[],int) -> b
    org.geometerplus.zlibrary.core.util.ZLTTFInfo readFontInfo(org.geometerplus.zlibrary.core.util.ZLTTFInfoDetector$TableInfo) -> a
    int access$0(byte[],int) -> a
org.geometerplus.zlibrary.core.util.ZLTTFInfoDetector$TableInfo -> org.geometerplus.zlibrary.a.b.d:
    java.lang.String Name -> a
    int Offset -> b
    int Length -> c
org.geometerplus.zlibrary.core.view.DummyPaintContext -> org.geometerplus.zlibrary.a.n.f:
    void clear(org.geometerplus.zlibrary.core.filesystem.ZLFile,boolean) -> a
    void clear(org.geometerplus.zlibrary.core.util.ZLColor) -> a
    void setFontInternal(java.lang.String,int,boolean,boolean,boolean) -> a
    void setTextColor(org.geometerplus.zlibrary.core.util.ZLColor) -> b
    void setLineColor$818b5b1(org.geometerplus.zlibrary.core.util.ZLColor) -> c
    void setLineWidth(int) -> a
    void setFillColor$818b5b1(org.geometerplus.zlibrary.core.util.ZLColor) -> d
    int getWidth() -> a
    int getHeight() -> b
    int getStringWidth(char[],int,int) -> a
    int getSpaceWidthInternal() -> c
    int getStringHeightInternal() -> d
    int getDescentInternal() -> e
    void drawString(int,int,char[],int,int) -> a
    int imageWidth(org.geometerplus.zlibrary.core.image.ZLImageData) -> a
    int imageHeight(org.geometerplus.zlibrary.core.image.ZLImageData) -> b
    void drawImage(int,int,org.geometerplus.zlibrary.core.image.ZLImageData) -> a
    void drawLine(int,int,int,int) -> a
    void fillRectangle(int,int,int,int) -> b
    void drawOutline(int[],int[]) -> a
org.geometerplus.zlibrary.core.view.ZLPaintContext -> org.geometerplus.zlibrary.a.n.b:
    java.util.ArrayList myFamilies -> a
    boolean myResetFont -> b
    java.lang.String myFontFamily -> c
    int myFontSize -> d
    boolean myFontIsBold -> e
    boolean myFontIsItalic -> f
    boolean myFontIsUnderlined -> g
    int mySpaceWidth -> h
    int myStringHeight -> i
    int myDescent -> j
    void clear(org.geometerplus.zlibrary.core.filesystem.ZLFile,boolean) -> a
    void clear(org.geometerplus.zlibrary.core.util.ZLColor) -> a
    void setFont(java.lang.String,int,boolean,boolean,boolean) -> b
    void setFontInternal(java.lang.String,int,boolean,boolean,boolean) -> a
    void setTextColor(org.geometerplus.zlibrary.core.util.ZLColor) -> b
    void setLineColor$818b5b1(org.geometerplus.zlibrary.core.util.ZLColor) -> c
    void setLineWidth(int) -> a
    void setFillColor$818b5b1(org.geometerplus.zlibrary.core.util.ZLColor) -> d
    int getWidth() -> a
    int getHeight() -> b
    int getStringWidth(char[],int,int) -> a
    int getSpaceWidth() -> f
    int getSpaceWidthInternal() -> c
    int getStringHeight() -> g
    int getStringHeightInternal() -> d
    int getDescent() -> h
    int getDescentInternal() -> e
    void drawString(int,int,char[],int,int) -> a
    int imageWidth(org.geometerplus.zlibrary.core.image.ZLImageData) -> a
    int imageHeight(org.geometerplus.zlibrary.core.image.ZLImageData) -> b
    void drawImage(int,int,org.geometerplus.zlibrary.core.image.ZLImageData) -> a
    void drawLine(int,int,int,int) -> a
    void fillRectangle(int,int,int,int) -> b
    void drawOutline(int[],int[]) -> a
org.geometerplus.zlibrary.core.view.ZLView -> org.geometerplus.zlibrary.a.n.h:
    org.geometerplus.zlibrary.core.application.ZLApplication Application -> b
    org.geometerplus.zlibrary.core.view.ZLPaintContext myContext -> c
    org.geometerplus.zlibrary.core.view.ZLView$FooterArea getFooterArea() -> m
    org.geometerplus.zlibrary.core.view.ZLView$Animation getAnimationType() -> l
    void paint(org.geometerplus.zlibrary.core.view.ZLPaintContext,org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    void onScrollingFinished(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    boolean onFingerPress(int,int) -> c
    boolean onFingerRelease(int,int) -> e
    boolean onFingerMove(int,int) -> d
    boolean onFingerLongPress(int,int) -> f
    boolean onFingerReleaseAfterLongPress(int,int) -> h
    boolean onFingerMoveAfterLongPress(int,int) -> g
    boolean onFingerSingleTap(int,int) -> a
    boolean onFingerDoubleTap(int,int) -> b
    boolean isDoubleTapSupported() -> a
    boolean onTrackballRotated(int,int) -> i
    boolean isScrollbarShown() -> u
    int getScrollbarFullSize() -> w
    int getScrollbarThumbPosition(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> b
    int getScrollbarThumbLength(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> c
    boolean canScroll(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> d
org.geometerplus.zlibrary.core.view.ZLView$Animation -> org.geometerplus.zlibrary.a.n.g:
    org.geometerplus.zlibrary.core.view.ZLView$Animation none -> a
    org.geometerplus.zlibrary.core.view.ZLView$Animation curl -> b
    org.geometerplus.zlibrary.core.view.ZLView$Animation slide -> c
    org.geometerplus.zlibrary.core.view.ZLView$Animation shift -> d
    org.geometerplus.zlibrary.core.view.ZLView$Animation[] ENUM$VALUES -> e
    org.geometerplus.zlibrary.core.view.ZLView$Animation[] values() -> values
    org.geometerplus.zlibrary.core.view.ZLView$Animation valueOf(java.lang.String) -> valueOf
org.geometerplus.zlibrary.core.view.ZLView$Direction -> org.geometerplus.zlibrary.a.n.d:
    org.geometerplus.zlibrary.core.view.ZLView$Direction leftToRight -> a
    org.geometerplus.zlibrary.core.view.ZLView$Direction rightToLeft -> b
    org.geometerplus.zlibrary.core.view.ZLView$Direction up -> c
    org.geometerplus.zlibrary.core.view.ZLView$Direction down -> d
    boolean IsHorizontal -> e
    org.geometerplus.zlibrary.core.view.ZLView$Direction[] ENUM$VALUES -> f
    org.geometerplus.zlibrary.core.view.ZLView$Direction[] values() -> values
    org.geometerplus.zlibrary.core.view.ZLView$Direction valueOf(java.lang.String) -> valueOf
org.geometerplus.zlibrary.core.view.ZLView$FooterArea -> org.geometerplus.zlibrary.a.n.a:
    int getHeight() -> a
    void paint(org.geometerplus.zlibrary.core.view.ZLPaintContext) -> a
org.geometerplus.zlibrary.core.view.ZLView$PageIndex -> org.geometerplus.zlibrary.a.n.c:
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex previous -> a
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex current -> b
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex next -> c
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$PageIndex -> d
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex[] ENUM$VALUES -> e
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getNext() -> a
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPrevious() -> b
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex[] values() -> values
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex valueOf(java.lang.String) -> valueOf
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$PageIndex() -> c
org.geometerplus.zlibrary.core.view.ZLViewWidget -> org.geometerplus.zlibrary.a.n.e:
    void reset() -> a
    void repaint() -> b
    void startManualScrolling(int,int,org.geometerplus.zlibrary.core.view.ZLView$Direction) -> a
    void scrollManuallyTo(int,int) -> a
    void startAutoScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,int,int,org.geometerplus.zlibrary.core.view.ZLView$Direction,int) -> a
    void startAutoScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,org.geometerplus.zlibrary.core.view.ZLView$Direction,int) -> a
    void startAutoScrolling(int,int,int) -> a
org.geometerplus.zlibrary.core.xml.ZLDTDParser -> org.geometerplus.zlibrary.a.d.f:
    void doIt(java.io.InputStream,java.util.HashMap) -> a
org.geometerplus.zlibrary.core.xml.ZLMutableString -> org.geometerplus.zlibrary.a.d.a:
    char[] myData -> a
    int myLength -> b
    void append(char[],int,int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.core.xml.ZLStringMap -> org.geometerplus.zlibrary.a.d.b:
    java.lang.String[] myKeys -> a
    java.lang.String[] myValues -> b
    int mySize -> c
    void put(java.lang.String,java.lang.String) -> a
    java.lang.String getValue(java.lang.String) -> a
    int getSize() -> a
    java.lang.String getKey(int) -> a
    java.lang.String getValue(int) -> b
    void clear() -> b
org.geometerplus.zlibrary.core.xml.ZLXMLParser -> org.geometerplus.zlibrary.a.d.d:
    java.io.InputStreamReader myStreamReader -> a
    org.geometerplus.zlibrary.core.xml.ZLXMLReader myXMLReader -> b
    boolean myProcessNamespaces -> c
    java.util.HashMap ourBufferPool -> d
    java.util.Queue ourStringPool -> e
    char[] myBuffer -> f
    int myBufferDescriptionLength -> g
    org.geometerplus.zlibrary.core.xml.ZLMutableString myTagName -> h
    org.geometerplus.zlibrary.core.xml.ZLMutableString myCData -> i
    org.geometerplus.zlibrary.core.xml.ZLMutableString myAttributeName -> j
    org.geometerplus.zlibrary.core.xml.ZLMutableString myAttributeValue -> k
    org.geometerplus.zlibrary.core.xml.ZLMutableString myEntityName -> l
    java.util.HashMap ourDTDMaps -> m
    java.lang.String convertToString(java.util.Map,org.geometerplus.zlibrary.core.xml.ZLMutableString) -> a
    char[] getBuffer(int) -> a
    void storeBuffer(char[]) -> a
    org.geometerplus.zlibrary.core.xml.ZLMutableString getMutableString() -> c
    void storeString(org.geometerplus.zlibrary.core.xml.ZLMutableString) -> a
    void finish() -> a
    char[] getEntityValue(java.util.HashMap,java.lang.String) -> a
    java.util.HashMap getDTDMap(java.util.List) -> a
    void doIt() -> b
    boolean processFullTag(org.geometerplus.zlibrary.core.xml.ZLXMLReader,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean processStartTag(org.geometerplus.zlibrary.core.xml.ZLXMLReader,java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap,java.util.HashMap) -> a
org.geometerplus.zlibrary.core.xml.ZLXMLProcessor -> org.geometerplus.zlibrary.a.d.c:
    java.util.Map getEntityMap(java.util.List) -> a
    boolean read(org.geometerplus.zlibrary.core.xml.ZLXMLReader,java.io.InputStream,int) -> a
    boolean read(org.geometerplus.zlibrary.core.xml.ZLXMLReader,org.geometerplus.zlibrary.core.filesystem.ZLFile,int) -> a
org.geometerplus.zlibrary.core.xml.ZLXMLReader -> org.geometerplus.zlibrary.a.d.g:
    boolean dontCacheAttributeValues() -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    void characterDataHandlerFinal(char[],int,int) -> b
    boolean processNamespaces() -> c
    void namespaceMapChangedHandler(java.util.Map) -> a
    void addExternalEntities(java.util.HashMap) -> a
    java.util.List externalDTDs() -> d
org.geometerplus.zlibrary.core.xml.ZLXMLReaderAdapter -> org.geometerplus.zlibrary.a.d.e:
    java.util.Map myNamespaceMap -> a
    boolean dontCacheAttributeValues() -> b
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
    void characterDataHandlerFinal(char[],int,int) -> b
    boolean processNamespaces() -> c
    void namespaceMapChangedHandler(java.util.Map) -> a
    java.lang.String getAttributeValue(org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String,java.lang.String) -> a
    void addExternalEntities(java.util.HashMap) -> a
    java.util.List externalDTDs() -> d
org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenationInfo -> org.geometerplus.zlibrary.b.c.d:
    boolean[] Mask -> a
    boolean isHyphenationPossible(int) -> a
org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenationReader -> org.geometerplus.zlibrary.b.c.e:
    org.geometerplus.zlibrary.text.hyphenation.ZLTextTeXHyphenator myHyphenator -> a
    boolean myReadPattern -> b
    char[] myBuffer -> c
    int myBufferLength -> d
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
    boolean endElementHandler(java.lang.String) -> a
    void characterDataHandler(char[],int,int) -> a
org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenator -> org.geometerplus.zlibrary.b.c.b:
    org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenator ourInstance -> a
    org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenator Instance() -> a
    java.util.List languageCodes() -> b
    void load(java.lang.String) -> a
    org.geometerplus.zlibrary.text.hyphenation.ZLTextHyphenationInfo getInfo(org.geometerplus.zlibrary.text.view.ZLTextWord) -> a
    void hyphenate(char[],boolean[],int) -> a
org.geometerplus.zlibrary.text.hyphenation.ZLTextTeXHyphenationPattern -> org.geometerplus.zlibrary.b.c.a:
    int myLength -> a
    char[] mySymbols -> b
    byte[] myValues -> d
    int myHashCode -> c
    void apply(byte[],int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.text.hyphenation.ZLTextTeXHyphenator -> org.geometerplus.zlibrary.b.c.c:
    java.util.HashMap myPatternTable -> a
    java.lang.String myLanguage -> b
    java.util.List myLanguageCodes -> c
    void addPattern(org.geometerplus.zlibrary.text.hyphenation.ZLTextTeXHyphenationPattern) -> a
    java.util.List languageCodes() -> b
    void load(java.lang.String) -> a
    void hyphenate(char[],boolean[],int) -> a
org.geometerplus.zlibrary.text.model.CachedCharStorage -> org.geometerplus.zlibrary.b.b.d:
    int myBlockSize -> a
    java.util.ArrayList myArray -> b
    java.lang.String myDirectoryName -> c
    java.lang.String myFileExtension -> d
    java.lang.String fileName(int) -> c
    int size() -> a
    char[] block(int) -> a
    char[] createNewBlock(int) -> b
    void freezeLastBlock() -> b
org.geometerplus.zlibrary.text.model.CachedCharStorageException -> org.geometerplus.zlibrary.b.b.n:
org.geometerplus.zlibrary.text.model.CharStorage -> org.geometerplus.zlibrary.b.b.c:
    int size() -> a
    char[] block(int) -> a
    char[] createNewBlock(int) -> b
    void freezeLastBlock() -> b
org.geometerplus.zlibrary.text.model.ZLImageEntry -> org.geometerplus.zlibrary.b.b.b:
    org.geometerplus.zlibrary.core.image.ZLImageMap myImageMap -> b
    java.lang.String Id -> a
    short VOffset -> c
    org.geometerplus.zlibrary.core.image.ZLImage getImage() -> a
org.geometerplus.zlibrary.text.model.ZLTextForcedControlEntry -> org.geometerplus.zlibrary.b.b.k:
    short myMask -> a
    short myLeftIndent -> b
    short myRightIndent -> c
    byte myAlignmentType -> d
    void setLeftIndent(short) -> a
    void setRightIndent(short) -> b
    void setAlignmentType(byte) -> a
org.geometerplus.zlibrary.text.model.ZLTextMark -> org.geometerplus.zlibrary.b.b.a:
    int ParagraphIndex -> a
    int Offset -> b
    int Length -> c
    int compareTo(org.geometerplus.zlibrary.text.model.ZLTextMark) -> a
    java.lang.String toString() -> toString
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.zlibrary.text.model.ZLTextModel -> org.geometerplus.zlibrary.b.b.o:
    java.lang.String getId() -> a
    java.lang.String getLanguage() -> b
    int getParagraphsNumber() -> e
    org.geometerplus.zlibrary.text.model.ZLTextParagraph getParagraph(int) -> a
    void removeAllMarks() -> d
    org.geometerplus.zlibrary.text.model.ZLTextMark getNextMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> a
    org.geometerplus.zlibrary.text.model.ZLTextMark getPreviousMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> b
    java.util.List getMarks() -> c
    int getTextLength(int) -> b
    int findParagraphByTextLength(int) -> c
    int search$52f4f808(java.lang.String,int,int) -> a
org.geometerplus.zlibrary.text.model.ZLTextParagraph -> org.geometerplus.zlibrary.b.b.f:
    org.geometerplus.zlibrary.text.model.ZLTextParagraph$EntryIterator iterator() -> a
    byte getKind() -> b
org.geometerplus.zlibrary.text.model.ZLTextParagraph$EntryIterator -> org.geometerplus.zlibrary.b.b.l:
    byte getType() -> a
    char[] getTextData() -> b
    int getTextOffset() -> c
    int getTextLength() -> d
    byte getControlKind() -> e
    boolean getControlIsStart() -> f
    byte getHyperlinkType() -> g
    java.lang.String getHyperlinkId() -> h
    org.geometerplus.zlibrary.text.model.ZLImageEntry getImageEntry() -> i
    short getFixedHSpaceLength() -> j
    boolean hasNext() -> k
    void next() -> l
org.geometerplus.zlibrary.text.model.ZLTextParagraphImpl -> org.geometerplus.zlibrary.b.b.e:
    org.geometerplus.zlibrary.text.model.ZLTextPlainModel myModel -> a
    int myIndex -> b
    org.geometerplus.zlibrary.text.model.ZLTextParagraph$EntryIterator iterator() -> a
    byte getKind() -> b
org.geometerplus.zlibrary.text.model.ZLTextPlainModel -> org.geometerplus.zlibrary.b.b.h:
    java.lang.String myId -> i
    java.lang.String myLanguage -> j
    int[] myStartEntryIndices -> a
    int[] myStartEntryOffsets -> b
    int[] myParagraphLengths -> c
    int[] myTextSizes -> d
    byte[] myParagraphKinds -> e
    int myParagraphsNumber -> f
    org.geometerplus.zlibrary.text.model.CharStorage myStorage -> g
    java.util.ArrayList myMarks -> k
    org.geometerplus.zlibrary.core.image.ZLImageMap myImageMap -> h
    java.lang.String getId() -> a
    java.lang.String getLanguage() -> b
    org.geometerplus.zlibrary.text.model.ZLTextMark getNextMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> a
    org.geometerplus.zlibrary.text.model.ZLTextMark getPreviousMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> b
    int search$52f4f808(java.lang.String,int,int) -> a
    java.util.List getMarks() -> c
    void removeAllMarks() -> d
    int getParagraphsNumber() -> e
    org.geometerplus.zlibrary.text.model.ZLTextParagraph getParagraph(int) -> a
    int getTextLength(int) -> b
    int findParagraphByTextLength(int) -> c
org.geometerplus.zlibrary.text.model.ZLTextPlainModel$EntryIteratorImpl -> org.geometerplus.zlibrary.b.b.i:
    int myCounter -> a
    int myLength -> b
    byte myType -> c
    int myDataIndex -> d
    int myDataOffset -> e
    char[] myTextData -> f
    int myTextOffset -> g
    int myTextLength -> h
    byte myControlKind -> i
    boolean myControlIsStart -> j
    byte myHyperlinkType -> k
    java.lang.String myHyperlinkId -> l
    org.geometerplus.zlibrary.text.model.ZLImageEntry myImageEntry -> m
    org.geometerplus.zlibrary.text.model.ZLTextForcedControlEntry myForcedControlEntry -> n
    short myFixedHSpaceLength -> o
    org.geometerplus.zlibrary.text.model.ZLTextPlainModel this$0 -> p
    void reset(int) -> a
    byte getType() -> a
    char[] getTextData() -> b
    int getTextOffset() -> c
    int getTextLength() -> d
    byte getControlKind() -> e
    boolean getControlIsStart() -> f
    byte getHyperlinkType() -> g
    java.lang.String getHyperlinkId() -> h
    org.geometerplus.zlibrary.text.model.ZLImageEntry getImageEntry() -> i
    short getFixedHSpaceLength() -> j
    boolean hasNext() -> k
    void next() -> l
org.geometerplus.zlibrary.text.model.ZLTextSpecialParagraphImpl -> org.geometerplus.zlibrary.b.b.j:
    byte myKind -> a
    byte getKind() -> b
org.geometerplus.zlibrary.text.model.ZLTextWritableModel -> org.geometerplus.zlibrary.b.b.m:
    void createParagraph(byte) -> a
    void addControl(byte,boolean) -> a
    void addText(char[],int,int) -> a
    void addHyperlinkControl(byte,byte,java.lang.String) -> a
    void addImage(java.lang.String,short) -> a
    void addFixedHSpace(short) -> a
org.geometerplus.zlibrary.text.model.ZLTextWritablePlainModel -> org.geometerplus.zlibrary.b.b.g:
    char[] myCurrentDataBlock -> i
    int myBlockOffset -> j
    void createParagraph(byte) -> a
    char[] getDataBlock(int) -> d
    void addControl(byte,boolean) -> a
    void addText(char[],int,int) -> a
    void addHyperlinkControl(byte,byte,java.lang.String) -> a
    void addImage(java.lang.String,short) -> a
    void addFixedHSpace(short) -> a
org.geometerplus.zlibrary.text.view.ZLTextControlElement -> org.geometerplus.zlibrary.b.a.w:
    org.geometerplus.zlibrary.text.view.ZLTextControlElement[] myStartElements -> a
    org.geometerplus.zlibrary.text.view.ZLTextControlElement[] myEndElements -> g
    byte Kind -> b
    boolean IsStart -> c
    org.geometerplus.zlibrary.text.view.ZLTextControlElement get(byte,boolean) -> a
org.geometerplus.zlibrary.text.view.ZLTextElement -> org.geometerplus.zlibrary.b.a.s:
    org.geometerplus.zlibrary.text.view.ZLTextElement HSpace -> d
    org.geometerplus.zlibrary.text.view.ZLTextElement AfterParagraph -> e
    org.geometerplus.zlibrary.text.view.ZLTextElement IndentElement -> f
org.geometerplus.zlibrary.text.view.ZLTextElementArea -> org.geometerplus.zlibrary.b.a.g:
    int XStart -> a
    int XEnd -> b
    int YStart -> c
    int YEnd -> d
    int Length -> e
    boolean AddHyphenationSign -> f
    boolean ChangeStyle -> g
    org.geometerplus.zlibrary.text.view.ZLTextStyle Style -> h
    org.geometerplus.zlibrary.text.view.ZLTextElement Element -> i
org.geometerplus.zlibrary.text.view.ZLTextElementAreaVector -> org.geometerplus.zlibrary.b.a.u:
    java.util.ArrayList ElementRegions -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion myCurrentElementRegion -> b
    void clear() -> clear
    boolean add(org.geometerplus.zlibrary.text.view.ZLTextElementArea) -> a
    boolean add(java.lang.Object) -> add
org.geometerplus.zlibrary.text.view.ZLTextFixedHSpaceElement -> org.geometerplus.zlibrary.b.a.ae:
    org.geometerplus.zlibrary.text.view.ZLTextElement[] ourCollection -> b
    short Length -> a
    org.geometerplus.zlibrary.text.view.ZLTextElement getElement(short) -> a
org.geometerplus.zlibrary.text.view.ZLTextFixedPosition -> org.geometerplus.zlibrary.b.a.j:
    int ParagraphIndex -> j
    int ElementIndex -> k
    int CharIndex -> l
    int getParagraphIndex() -> d
    int getElementIndex() -> e
    int getCharIndex() -> f
org.geometerplus.zlibrary.text.view.ZLTextHorizontalConvexHull -> org.geometerplus.zlibrary.b.a.q:
    java.util.LinkedList myRectangles -> a
    void addArea(org.geometerplus.zlibrary.text.view.ZLTextElementArea) -> a
    void normalize() -> a
    int distanceTo(int,int) -> a
    void draw(org.geometerplus.zlibrary.core.view.ZLPaintContext) -> a
org.geometerplus.zlibrary.text.view.ZLTextHorizontalConvexHull$Rectangle -> org.geometerplus.zlibrary.b.a.m:
    int Left -> a
    int Right -> b
    int Top -> c
    int Bottom -> d
org.geometerplus.zlibrary.text.view.ZLTextHyperlink -> org.geometerplus.zlibrary.b.a.k:
    byte Type -> a
    java.lang.String Id -> b
    org.geometerplus.zlibrary.text.view.ZLTextHyperlink NO_LINK -> c
org.geometerplus.zlibrary.text.view.ZLTextHyperlinkControlElement -> org.geometerplus.zlibrary.b.a.h:
    org.geometerplus.zlibrary.text.view.ZLTextHyperlink Hyperlink -> a
org.geometerplus.zlibrary.text.view.ZLTextHyperlinkRegion -> org.geometerplus.zlibrary.b.a.v:
    org.geometerplus.zlibrary.text.view.ZLTextHyperlink Hyperlink -> a
    boolean equals(java.lang.Object) -> equals
org.geometerplus.zlibrary.text.view.ZLTextImageElement -> org.geometerplus.zlibrary.b.a.ac:
    java.lang.String Id -> c
    org.geometerplus.zlibrary.core.image.ZLImageData ImageData -> a
    java.lang.String URI -> b
org.geometerplus.zlibrary.text.view.ZLTextImageRegion -> org.geometerplus.zlibrary.b.a.f:
    org.geometerplus.zlibrary.text.view.ZLTextImageElement ImageElement -> a
    boolean equals(java.lang.Object) -> equals
org.geometerplus.zlibrary.text.view.ZLTextLineInfo -> org.geometerplus.zlibrary.b.a.z:
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor ParagraphCursor -> a
    int ParagraphCursorLength -> b
    int StartElementIndex -> c
    int StartCharIndex -> d
    int RealStartElementIndex -> e
    int RealStartCharIndex -> f
    int EndElementIndex -> g
    int EndCharIndex -> h
    boolean IsVisible -> i
    int LeftIndent -> j
    int Width -> k
    int Height -> l
    int Descent -> m
    int VSpaceAfter -> n
    int SpaceCounter -> o
    org.geometerplus.zlibrary.text.view.ZLTextStyle StartStyle -> p
    boolean isEndOfParagraph() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.text.view.ZLTextPage -> org.geometerplus.zlibrary.b.a.a:
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor StartCursor -> a
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor EndCursor -> b
    java.util.ArrayList LineInfos -> c
    int PaintState -> d
    org.geometerplus.zlibrary.text.view.ZLTextElementAreaVector TextElementMap -> e
    int OldWidth -> f
    int OldHeight -> g
    void reset() -> a
    boolean isEmptyPage() -> b
    void findLineFromStart(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,int) -> a
    void findLineFromEnd(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,int) -> b
    org.geometerplus.zlibrary.text.view.ZLTextElementArea findLast(int,int,org.geometerplus.zlibrary.text.view.ZLTextSelectionModel$BoundElement) -> a
org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor -> org.geometerplus.zlibrary.b.a.d:
    int Index -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel Model -> b
    java.util.ArrayList myElements -> c
    char[] SPACE_ARRAY -> d
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor cursor(org.geometerplus.zlibrary.text.model.ZLTextModel,int) -> a
    void fill() -> a
    void clear() -> b
    boolean isFirst() -> c
    boolean isLast() -> d
    boolean isEndOfSection() -> e
    int getParagraphLength() -> f
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor previous() -> g
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor next() -> h
    org.geometerplus.zlibrary.text.view.ZLTextElement getElement(int) -> a
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor$Processor -> org.geometerplus.zlibrary.b.a.y:
    org.geometerplus.zlibrary.text.model.ZLTextParagraph myParagraph -> a
    org.vimgadgets.linebreak.LineBreaker myLineBreaker -> b
    java.util.ArrayList myElements -> c
    int myOffset -> d
    int myFirstMark -> e
    int myLastMark -> f
    java.util.List myMarks -> g
    byte[] ourBreaks -> h
    void fill() -> a
    void addWord(char[],int,int,int) -> a
org.geometerplus.zlibrary.text.view.ZLTextParagraphCursorCache -> org.geometerplus.zlibrary.b.a.ab:
    java.util.HashMap ourMap -> a
    void put(org.geometerplus.zlibrary.text.model.ZLTextModel,int,org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor) -> a
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor get(org.geometerplus.zlibrary.text.model.ZLTextModel,int) -> a
    void clear() -> a
org.geometerplus.zlibrary.text.view.ZLTextParagraphCursorCache$Key -> org.geometerplus.zlibrary.b.a.ai:
    org.geometerplus.zlibrary.text.model.ZLTextModel myModel -> a
    int myIndex -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
org.geometerplus.zlibrary.text.view.ZLTextPosition -> org.geometerplus.zlibrary.b.a.i:
    int getParagraphIndex() -> d
    int getElementIndex() -> e
    int getCharIndex() -> f
    boolean samePositionAs(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    int compareTo(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> b
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    int compareTo(java.lang.Object) -> compareTo
org.geometerplus.zlibrary.text.view.ZLTextRegion -> org.geometerplus.zlibrary.b.a.ak:
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter AnyRegionFilter -> b
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter HyperlinkFilter -> c
    org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter ImageOrHyperlinkFilter -> d
    java.util.List myList -> a
    int myFromIndex -> e
    int myToIndex -> f
    org.geometerplus.zlibrary.text.view.ZLTextHorizontalConvexHull myHull -> g
    void extend() -> a
    java.util.List textAreas() -> d
    org.geometerplus.zlibrary.text.view.ZLTextHorizontalConvexHull convexHull() -> e
    int getTop() -> b
    int getBottom() -> c
    void draw(org.geometerplus.zlibrary.core.view.ZLPaintContext) -> a
    int distanceTo(int,int) -> a
    boolean isAtRightOf(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
    boolean isAtLeftOf(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> b
    boolean isUnder(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> c
    boolean isOver(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> d
    boolean isExactlyUnder(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> e
    boolean isExactlyOver(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> f
org.geometerplus.zlibrary.text.view.ZLTextRegion$1 -> org.geometerplus.zlibrary.b.a.ah:
    boolean accepts(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
org.geometerplus.zlibrary.text.view.ZLTextRegion$2 -> org.geometerplus.zlibrary.b.a.ag:
    boolean accepts(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
org.geometerplus.zlibrary.text.view.ZLTextRegion$3 -> org.geometerplus.zlibrary.b.a.af:
    boolean accepts(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter -> org.geometerplus.zlibrary.b.a.c:
    boolean accepts(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
org.geometerplus.zlibrary.text.view.ZLTextSelectionModel -> org.geometerplus.zlibrary.b.a.p:
    org.geometerplus.zlibrary.text.view.ZLTextView myView -> a
    boolean myIsActive -> b
    boolean myIsEmpty -> c
    boolean myDoUpdate -> d
    int myStoredX -> e
    int myStoredY -> f
    org.geometerplus.zlibrary.text.view.ZLTextSelectionModel$Bound myFirstBound -> g
    org.geometerplus.zlibrary.text.view.ZLTextSelectionModel$Bound mySecondBound -> h
    java.lang.StringBuilder myText -> i
    java.util.Timer myTimer -> j
    java.util.TimerTask myScrollingTask -> k
    boolean extendTo(int,int) -> a
    void update() -> a
    void deactivate() -> b
    void clear() -> c
    org.geometerplus.zlibrary.text.view.ZLTextSelectionModel$Range getRange() -> d
    boolean isEmpty() -> e
    void setBound(org.geometerplus.zlibrary.text.view.ZLTextSelectionModel$Bound,int,int) -> a
    void startSelectionScrolling(boolean) -> a
    void stopSelectionScrolling() -> f
    org.geometerplus.zlibrary.text.view.ZLTextView access$0(org.geometerplus.zlibrary.text.view.ZLTextSelectionModel) -> a
    void access$1$6ac95430(org.geometerplus.zlibrary.text.view.ZLTextSelectionModel) -> b
org.geometerplus.zlibrary.text.view.ZLTextSelectionModel$1 -> org.geometerplus.zlibrary.b.a.r:
    org.geometerplus.zlibrary.text.view.ZLTextSelectionModel this$0 -> a
    boolean val$forward -> b
    void run() -> run
org.geometerplus.zlibrary.text.view.ZLTextSelectionModel$Bound -> org.geometerplus.zlibrary.b.a.x:
    org.geometerplus.zlibrary.text.view.ZLTextSelectionModel$BoundElement Before -> a
    org.geometerplus.zlibrary.text.view.ZLTextSelectionModel$BoundElement After -> b
org.geometerplus.zlibrary.text.view.ZLTextSelectionModel$BoundElement -> org.geometerplus.zlibrary.b.a.l:
    boolean Exists -> a
    int ParagraphIndex -> b
    int ElementIndex -> c
    int CharIndex -> d
    void copyFrom(org.geometerplus.zlibrary.text.view.ZLTextSelectionModel$BoundElement) -> a
    boolean equalsTo(org.geometerplus.zlibrary.text.view.ZLTextSelectionModel$BoundElement) -> b
    int getParagraphIndex() -> d
    int getElementIndex() -> e
    int getCharIndex() -> f
org.geometerplus.zlibrary.text.view.ZLTextSelectionModel$Range -> org.geometerplus.zlibrary.b.a.aj:
    org.geometerplus.zlibrary.text.view.ZLTextSelectionModel$BoundElement Left -> a
    org.geometerplus.zlibrary.text.view.ZLTextSelectionModel$BoundElement Right -> b
org.geometerplus.zlibrary.text.view.ZLTextStyle -> org.geometerplus.zlibrary.b.a.e:
    org.geometerplus.zlibrary.text.view.ZLTextStyle Base -> h
    org.geometerplus.zlibrary.text.view.ZLTextHyperlink Hyperlink -> i
    java.lang.String getFontFamily() -> a
    int getFontSize() -> b
    boolean isBold() -> c
    boolean isItalic() -> d
    boolean isUnderline() -> e
    int getLeftIndent() -> f
    int getRightIndent() -> g
    int getFirstLineIndentDelta() -> h
    int getLineSpacePercent() -> i
    int getVerticalShift() -> j
    int getSpaceBefore() -> k
    int getSpaceAfter() -> l
    byte getAlignment() -> m
    boolean allowHyphenations() -> n
org.geometerplus.zlibrary.text.view.ZLTextView -> org.geometerplus.zlibrary.b.a.n:
    org.geometerplus.zlibrary.text.model.ZLTextModel myModel -> d
    org.geometerplus.zlibrary.text.view.ZLTextSelectionModel mySelectionModel -> e
    int myScrollingMode -> f
    int myOverlappingValue -> g
    org.geometerplus.zlibrary.text.view.ZLTextPage myPreviousPage -> h
    org.geometerplus.zlibrary.text.view.ZLTextPage myCurrentPage -> a
    org.geometerplus.zlibrary.text.view.ZLTextPage myNextPage -> i
    java.util.HashMap myLineInfoCache -> j
    char[] ourDefaultLetters -> k
    char[] myLettersBuffer -> l
    int myLettersBufferLength -> m
    org.geometerplus.zlibrary.text.model.ZLTextModel myLettersModel -> n
    char[] SPACE -> o
    org.geometerplus.zlibrary.text.view.ZLTextRegion mySelectedRegion -> p
    boolean myHighlightSelectedRegion -> q
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$PageIndex -> r
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> s
    void setModel(org.geometerplus.zlibrary.text.model.ZLTextModel) -> a
    org.geometerplus.zlibrary.text.model.ZLTextModel getModel() -> n
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor getStartCursor() -> o
    void gotoMark(org.geometerplus.zlibrary.text.model.ZLTextMark) -> a
    int search$299caf72$53ec41e8(java.lang.String) -> a
    boolean canFindNext() -> p
    void findNext() -> q
    boolean canFindPrevious() -> r
    void findPrevious() -> s
    void clearFindResults() -> t
    void onScrollingFinished(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    void paint(org.geometerplus.zlibrary.core.view.ZLPaintContext,org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    int scrollbarType() -> k
    boolean isScrollbarShown() -> u
    int sizeOfTextBeforeParagraph(int) -> a
    int sizeOfFullText() -> v
    int getCurrentCharNumber(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,boolean) -> a
    int getScrollbarFullSize() -> w
    int getScrollbarThumbPosition(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> b
    int getScrollbarThumbLength(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> c
    int sizeOfTextBeforeCursor(org.geometerplus.zlibrary.text.view.ZLTextWordCursor) -> a
    float computeCharsPerPage() -> L
    int computeTextPageNumber(int) -> c
    int computePageNumber() -> x
    int computeCurrentPage() -> y
    void gotoPage(int) -> b
    void gotoHome() -> z
    void buildInfos(org.geometerplus.zlibrary.text.view.ZLTextPage,org.geometerplus.zlibrary.text.view.ZLTextWordCursor,org.geometerplus.zlibrary.text.view.ZLTextWordCursor) -> a
    org.geometerplus.zlibrary.text.view.ZLTextLineInfo processTextLine(org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor,int,int,int) -> a
    void scrollPage(boolean,int,int) -> a
    void gotoPosition(org.geometerplus.zlibrary.text.view.ZLTextPosition) -> a
    void gotoPosition(int,int,int) -> a
    void gotoPositionByEnd$4868d30e(int,int) -> j
    void preparePaintInfo() -> M
    void preparePaintInfo(org.geometerplus.zlibrary.text.view.ZLTextPage) -> a
    void clearCaches() -> A
    void rebuildPaintInfo() -> N
    int infoSize(org.geometerplus.zlibrary.text.view.ZLTextLineInfo,int) -> a
    int paragraphSize(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,boolean,int) -> a
    org.geometerplus.zlibrary.text.view.ZLTextWordCursor findStart(org.geometerplus.zlibrary.text.view.ZLTextWordCursor,int,int) -> a
    boolean onFingerMove(int,int) -> d
    boolean onFingerRelease(int,int) -> e
    boolean isSelectionEnabled() -> j
    void hideSelectedRegionBorder() -> B
    org.geometerplus.zlibrary.text.view.ZLTextRegion getCurrentElementRegion(org.geometerplus.zlibrary.text.view.ZLTextPage) -> b
    org.geometerplus.zlibrary.text.view.ZLTextRegion getSelectedRegion() -> C
    org.geometerplus.zlibrary.text.view.ZLTextRegion findRegion$7b9fc400(int,int,org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter) -> a
    void selectRegion(org.geometerplus.zlibrary.text.view.ZLTextRegion) -> a
    org.geometerplus.zlibrary.text.view.ZLTextRegion currentRegion() -> D
    org.geometerplus.zlibrary.text.view.ZLTextRegion nextRegion(org.geometerplus.zlibrary.core.view.ZLView$Direction,org.geometerplus.zlibrary.text.view.ZLTextRegion$Filter) -> a
    boolean canScroll(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> d
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$PageIndex() -> O
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> P
org.geometerplus.zlibrary.text.view.ZLTextViewBase -> org.geometerplus.zlibrary.b.a.t:
    org.geometerplus.zlibrary.text.view.ZLTextStyle myTextStyle -> a
    int myWordHeight -> d
    char[] myWordPartArray -> e
    int getWordHeight() -> E
    int getLeftMargin() -> b
    int getRightMargin() -> c
    int getTopMargin() -> d
    int getBottomMargin() -> e
    org.geometerplus.zlibrary.core.filesystem.ZLFile getWallpaperFile() -> f
    org.geometerplus.zlibrary.core.util.ZLColor getBackgroundColor() -> g
    org.geometerplus.zlibrary.core.util.ZLColor getSelectedBackgroundColor() -> h
    org.geometerplus.zlibrary.core.util.ZLColor getTextColor(org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
    org.geometerplus.zlibrary.core.util.ZLColor getHighlightingColor() -> i
    int getTextAreaHeight() -> F
    int getTextAreaWidth() -> G
    int getBottomLine() -> H
    int getRightLine() -> I
    org.geometerplus.zlibrary.text.view.ZLTextStyle getTextStyle() -> J
    void setTextStyle(org.geometerplus.zlibrary.text.view.ZLTextStyle) -> a
    void resetTextStyle() -> K
    void applyControl(org.geometerplus.zlibrary.text.view.ZLTextControlElement) -> a
    void applyControls(org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor,int,int) -> a
    int getElementWidth(org.geometerplus.zlibrary.text.view.ZLTextElement,int) -> a
    int getElementHeight(org.geometerplus.zlibrary.text.view.ZLTextElement) -> a
    int getElementDescent(org.geometerplus.zlibrary.text.view.ZLTextElement) -> b
    int getWordWidth(org.geometerplus.zlibrary.text.view.ZLTextWord,int) -> a
    int getWordWidth(org.geometerplus.zlibrary.text.view.ZLTextWord,int,int) -> a
    int getWordWidth(org.geometerplus.zlibrary.text.view.ZLTextWord,int,int,boolean) -> a
    int getAreaLength(org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor,org.geometerplus.zlibrary.text.view.ZLTextElementArea,int) -> a
    void drawWord(int,int,org.geometerplus.zlibrary.text.view.ZLTextWord,int,int,boolean) -> a
    void drawString(int,int,char[],int,int,org.geometerplus.zlibrary.text.view.ZLTextWord$Mark,int) -> a
org.geometerplus.zlibrary.text.view.ZLTextWord -> org.geometerplus.zlibrary.b.a.o:
    char[] Data -> a
    int Offset -> b
    int Length -> c
    int myWidth -> g
    org.geometerplus.zlibrary.text.view.ZLTextWord$Mark myMark -> h
    int myParagraphOffset -> i
    org.geometerplus.zlibrary.text.view.ZLTextWord$Mark getMark() -> a
    int getParagraphOffset() -> b
    void addMark(int,int) -> a
    int getWidth(org.geometerplus.zlibrary.core.view.ZLPaintContext) -> a
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.text.view.ZLTextWord$Mark -> org.geometerplus.zlibrary.b.a.ad:
    int Start -> a
    int Length -> b
    org.geometerplus.zlibrary.text.view.ZLTextWord$Mark myNext -> c
    org.geometerplus.zlibrary.text.view.ZLTextWord this$0 -> d
    org.geometerplus.zlibrary.text.view.ZLTextWord$Mark getNext() -> a
    void access$1(org.geometerplus.zlibrary.text.view.ZLTextWord$Mark,org.geometerplus.zlibrary.text.view.ZLTextWord$Mark) -> a
org.geometerplus.zlibrary.text.view.ZLTextWordCursor -> org.geometerplus.zlibrary.b.a.b:
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor myParagraphCursor -> a
    int myElementIndex -> b
    int myCharIndex -> c
    void setCursor(org.geometerplus.zlibrary.text.view.ZLTextWordCursor) -> a
    void setCursor(org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor) -> a
    boolean isNull() -> a
    boolean isStartOfParagraph() -> b
    boolean isEndOfParagraph() -> c
    int getParagraphIndex() -> d
    int getElementIndex() -> e
    int getCharIndex() -> f
    org.geometerplus.zlibrary.text.view.ZLTextElement getElement() -> g
    org.geometerplus.zlibrary.text.view.ZLTextParagraphCursor getParagraphCursor() -> h
    org.geometerplus.zlibrary.text.model.ZLTextMark getMark() -> i
    void nextWord() -> j
    boolean nextParagraph() -> k
    boolean previousParagraph() -> l
    void moveToParagraphStart() -> m
    void moveToParagraphEnd() -> n
    void moveToParagraph(int) -> a
    void moveTo(int,int) -> a
    void reset() -> o
    void rebuild() -> p
    java.lang.String toString() -> toString
org.geometerplus.zlibrary.text.view.ZLTextWordRegion -> org.geometerplus.zlibrary.b.a.aa:
    org.geometerplus.zlibrary.text.view.ZLTextWord Word -> a
    boolean equals(java.lang.Object) -> equals
org.geometerplus.zlibrary.text.view.style.ZLTextBaseStyle -> org.geometerplus.zlibrary.b.a.a.a:
    org.geometerplus.zlibrary.core.options.ZLBooleanOption AutoHyphenationOption -> a
    org.geometerplus.zlibrary.core.options.ZLBooleanOption BoldOption -> b
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ItalicOption -> c
    org.geometerplus.zlibrary.core.options.ZLBooleanOption UnderlineOption -> j
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption AlignmentOption -> d
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption LineSpaceOption -> e
    org.geometerplus.zlibrary.core.options.ZLStringOption FontFamilyOption -> f
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption FontSizeOption -> g
    java.lang.String getFontFamily() -> a
    int getFontSize() -> b
    boolean isBold() -> c
    boolean isItalic() -> d
    boolean isUnderline() -> e
    int getLeftIndent() -> f
    int getRightIndent() -> g
    int getFirstLineIndentDelta() -> h
    int getLineSpacePercent() -> i
    int getVerticalShift() -> j
    int getSpaceBefore() -> k
    int getSpaceAfter() -> l
    byte getAlignment() -> m
    boolean allowHyphenations() -> n
org.geometerplus.zlibrary.text.view.style.ZLTextDecoratedStyle -> org.geometerplus.zlibrary.b.a.a.g:
    java.lang.String myFontFamily -> a
    int myFontSize -> b
    boolean myIsItalic -> c
    boolean myIsBold -> d
    boolean myIsUnderline -> e
    int myVerticalShift -> f
    boolean myIsNotCached -> g
    void initCache() -> u
    java.lang.String getFontFamily() -> a
    java.lang.String getFontFamilyInternal() -> o
    int getFontSize() -> b
    int getFontSizeInternal() -> p
    boolean isItalic() -> d
    boolean isItalicInternal() -> r
    boolean isBold() -> c
    boolean isBoldInternal() -> q
    boolean isUnderline() -> e
    boolean isUnderlineInternal() -> s
    int getVerticalShift() -> j
    int getVerticalShiftInternal() -> t
org.geometerplus.zlibrary.text.view.style.ZLTextFullDecoratedStyle -> org.geometerplus.zlibrary.b.a.a.f:
    org.geometerplus.zlibrary.text.view.style.ZLTextFullStyleDecoration myFullDecoration -> a
    int getLeftIndent() -> f
    int getRightIndent() -> g
    int getFirstLineIndentDelta() -> h
    int getLineSpacePercent() -> i
    int getSpaceBefore() -> k
    int getSpaceAfter() -> l
    byte getAlignment() -> m
    boolean allowHyphenations() -> n
org.geometerplus.zlibrary.text.view.style.ZLTextFullStyleDecoration -> org.geometerplus.zlibrary.b.a.a.e:
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption SpaceBeforeOption -> a
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption SpaceAfterOption -> b
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption LeftIndentOption -> c
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption RightIndentOption -> d
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption FirstLineIndentDeltaOption -> e
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption AlignmentOption -> f
    org.geometerplus.zlibrary.core.options.ZLIntegerOption LineSpacePercentOption -> g
    org.geometerplus.zlibrary.text.view.ZLTextStyle createDecoratedStyle(org.geometerplus.zlibrary.text.view.ZLTextStyle,org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
org.geometerplus.zlibrary.text.view.style.ZLTextPartialDecoratedStyle -> org.geometerplus.zlibrary.b.a.a.b:
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration myDecoration -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3 -> b
    java.lang.String getFontFamilyInternal() -> o
    int getFontSizeInternal() -> p
    boolean isBoldInternal() -> q
    boolean isItalicInternal() -> r
    boolean isUnderlineInternal() -> s
    int getLeftIndent() -> f
    int getRightIndent() -> g
    int getFirstLineIndentDelta() -> h
    int getLineSpacePercent() -> i
    int getVerticalShiftInternal() -> t
    int getSpaceBefore() -> k
    int getSpaceAfter() -> l
    byte getAlignment() -> m
    boolean allowHyphenations() -> n
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$util$ZLBoolean3() -> u
org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection -> org.geometerplus.zlibrary.b.a.a.c:
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection ourInstance -> a
    org.geometerplus.zlibrary.text.view.style.ZLTextBaseStyle myBaseStyle -> b
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration[] myDecorationMap -> c
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection Instance() -> a
    org.geometerplus.zlibrary.text.view.style.ZLTextBaseStyle getBaseStyle() -> b
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration getDecoration(byte) -> a
    void access$0(org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection,org.geometerplus.zlibrary.text.view.style.ZLTextBaseStyle) -> a
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration[] access$1(org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection) -> a
org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection$TextStyleReader -> org.geometerplus.zlibrary.b.a.a.d:
    org.geometerplus.zlibrary.text.view.style.ZLTextStyleCollection myCollection -> a
    boolean dontCacheAttributeValues() -> b
    int intValue(org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String,int) -> a
    org.geometerplus.zlibrary.core.util.ZLBoolean3 b3Value(org.geometerplus.zlibrary.core.xml.ZLStringMap,java.lang.String) -> a
    boolean startElementHandler(java.lang.String,org.geometerplus.zlibrary.core.xml.ZLStringMap) -> a
org.geometerplus.zlibrary.text.view.style.ZLTextStyleDecoration -> org.geometerplus.zlibrary.b.a.a.h:
    org.geometerplus.zlibrary.core.options.ZLStringOption FontFamilyOption -> h
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption FontSizeDeltaOption -> i
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option BoldOption -> j
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option ItalicOption -> k
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option UnderlineOption -> l
    org.geometerplus.zlibrary.core.options.ZLIntegerOption VerticalShiftOption -> m
    org.geometerplus.zlibrary.core.options.ZLBoolean3Option AllowHyphenationsOption -> n
    java.lang.String myName -> a
    org.geometerplus.zlibrary.text.view.ZLTextStyle createDecoratedStyle(org.geometerplus.zlibrary.text.view.ZLTextStyle,org.geometerplus.zlibrary.text.view.ZLTextHyperlink) -> a
    java.lang.String getName() -> a
org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow -> org.geometerplus.zlibrary.ui.android.c.a:
    java.util.HashMap myMenuItemMap -> a
    android.view.MenuItem$OnMenuItemClickListener myMenuListener -> b
    int SHOW_AS_ACTION_ALWAYS -> c
    int SHOW_AS_ACTION_IF_ROOM -> d
    int SHOW_AS_ACTION_NEVER -> e
    int SHOW_AS_ACTION_WITH_TEXT -> f
    int myBatteryLevel -> g
    void addMenuItem(android.view.Menu,java.lang.String,java.lang.Integer) -> a
    void refreshMenu() -> b
    org.geometerplus.zlibrary.core.view.ZLViewWidget getViewWidget() -> c
    void rotate() -> d
    boolean canRotate() -> e
    void close() -> f
    int getBatteryLevel() -> g
    void setBatteryLevel(int) -> a
    java.util.HashMap access$0(org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow) -> a
org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow$1 -> org.geometerplus.zlibrary.ui.android.c.b:
    org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> onMenuItemClick
org.geometerplus.zlibrary.ui.android.dialogs.ZLAndroidDialogManager -> org.geometerplus.zlibrary.ui.android.d.a:
    android.app.Activity myActivity -> a
    void setActivity(android.app.Activity) -> a
    void wait(java.lang.String,java.lang.Runnable) -> a
org.geometerplus.zlibrary.ui.android.image.InputStreamImageData -> org.geometerplus.zlibrary.ui.android.a.e:
    org.geometerplus.zlibrary.core.image.ZLSingleImage myImage -> a
    android.graphics.Bitmap decodeWithOptions(android.graphics.BitmapFactory$Options) -> a
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageData -> org.geometerplus.zlibrary.ui.android.a.g:
    android.graphics.Bitmap myBitmap -> a
    int myRealWidth -> b
    int myRealHeight -> c
    int myLastRequestedWidth -> d
    int myLastRequestedHeight -> e
    android.graphics.Bitmap decodeWithOptions(android.graphics.BitmapFactory$Options) -> a
    android.graphics.Bitmap getFullSizeBitmap() -> a
    android.graphics.Bitmap getBitmap(int,int) -> a
    android.graphics.Bitmap getBitmap(int,int,boolean) -> a
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader -> org.geometerplus.zlibrary.ui.android.a.d:
    java.util.concurrent.ExecutorService myPool -> a
    java.util.concurrent.ExecutorService mySinglePool -> b
    java.util.HashMap myOnImageSyncRunnables -> c
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$ImageSynchronizedHandler myImageSynchronizedHandler -> d
    void startImageLoading(org.geometerplus.zlibrary.core.image.ZLLoadableImage,java.lang.Runnable) -> a
    java.util.HashMap access$0(org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader) -> a
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$ImageSynchronizedHandler access$1(org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader) -> b
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$1 -> org.geometerplus.zlibrary.ui.android.a.b:
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader this$0 -> a
    org.geometerplus.zlibrary.core.image.ZLLoadableImage val$image -> b
    void run() -> run
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$ImageSynchronizedHandler -> org.geometerplus.zlibrary.ui.android.a.a:
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader$MinPriorityThreadFactory -> org.geometerplus.zlibrary.ui.android.a.f:
    java.util.concurrent.ThreadFactory myDefaultThreadFactory -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageManager -> org.geometerplus.zlibrary.ui.android.a.c:
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageLoader myLoader -> a
    org.geometerplus.zlibrary.ui.android.image.ZLAndroidImageData getImageData(org.geometerplus.zlibrary.core.image.ZLImage) -> b
    void startImageLoading(org.geometerplus.zlibrary.core.image.ZLLoadableImage,java.lang.Runnable) -> a
    org.geometerplus.zlibrary.core.image.ZLImageData getImageData(org.geometerplus.zlibrary.core.image.ZLImage) -> a
org.geometerplus.zlibrary.ui.android.library.BugReportActivity -> org.geometerplus.zlibrary.ui.android.library.BugReportActivity:
    java.lang.String getVersionName() -> a
    void onCreate(android.os.Bundle) -> onCreate
org.geometerplus.zlibrary.ui.android.library.BugReportActivity$1 -> org.geometerplus.zlibrary.ui.android.library.f:
    org.geometerplus.zlibrary.ui.android.library.BugReportActivity this$0 -> a
    java.lang.String val$stackTrace -> b
    java.lang.String val$versionName -> c
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.ui.android.library.BugReportActivity$2 -> org.geometerplus.zlibrary.ui.android.library.e:
    org.geometerplus.zlibrary.ui.android.library.BugReportActivity this$0 -> a
    void onClick(android.view.View) -> onClick
org.geometerplus.zlibrary.ui.android.library.UncaughtExceptionHandler -> org.geometerplus.zlibrary.ui.android.library.a:
    android.content.Context myContext -> a
    void uncaughtException(java.lang.Thread,java.lang.Throwable) -> uncaughtException
org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity -> org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity:
    android.os.PowerManager$WakeLock myWakeLock -> a
    boolean myWakeLockToCreate -> b
    boolean myStartTimer -> c
    int myChangeCounter -> d
    int myOrientation -> e
    android.content.BroadcastReceiver myBatteryInfoReceiver -> f
    org.geometerplus.zlibrary.core.application.ZLApplication createApplication(org.geometerplus.zlibrary.core.filesystem.ZLFile) -> a
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void setScreenBrightness(int) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLFile fileFromIntent(android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onStart() -> onStart
    void createWakeLock() -> a
    void switchWakeLock(boolean) -> a
    void onResume() -> onResume
    void onPause() -> onPause
    void onLowMemory() -> onLowMemory
    void onNewIntent(android.content.Intent) -> onNewIntent
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void setAutoRotationMode() -> c
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void rotate() -> b
    void access$0(org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity,boolean) -> a
org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity$1 -> org.geometerplus.zlibrary.ui.android.library.d:
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
org.geometerplus.zlibrary.ui.android.library.ZLAndroidApplication -> org.geometerplus.zlibrary.ui.android.library.ZLAndroidApplication:
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidApplication ourApplication -> h
    org.geometerplus.zlibrary.core.options.ZLBooleanOption AutoOrientationOption -> a
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ShowStatusBarOption -> b
    org.geometerplus.zlibrary.core.options.ZLBooleanOption ShowStatusBarWhenMenuIsActiveOption -> c
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption BatteryLevelToTurnScreenOffOption -> d
    org.geometerplus.zlibrary.core.options.ZLBooleanOption DontTurnScreenOffDuringChargingOption -> i
    org.geometerplus.zlibrary.core.options.ZLIntegerRangeOption ScreenBrightnessLevelOption -> e
    org.geometerplus.zlibrary.core.options.ZLBooleanOption DisableButtonLightsOption -> f
    org.geometerplus.zlibrary.ui.android.application.ZLAndroidApplicationWindow myMainWindow -> g
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidApplication Instance() -> a
    void onCreate() -> onCreate
org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary -> org.geometerplus.zlibrary.ui.android.library.c:
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity myActivity -> a
    android.app.Application myApplication -> b
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget myWidget -> c
    void setActivity(org.geometerplus.zlibrary.ui.android.library.ZLAndroidActivity) -> a
    void rotateScreen() -> g
    void finish() -> h
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget getWidget() -> i
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(java.lang.String) -> a
    org.geometerplus.zlibrary.core.filesystem.ZLResourceFile createResourceFile(org.geometerplus.zlibrary.core.filesystem.ZLResourceFile,java.lang.String) -> a
    java.lang.String getVersionName() -> b
    java.lang.String getCurrentTimeString() -> c
    void setScreenBrightness(int) -> a
    int getScreenBrightness() -> d
    int getDisplayDPI() -> e
    java.util.Collection defaultLanguageCodes() -> f
    android.app.Application access$0(org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary) -> a
org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary$AndroidAssetsFile -> org.geometerplus.zlibrary.ui.android.library.b:
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary$AndroidAssetsFile myParent -> b
    org.geometerplus.zlibrary.ui.android.library.ZLAndroidLibrary this$0 -> c
    java.util.List directoryEntries() -> k
    boolean isDirectory() -> g
    boolean exists() -> f
    long size() -> d
    java.io.InputStream getInputStream() -> e
    org.geometerplus.zlibrary.core.filesystem.ZLFile getParent() -> j
org.geometerplus.zlibrary.ui.android.network.SQLiteCookieDatabase -> org.geometerplus.zlibrary.ui.android.e.a:
    android.database.sqlite.SQLiteDatabase myDatabase -> a
    android.database.sqlite.SQLiteStatement myInsertStatement -> b
    android.database.sqlite.SQLiteStatement myInsertPortsStatement -> c
    android.database.sqlite.SQLiteStatement myDeletePortsStatement -> d
    void init(android.content.Context) -> a
    void saveCookies(java.util.Collection) -> a
    java.util.Collection loadCookies() -> b
org.geometerplus.zlibrary.ui.android.util.ZLAndroidColorUtil -> org.geometerplus.zlibrary.ui.android.b.b:
    int rgb(org.geometerplus.zlibrary.core.util.ZLColor) -> a
org.geometerplus.zlibrary.ui.android.util.ZLAndroidKeyUtil -> org.geometerplus.zlibrary.ui.android.b.a:
    java.lang.String getKeyNameByCode(int) -> a
org.geometerplus.zlibrary.ui.android.view.AndroidFontUtil -> org.geometerplus.zlibrary.ui.android.view.n:
    java.lang.reflect.Method ourFontCreationMethod -> a
    java.util.Map ourFontMap -> b
    java.io.File[] ourFileList -> c
    long myTimeStamp -> d
    boolean areExternalFontsSupported() -> a
    android.graphics.Typeface createFontFromFile(java.io.File) -> a
    java.util.Map getFontMap(boolean) -> a
    java.lang.String realFontFamilyName(java.lang.String) -> a
    void fillFamiliesList$97cb41f(java.util.ArrayList) -> a
org.geometerplus.zlibrary.ui.android.view.AndroidFontUtil$1 -> org.geometerplus.zlibrary.ui.android.view.e:
    boolean accept(java.io.File,java.lang.String) -> accept
org.geometerplus.zlibrary.ui.android.view.AnimationProvider -> org.geometerplus.zlibrary.ui.android.view.l:
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode myMode -> i
    org.geometerplus.zlibrary.ui.android.view.BitmapManager myBitmapManager -> j
    int myStartX -> a
    int myStartY -> b
    int myEndX -> c
    int myEndY -> d
    org.geometerplus.zlibrary.core.view.ZLView$Direction myDirection -> e
    float mySpeed -> f
    int myWidth -> g
    int myHeight -> h
    java.util.List myDrawInfos -> k
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> l
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode getMode() -> b
    void terminate() -> c
    void startManualScrolling(int,int) -> b
    void scrollTo(int,int) -> c
    void startAutoScrolling(int,int,int) -> a
    void startAutoScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,java.lang.Integer,java.lang.Integer,int) -> a
    void startAutoScrollingInternal(int) -> a
    void setupAutoScrollingStart(java.lang.Integer,java.lang.Integer) -> a
    boolean inProgress() -> d
    int getScrollingShift() -> e
    void setup(org.geometerplus.zlibrary.core.view.ZLView$Direction,int,int) -> a
    void doStep() -> a
    int getScrolledPercent() -> f
    void draw(android.graphics.Canvas) -> b
    void drawInternal(android.graphics.Canvas) -> a
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo(int,int) -> a
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo() -> g
    android.graphics.Bitmap getBitmapFrom() -> h
    android.graphics.Bitmap getBitmapTo() -> i
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> j
org.geometerplus.zlibrary.ui.android.view.AnimationProvider$DrawInfo -> org.geometerplus.zlibrary.ui.android.view.j:
    int X -> a
    int Y -> b
    long Start -> c
    int Duration -> d
org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode -> org.geometerplus.zlibrary.ui.android.view.a:
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode NoScrolling -> a
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode ManualScrolling -> b
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode AutoScrollingForward -> c
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode AutoScrollingBackward -> d
    boolean Auto -> e
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode[] ENUM$VALUES -> f
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode[] values() -> values
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider$Mode valueOf(java.lang.String) -> valueOf
org.geometerplus.zlibrary.ui.android.view.BitmapManager -> org.geometerplus.zlibrary.ui.android.view.m:
    int SIZE -> a
    android.graphics.Bitmap[] myBitmaps -> b
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex[] myIndexes -> c
    int myWidth -> d
    int myHeight -> e
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget myWidget -> f
    void setSize(int,int) -> a
    android.graphics.Bitmap getBitmap(org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    void reset() -> a
    void shift(boolean) -> a
org.geometerplus.zlibrary.ui.android.view.CurlAnimationProvider -> org.geometerplus.zlibrary.ui.android.view.i:
    android.graphics.Paint myPaint -> i
    android.graphics.Paint myBackPaint -> j
    android.graphics.Paint myEdgePaint -> k
    android.graphics.Path myFgPath -> l
    android.graphics.Path myEdgePath -> m
    android.graphics.Path myQuadPath -> n
    float mySpeedFactor -> o
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> p
    void drawInternal(android.graphics.Canvas) -> a
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo(int,int) -> a
    void startAutoScrollingInternal(int) -> a
    void setupAutoScrollingStart(java.lang.Integer,java.lang.Integer) -> a
    void doStep() -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> j
org.geometerplus.zlibrary.ui.android.view.NoneAnimationProvider -> org.geometerplus.zlibrary.ui.android.view.d:
    android.graphics.Paint myPaint -> i
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> j
    void drawInternal(android.graphics.Canvas) -> a
    void doStep() -> a
    void setupAutoScrollingStart(java.lang.Integer,java.lang.Integer) -> a
    void startAutoScrollingInternal(int) -> a
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo(int,int) -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> j
org.geometerplus.zlibrary.ui.android.view.ShiftAnimationProvider -> org.geometerplus.zlibrary.ui.android.view.c:
    android.graphics.Paint myPaint -> i
    void drawInternal(android.graphics.Canvas) -> a
org.geometerplus.zlibrary.ui.android.view.SimpleAnimationProvider -> org.geometerplus.zlibrary.ui.android.view.h:
    float mySpeedFactor -> i
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction -> j
    org.geometerplus.zlibrary.core.view.ZLView$PageIndex getPageToScrollTo(int,int) -> a
    void setupAutoScrollingStart(java.lang.Integer,java.lang.Integer) -> a
    void startAutoScrollingInternal(int) -> a
    void doStep() -> a
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Direction() -> j
org.geometerplus.zlibrary.ui.android.view.SlideAnimationProvider -> org.geometerplus.zlibrary.ui.android.view.g:
    android.graphics.Paint myPaint -> i
    void drawInternal(android.graphics.Canvas) -> a
org.geometerplus.zlibrary.ui.android.view.ZLAndroidPaintContext -> org.geometerplus.zlibrary.ui.android.view.b:
    android.graphics.Canvas myCanvas -> a
    android.graphics.Paint myTextPaint -> b
    android.graphics.Paint myLinePaint -> c
    android.graphics.Paint myFillPaint -> d
    android.graphics.Paint myOutlinePaint -> e
    int myWidth -> f
    int myHeight -> g
    int myScrollbarWidth -> h
    java.util.HashMap myTypefaces -> i
    org.geometerplus.zlibrary.core.filesystem.ZLFile ourWallpaperFile -> j
    android.graphics.Bitmap ourWallpaper -> k
    void clear(org.geometerplus.zlibrary.core.filesystem.ZLFile,boolean) -> a
    void clear(org.geometerplus.zlibrary.core.util.ZLColor) -> a
    void drawOutline(int[],int[]) -> a
    void setFontInternal(java.lang.String,int,boolean,boolean,boolean) -> a
    void setTextColor(org.geometerplus.zlibrary.core.util.ZLColor) -> b
    void setLineColor$818b5b1(org.geometerplus.zlibrary.core.util.ZLColor) -> c
    void setLineWidth(int) -> a
    void setFillColor$818b5b1(org.geometerplus.zlibrary.core.util.ZLColor) -> d
    int getWidth() -> a
    int getHeight() -> b
    int getStringWidth(char[],int,int) -> a
    int getSpaceWidthInternal() -> c
    int getStringHeightInternal() -> d
    int getDescentInternal() -> e
    void drawString(int,int,char[],int,int) -> a
    int imageWidth(org.geometerplus.zlibrary.core.image.ZLImageData) -> a
    int imageHeight(org.geometerplus.zlibrary.core.image.ZLImageData) -> b
    void drawImage(int,int,org.geometerplus.zlibrary.core.image.ZLImageData) -> a
    void drawLine(int,int,int,int) -> a
    void fillRectangle(int,int,int,int) -> b
org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget -> org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget:
    android.graphics.Paint myPaint -> a
    org.geometerplus.zlibrary.ui.android.view.BitmapManager myBitmapManager -> b
    android.graphics.Bitmap myFooterBitmap -> c
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider myAnimationProvider -> d
    org.geometerplus.zlibrary.core.view.ZLView$Animation myAnimationType -> e
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget$LongClickRunnable myPendingLongClickRunnable -> f
    boolean myLongClickPerformed -> g
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget$ShortClickRunnable myPendingShortClickRunnable -> h
    boolean myPendingPress -> i
    boolean myPendingDoubleTap -> j
    int myPressedX -> k
    int myPressedY -> l
    boolean myScreenIsTouched -> m
    java.lang.String myKeyUnderTracking -> n
    long myTrackingStartTime -> o
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Animation -> p
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$ui$android$view$AnimationProvider$Mode -> q
    void init() -> c
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void onDraw(android.graphics.Canvas) -> onDraw
    org.geometerplus.zlibrary.ui.android.view.AnimationProvider getAnimationProvider() -> d
    void reset() -> a
    void repaint() -> b
    void startManualScrolling(int,int,org.geometerplus.zlibrary.core.view.ZLView$Direction) -> a
    void scrollManuallyTo(int,int) -> a
    void startAutoScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,int,int,org.geometerplus.zlibrary.core.view.ZLView$Direction,int) -> a
    void startAutoScrolling(org.geometerplus.zlibrary.core.view.ZLView$PageIndex,org.geometerplus.zlibrary.core.view.ZLView$Direction,int) -> a
    void startAutoScrolling(int,int,int) -> a
    void drawOnBitmap(android.graphics.Bitmap,org.geometerplus.zlibrary.core.view.ZLView$PageIndex) -> a
    void drawFooter(android.graphics.Canvas) -> a
    void onDrawStatic(android.graphics.Canvas) -> b
    boolean onTrackballEvent(android.view.MotionEvent) -> onTrackballEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onLongClick(android.view.View) -> onLongClick
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    int computeVerticalScrollExtent() -> computeVerticalScrollExtent
    int computeVerticalScrollOffset() -> computeVerticalScrollOffset
    int computeVerticalScrollRange() -> computeVerticalScrollRange
    int getMainAreaHeight() -> e
    void access$0$2e272242(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget) -> a
    int access$1(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget) -> b
    int access$2(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget) -> c
    void access$3$2e272242(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget) -> d
    void access$4$50d38a72(org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget) -> e
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$core$view$ZLView$Animation() -> f
    int[] $SWITCH_TABLE$org$geometerplus$zlibrary$ui$android$view$AnimationProvider$Mode() -> g
org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget$LongClickRunnable -> org.geometerplus.zlibrary.ui.android.view.f:
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget this$0 -> a
    void run() -> run
org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget$ShortClickRunnable -> org.geometerplus.zlibrary.ui.android.view.k:
    org.geometerplus.zlibrary.ui.android.view.ZLAndroidWidget this$0 -> a
    void run() -> run
org.vimgadgets.linebreak.LineBreaker -> org.vimgadgets.linebreak.LineBreaker:
    java.lang.String myLanguage -> a
    void init() -> init
    void setLineBreaksForCharArray(char[],int,int,java.lang.String,byte[]) -> setLineBreaksForCharArray
    void setLineBreaks(char[],int,int,byte[]) -> a
p -> w:
    void a(d,java.util.HashMap,android.webkit.WebView) -> a
q -> v:
    void a(d,java.util.HashMap,android.webkit.WebView) -> a
r -> u:
    void a(d,java.util.HashMap,android.webkit.WebView) -> a
s -> t:
    void a(d,java.util.HashMap,android.webkit.WebView) -> a
t -> s:
    void a(d,java.util.HashMap,android.webkit.WebView) -> a
u -> r:
    void a(d,java.util.HashMap,android.webkit.WebView) -> a
v -> q:
    void a(d,java.util.HashMap,android.webkit.WebView) -> a
w -> p:
    android.content.Context a -> a
    java.lang.String b -> b
    void run() -> run
x -> x:
    java.lang.ref.WeakReference a -> a
    void run() -> run
